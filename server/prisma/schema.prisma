generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  passwordHash   String
  userTypeId     String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  firstName      String?
  lastName       String?
  username       String?     @unique
  bids           Bid[]
  leads          Lead[]      @relation("LeadOwner")
  purchasedLeads LeadSale[]  @relation("LeadBuyer")
  watching       LeadWatch[]
  userType       UserType    @relation(fields: [userTypeId], references: [id])
}

model Lead {
  id              String      @id @default(cuid())
  title           String
  description     String
  startPrice      Int
  minIncrement    Int
  instantBuyPrice Int?
  isActive        Boolean     @default(true)
  isSold          Boolean     @default(false)
  endsAt          DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  ownerId         String
  bids            Bid[]
  owner           User        @relation("LeadOwner", fields: [ownerId], references: [id])
  sale            LeadSale?
  watchers        LeadWatch[]
}

model Bid {
  id        String   @id @default(cuid())
  amount    Int
  createdAt DateTime @default(now())
  leadId    String
  userId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model LeadWatch {
  id        String   @id @default(cuid())
  leadId    String
  userId    String
  createdAt DateTime @default(now())
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([leadId, userId])
}

model LeadSale {
  id        String   @id @default(cuid())
  leadId    String   @unique
  buyerId   String
  amount    Int
  soldAt    DateTime @default(now())
  createdAt DateTime @default(now())
  buyer     User     @relation("LeadBuyer", fields: [buyerId], references: [id])
  lead      Lead     @relation(fields: [leadId], references: [id])
}

model Settings {
  id                  String   @id @default("default")
  leadIdFormat        String   @default("numeric")
  customFormat        String   @default("L{YYYY}{MM}{DD}-{NUM}")
  leadPrefix          String   @default("LEAD")
  startingNumber      Int      @default(1)
  numberType          String   @default("sequential")
  defaultCurrency     String   @default("TRY")
  defaultAuctionDays  Int      @default(7)
  defaultMinIncrement Int      @default(10)
  maintenanceMode     Boolean  @default(false)
  maintenanceMessage  String   @default("Sistem bakımda. Lütfen daha sonra tekrar deneyin.")
  smtpHost            String   @default("")
  smtpPort            Int      @default(465)
  smtpUser            String   @default("")
  smtpPass            String   @default("")
  smtpFromName        String   @default("LeadPortal")
  smtpUseTLS          Boolean  @default(false)
  smtpUseSSL          Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model UserType {
  id          String               @id
  name        String
  description String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  users       User[]
  permissions UserTypePermission[]
}

model Page {
  id          String               @id
  name        String
  description String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  permissions UserTypePermission[]
}

model UserTypePermission {
  id         Int      @id @default(autoincrement())
  userTypeId String
  pageId     String
  hasAccess  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  userType   UserType @relation(fields: [userTypeId], references: [id], onDelete: Cascade)

  @@unique([userTypeId, pageId])
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String
  category    String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model About {
  id          String   @id @default(cuid())
  section     String   // hero, mission, team, stats, etc.
  title       String?
  subtitle    String?
  content     String?
  imageUrl    String?
  data        Json?    // For flexible data like stats, team members
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
