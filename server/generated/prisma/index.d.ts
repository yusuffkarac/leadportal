
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Lead
 * 
 */
export type Lead = $Result.DefaultSelection<Prisma.$LeadPayload>
/**
 * Model Bid
 * 
 */
export type Bid = $Result.DefaultSelection<Prisma.$BidPayload>
/**
 * Model LeadWatch
 * 
 */
export type LeadWatch = $Result.DefaultSelection<Prisma.$LeadWatchPayload>
/**
 * Model LeadSale
 * 
 */
export type LeadSale = $Result.DefaultSelection<Prisma.$LeadSalePayload>
/**
 * Model Settings
 * 
 */
export type Settings = $Result.DefaultSelection<Prisma.$SettingsPayload>
/**
 * Model UserType
 * 
 */
export type UserType = $Result.DefaultSelection<Prisma.$UserTypePayload>
/**
 * Model Page
 * 
 */
export type Page = $Result.DefaultSelection<Prisma.$PagePayload>
/**
 * Model UserTypePermission
 * 
 */
export type UserTypePermission = $Result.DefaultSelection<Prisma.$UserTypePermissionPayload>
/**
 * Model LeadTypePermission
 * 
 */
export type LeadTypePermission = $Result.DefaultSelection<Prisma.$LeadTypePermissionPayload>
/**
 * Model UserLeadTypePermission
 * 
 */
export type UserLeadTypePermission = $Result.DefaultSelection<Prisma.$UserLeadTypePermissionPayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model About
 * 
 */
export type About = $Result.DefaultSelection<Prisma.$AboutPayload>
/**
 * Model DesignSettings
 * 
 */
export type DesignSettings = $Result.DefaultSelection<Prisma.$DesignSettingsPayload>
/**
 * Model EmailTemplate
 * 
 */
export type EmailTemplate = $Result.DefaultSelection<Prisma.$EmailTemplatePayload>
/**
 * Model SMSTemplate
 * 
 */
export type SMSTemplate = $Result.DefaultSelection<Prisma.$SMSTemplatePayload>
/**
 * Model ActivityLog
 * 
 */
export type ActivityLog = $Result.DefaultSelection<Prisma.$ActivityLogPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model BalanceTransaction
 * 
 */
export type BalanceTransaction = $Result.DefaultSelection<Prisma.$BalanceTransactionPayload>
/**
 * Model NotificationType
 * 
 */
export type NotificationType = $Result.DefaultSelection<Prisma.$NotificationTypePayload>
/**
 * Model NotificationPreference
 * 
 */
export type NotificationPreference = $Result.DefaultSelection<Prisma.$NotificationPreferencePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model NotificationRolePermission
 * 
 */
export type NotificationRolePermission = $Result.DefaultSelection<Prisma.$NotificationRolePermissionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lead`: Exposes CRUD operations for the **Lead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.lead.findMany()
    * ```
    */
  get lead(): Prisma.LeadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bid`: Exposes CRUD operations for the **Bid** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bids
    * const bids = await prisma.bid.findMany()
    * ```
    */
  get bid(): Prisma.BidDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leadWatch`: Exposes CRUD operations for the **LeadWatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadWatches
    * const leadWatches = await prisma.leadWatch.findMany()
    * ```
    */
  get leadWatch(): Prisma.LeadWatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leadSale`: Exposes CRUD operations for the **LeadSale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadSales
    * const leadSales = await prisma.leadSale.findMany()
    * ```
    */
  get leadSale(): Prisma.LeadSaleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userType`: Exposes CRUD operations for the **UserType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTypes
    * const userTypes = await prisma.userType.findMany()
    * ```
    */
  get userType(): Prisma.UserTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.page`: Exposes CRUD operations for the **Page** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.page.findMany()
    * ```
    */
  get page(): Prisma.PageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userTypePermission`: Exposes CRUD operations for the **UserTypePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTypePermissions
    * const userTypePermissions = await prisma.userTypePermission.findMany()
    * ```
    */
  get userTypePermission(): Prisma.UserTypePermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leadTypePermission`: Exposes CRUD operations for the **LeadTypePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadTypePermissions
    * const leadTypePermissions = await prisma.leadTypePermission.findMany()
    * ```
    */
  get leadTypePermission(): Prisma.LeadTypePermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userLeadTypePermission`: Exposes CRUD operations for the **UserLeadTypePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLeadTypePermissions
    * const userLeadTypePermissions = await prisma.userLeadTypePermission.findMany()
    * ```
    */
  get userLeadTypePermission(): Prisma.UserLeadTypePermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.about`: Exposes CRUD operations for the **About** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abouts
    * const abouts = await prisma.about.findMany()
    * ```
    */
  get about(): Prisma.AboutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.designSettings`: Exposes CRUD operations for the **DesignSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DesignSettings
    * const designSettings = await prisma.designSettings.findMany()
    * ```
    */
  get designSettings(): Prisma.DesignSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailTemplate`: Exposes CRUD operations for the **EmailTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailTemplates
    * const emailTemplates = await prisma.emailTemplate.findMany()
    * ```
    */
  get emailTemplate(): Prisma.EmailTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sMSTemplate`: Exposes CRUD operations for the **SMSTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SMSTemplates
    * const sMSTemplates = await prisma.sMSTemplate.findMany()
    * ```
    */
  get sMSTemplate(): Prisma.SMSTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityLog`: Exposes CRUD operations for the **ActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLogs
    * const activityLogs = await prisma.activityLog.findMany()
    * ```
    */
  get activityLog(): Prisma.ActivityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.balanceTransaction`: Exposes CRUD operations for the **BalanceTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BalanceTransactions
    * const balanceTransactions = await prisma.balanceTransaction.findMany()
    * ```
    */
  get balanceTransaction(): Prisma.BalanceTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationType`: Exposes CRUD operations for the **NotificationType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationTypes
    * const notificationTypes = await prisma.notificationType.findMany()
    * ```
    */
  get notificationType(): Prisma.NotificationTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationPreference`: Exposes CRUD operations for the **NotificationPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationPreferences
    * const notificationPreferences = await prisma.notificationPreference.findMany()
    * ```
    */
  get notificationPreference(): Prisma.NotificationPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationRolePermission`: Exposes CRUD operations for the **NotificationRolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationRolePermissions
    * const notificationRolePermissions = await prisma.notificationRolePermission.findMany()
    * ```
    */
  get notificationRolePermission(): Prisma.NotificationRolePermissionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Lead: 'Lead',
    Bid: 'Bid',
    LeadWatch: 'LeadWatch',
    LeadSale: 'LeadSale',
    Settings: 'Settings',
    UserType: 'UserType',
    Page: 'Page',
    UserTypePermission: 'UserTypePermission',
    LeadTypePermission: 'LeadTypePermission',
    UserLeadTypePermission: 'UserLeadTypePermission',
    FAQ: 'FAQ',
    About: 'About',
    DesignSettings: 'DesignSettings',
    EmailTemplate: 'EmailTemplate',
    SMSTemplate: 'SMSTemplate',
    ActivityLog: 'ActivityLog',
    PasswordResetToken: 'PasswordResetToken',
    BalanceTransaction: 'BalanceTransaction',
    NotificationType: 'NotificationType',
    NotificationPreference: 'NotificationPreference',
    Notification: 'Notification',
    NotificationRolePermission: 'NotificationRolePermission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "lead" | "bid" | "leadWatch" | "leadSale" | "settings" | "userType" | "page" | "userTypePermission" | "leadTypePermission" | "userLeadTypePermission" | "fAQ" | "about" | "designSettings" | "emailTemplate" | "sMSTemplate" | "activityLog" | "passwordResetToken" | "balanceTransaction" | "notificationType" | "notificationPreference" | "notification" | "notificationRolePermission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Lead: {
        payload: Prisma.$LeadPayload<ExtArgs>
        fields: Prisma.LeadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findFirst: {
            args: Prisma.LeadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findMany: {
            args: Prisma.LeadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          create: {
            args: Prisma.LeadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          createMany: {
            args: Prisma.LeadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          delete: {
            args: Prisma.LeadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          update: {
            args: Prisma.LeadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          deleteMany: {
            args: Prisma.LeadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          upsert: {
            args: Prisma.LeadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          aggregate: {
            args: Prisma.LeadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLead>
          }
          groupBy: {
            args: Prisma.LeadGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadCountArgs<ExtArgs>
            result: $Utils.Optional<LeadCountAggregateOutputType> | number
          }
        }
      }
      Bid: {
        payload: Prisma.$BidPayload<ExtArgs>
        fields: Prisma.BidFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BidFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BidFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          findFirst: {
            args: Prisma.BidFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BidFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          findMany: {
            args: Prisma.BidFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>[]
          }
          create: {
            args: Prisma.BidCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          createMany: {
            args: Prisma.BidCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BidCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>[]
          }
          delete: {
            args: Prisma.BidDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          update: {
            args: Prisma.BidUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          deleteMany: {
            args: Prisma.BidDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BidUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BidUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>[]
          }
          upsert: {
            args: Prisma.BidUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          aggregate: {
            args: Prisma.BidAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBid>
          }
          groupBy: {
            args: Prisma.BidGroupByArgs<ExtArgs>
            result: $Utils.Optional<BidGroupByOutputType>[]
          }
          count: {
            args: Prisma.BidCountArgs<ExtArgs>
            result: $Utils.Optional<BidCountAggregateOutputType> | number
          }
        }
      }
      LeadWatch: {
        payload: Prisma.$LeadWatchPayload<ExtArgs>
        fields: Prisma.LeadWatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadWatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadWatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>
          }
          findFirst: {
            args: Prisma.LeadWatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadWatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>
          }
          findMany: {
            args: Prisma.LeadWatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>[]
          }
          create: {
            args: Prisma.LeadWatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>
          }
          createMany: {
            args: Prisma.LeadWatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadWatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>[]
          }
          delete: {
            args: Prisma.LeadWatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>
          }
          update: {
            args: Prisma.LeadWatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>
          }
          deleteMany: {
            args: Prisma.LeadWatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadWatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadWatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>[]
          }
          upsert: {
            args: Prisma.LeadWatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadWatchPayload>
          }
          aggregate: {
            args: Prisma.LeadWatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadWatch>
          }
          groupBy: {
            args: Prisma.LeadWatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadWatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadWatchCountArgs<ExtArgs>
            result: $Utils.Optional<LeadWatchCountAggregateOutputType> | number
          }
        }
      }
      LeadSale: {
        payload: Prisma.$LeadSalePayload<ExtArgs>
        fields: Prisma.LeadSaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadSaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadSaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>
          }
          findFirst: {
            args: Prisma.LeadSaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadSaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>
          }
          findMany: {
            args: Prisma.LeadSaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>[]
          }
          create: {
            args: Prisma.LeadSaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>
          }
          createMany: {
            args: Prisma.LeadSaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadSaleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>[]
          }
          delete: {
            args: Prisma.LeadSaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>
          }
          update: {
            args: Prisma.LeadSaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>
          }
          deleteMany: {
            args: Prisma.LeadSaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadSaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadSaleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>[]
          }
          upsert: {
            args: Prisma.LeadSaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadSalePayload>
          }
          aggregate: {
            args: Prisma.LeadSaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadSale>
          }
          groupBy: {
            args: Prisma.LeadSaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadSaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadSaleCountArgs<ExtArgs>
            result: $Utils.Optional<LeadSaleCountAggregateOutputType> | number
          }
        }
      }
      Settings: {
        payload: Prisma.$SettingsPayload<ExtArgs>
        fields: Prisma.SettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findFirst: {
            args: Prisma.SettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findMany: {
            args: Prisma.SettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          create: {
            args: Prisma.SettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          createMany: {
            args: Prisma.SettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          delete: {
            args: Prisma.SettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          update: {
            args: Prisma.SettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          deleteMany: {
            args: Prisma.SettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          upsert: {
            args: Prisma.SettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          aggregate: {
            args: Prisma.SettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSettings>
          }
          groupBy: {
            args: Prisma.SettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SettingsCountAggregateOutputType> | number
          }
        }
      }
      UserType: {
        payload: Prisma.$UserTypePayload<ExtArgs>
        fields: Prisma.UserTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>
          }
          findFirst: {
            args: Prisma.UserTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>
          }
          findMany: {
            args: Prisma.UserTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>[]
          }
          create: {
            args: Prisma.UserTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>
          }
          createMany: {
            args: Prisma.UserTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>[]
          }
          delete: {
            args: Prisma.UserTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>
          }
          update: {
            args: Prisma.UserTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>
          }
          deleteMany: {
            args: Prisma.UserTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>[]
          }
          upsert: {
            args: Prisma.UserTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePayload>
          }
          aggregate: {
            args: Prisma.UserTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserType>
          }
          groupBy: {
            args: Prisma.UserTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTypeCountArgs<ExtArgs>
            result: $Utils.Optional<UserTypeCountAggregateOutputType> | number
          }
        }
      }
      Page: {
        payload: Prisma.$PagePayload<ExtArgs>
        fields: Prisma.PageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findFirst: {
            args: Prisma.PageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findMany: {
            args: Prisma.PageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          create: {
            args: Prisma.PageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          createMany: {
            args: Prisma.PageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          delete: {
            args: Prisma.PageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          update: {
            args: Prisma.PageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          deleteMany: {
            args: Prisma.PageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          upsert: {
            args: Prisma.PageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          aggregate: {
            args: Prisma.PageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePage>
          }
          groupBy: {
            args: Prisma.PageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageCountArgs<ExtArgs>
            result: $Utils.Optional<PageCountAggregateOutputType> | number
          }
        }
      }
      UserTypePermission: {
        payload: Prisma.$UserTypePermissionPayload<ExtArgs>
        fields: Prisma.UserTypePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserTypePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTypePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>
          }
          findFirst: {
            args: Prisma.UserTypePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTypePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>
          }
          findMany: {
            args: Prisma.UserTypePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>[]
          }
          create: {
            args: Prisma.UserTypePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>
          }
          createMany: {
            args: Prisma.UserTypePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserTypePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>[]
          }
          delete: {
            args: Prisma.UserTypePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>
          }
          update: {
            args: Prisma.UserTypePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserTypePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserTypePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserTypePermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>[]
          }
          upsert: {
            args: Prisma.UserTypePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserTypePermissionPayload>
          }
          aggregate: {
            args: Prisma.UserTypePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserTypePermission>
          }
          groupBy: {
            args: Prisma.UserTypePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserTypePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTypePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserTypePermissionCountAggregateOutputType> | number
          }
        }
      }
      LeadTypePermission: {
        payload: Prisma.$LeadTypePermissionPayload<ExtArgs>
        fields: Prisma.LeadTypePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadTypePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadTypePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>
          }
          findFirst: {
            args: Prisma.LeadTypePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadTypePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>
          }
          findMany: {
            args: Prisma.LeadTypePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>[]
          }
          create: {
            args: Prisma.LeadTypePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>
          }
          createMany: {
            args: Prisma.LeadTypePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadTypePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>[]
          }
          delete: {
            args: Prisma.LeadTypePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>
          }
          update: {
            args: Prisma.LeadTypePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>
          }
          deleteMany: {
            args: Prisma.LeadTypePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadTypePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadTypePermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>[]
          }
          upsert: {
            args: Prisma.LeadTypePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadTypePermissionPayload>
          }
          aggregate: {
            args: Prisma.LeadTypePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadTypePermission>
          }
          groupBy: {
            args: Prisma.LeadTypePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadTypePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadTypePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<LeadTypePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserLeadTypePermission: {
        payload: Prisma.$UserLeadTypePermissionPayload<ExtArgs>
        fields: Prisma.UserLeadTypePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLeadTypePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLeadTypePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>
          }
          findFirst: {
            args: Prisma.UserLeadTypePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLeadTypePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>
          }
          findMany: {
            args: Prisma.UserLeadTypePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>[]
          }
          create: {
            args: Prisma.UserLeadTypePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>
          }
          createMany: {
            args: Prisma.UserLeadTypePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLeadTypePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>[]
          }
          delete: {
            args: Prisma.UserLeadTypePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>
          }
          update: {
            args: Prisma.UserLeadTypePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserLeadTypePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLeadTypePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserLeadTypePermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>[]
          }
          upsert: {
            args: Prisma.UserLeadTypePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLeadTypePermissionPayload>
          }
          aggregate: {
            args: Prisma.UserLeadTypePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLeadTypePermission>
          }
          groupBy: {
            args: Prisma.UserLeadTypePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLeadTypePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLeadTypePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserLeadTypePermissionCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FAQCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FAQUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      About: {
        payload: Prisma.$AboutPayload<ExtArgs>
        fields: Prisma.AboutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AboutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AboutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          findFirst: {
            args: Prisma.AboutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AboutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          findMany: {
            args: Prisma.AboutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>[]
          }
          create: {
            args: Prisma.AboutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          createMany: {
            args: Prisma.AboutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AboutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>[]
          }
          delete: {
            args: Prisma.AboutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          update: {
            args: Prisma.AboutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          deleteMany: {
            args: Prisma.AboutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AboutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AboutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>[]
          }
          upsert: {
            args: Prisma.AboutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          aggregate: {
            args: Prisma.AboutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAbout>
          }
          groupBy: {
            args: Prisma.AboutGroupByArgs<ExtArgs>
            result: $Utils.Optional<AboutGroupByOutputType>[]
          }
          count: {
            args: Prisma.AboutCountArgs<ExtArgs>
            result: $Utils.Optional<AboutCountAggregateOutputType> | number
          }
        }
      }
      DesignSettings: {
        payload: Prisma.$DesignSettingsPayload<ExtArgs>
        fields: Prisma.DesignSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DesignSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DesignSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>
          }
          findFirst: {
            args: Prisma.DesignSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DesignSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>
          }
          findMany: {
            args: Prisma.DesignSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>[]
          }
          create: {
            args: Prisma.DesignSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>
          }
          createMany: {
            args: Prisma.DesignSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DesignSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>[]
          }
          delete: {
            args: Prisma.DesignSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>
          }
          update: {
            args: Prisma.DesignSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>
          }
          deleteMany: {
            args: Prisma.DesignSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DesignSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DesignSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>[]
          }
          upsert: {
            args: Prisma.DesignSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DesignSettingsPayload>
          }
          aggregate: {
            args: Prisma.DesignSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDesignSettings>
          }
          groupBy: {
            args: Prisma.DesignSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DesignSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DesignSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<DesignSettingsCountAggregateOutputType> | number
          }
        }
      }
      EmailTemplate: {
        payload: Prisma.$EmailTemplatePayload<ExtArgs>
        fields: Prisma.EmailTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findFirst: {
            args: Prisma.EmailTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findMany: {
            args: Prisma.EmailTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          create: {
            args: Prisma.EmailTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          createMany: {
            args: Prisma.EmailTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          delete: {
            args: Prisma.EmailTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          update: {
            args: Prisma.EmailTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          deleteMany: {
            args: Prisma.EmailTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          upsert: {
            args: Prisma.EmailTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          aggregate: {
            args: Prisma.EmailTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailTemplate>
          }
          groupBy: {
            args: Prisma.EmailTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateCountAggregateOutputType> | number
          }
        }
      }
      SMSTemplate: {
        payload: Prisma.$SMSTemplatePayload<ExtArgs>
        fields: Prisma.SMSTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SMSTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SMSTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>
          }
          findFirst: {
            args: Prisma.SMSTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SMSTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>
          }
          findMany: {
            args: Prisma.SMSTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>[]
          }
          create: {
            args: Prisma.SMSTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>
          }
          createMany: {
            args: Prisma.SMSTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SMSTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>[]
          }
          delete: {
            args: Prisma.SMSTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>
          }
          update: {
            args: Prisma.SMSTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>
          }
          deleteMany: {
            args: Prisma.SMSTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SMSTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SMSTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>[]
          }
          upsert: {
            args: Prisma.SMSTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SMSTemplatePayload>
          }
          aggregate: {
            args: Prisma.SMSTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSMSTemplate>
          }
          groupBy: {
            args: Prisma.SMSTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<SMSTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.SMSTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<SMSTemplateCountAggregateOutputType> | number
          }
        }
      }
      ActivityLog: {
        payload: Prisma.$ActivityLogPayload<ExtArgs>
        fields: Prisma.ActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findFirst: {
            args: Prisma.ActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findMany: {
            args: Prisma.ActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          create: {
            args: Prisma.ActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          createMany: {
            args: Prisma.ActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          delete: {
            args: Prisma.ActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          update: {
            args: Prisma.ActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          upsert: {
            args: Prisma.ActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          aggregate: {
            args: Prisma.ActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLog>
          }
          groupBy: {
            args: Prisma.ActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      BalanceTransaction: {
        payload: Prisma.$BalanceTransactionPayload<ExtArgs>
        fields: Prisma.BalanceTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BalanceTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BalanceTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>
          }
          findFirst: {
            args: Prisma.BalanceTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BalanceTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>
          }
          findMany: {
            args: Prisma.BalanceTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>[]
          }
          create: {
            args: Prisma.BalanceTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>
          }
          createMany: {
            args: Prisma.BalanceTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BalanceTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>[]
          }
          delete: {
            args: Prisma.BalanceTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>
          }
          update: {
            args: Prisma.BalanceTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>
          }
          deleteMany: {
            args: Prisma.BalanceTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BalanceTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BalanceTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>[]
          }
          upsert: {
            args: Prisma.BalanceTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BalanceTransactionPayload>
          }
          aggregate: {
            args: Prisma.BalanceTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBalanceTransaction>
          }
          groupBy: {
            args: Prisma.BalanceTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<BalanceTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.BalanceTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<BalanceTransactionCountAggregateOutputType> | number
          }
        }
      }
      NotificationType: {
        payload: Prisma.$NotificationTypePayload<ExtArgs>
        fields: Prisma.NotificationTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          findFirst: {
            args: Prisma.NotificationTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          findMany: {
            args: Prisma.NotificationTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>[]
          }
          create: {
            args: Prisma.NotificationTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          createMany: {
            args: Prisma.NotificationTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>[]
          }
          delete: {
            args: Prisma.NotificationTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          update: {
            args: Prisma.NotificationTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          deleteMany: {
            args: Prisma.NotificationTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>[]
          }
          upsert: {
            args: Prisma.NotificationTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          aggregate: {
            args: Prisma.NotificationTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationType>
          }
          groupBy: {
            args: Prisma.NotificationTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationTypeCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationTypeCountAggregateOutputType> | number
          }
        }
      }
      NotificationPreference: {
        payload: Prisma.$NotificationPreferencePayload<ExtArgs>
        fields: Prisma.NotificationPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          findFirst: {
            args: Prisma.NotificationPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          findMany: {
            args: Prisma.NotificationPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>[]
          }
          create: {
            args: Prisma.NotificationPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          createMany: {
            args: Prisma.NotificationPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>[]
          }
          delete: {
            args: Prisma.NotificationPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          update: {
            args: Prisma.NotificationPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          deleteMany: {
            args: Prisma.NotificationPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>[]
          }
          upsert: {
            args: Prisma.NotificationPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPreferencePayload>
          }
          aggregate: {
            args: Prisma.NotificationPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationPreference>
          }
          groupBy: {
            args: Prisma.NotificationPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationPreferenceCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      NotificationRolePermission: {
        payload: Prisma.$NotificationRolePermissionPayload<ExtArgs>
        fields: Prisma.NotificationRolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationRolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationRolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>
          }
          findFirst: {
            args: Prisma.NotificationRolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationRolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>
          }
          findMany: {
            args: Prisma.NotificationRolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>[]
          }
          create: {
            args: Prisma.NotificationRolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>
          }
          createMany: {
            args: Prisma.NotificationRolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationRolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>[]
          }
          delete: {
            args: Prisma.NotificationRolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>
          }
          update: {
            args: Prisma.NotificationRolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.NotificationRolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationRolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationRolePermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>[]
          }
          upsert: {
            args: Prisma.NotificationRolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRolePermissionPayload>
          }
          aggregate: {
            args: Prisma.NotificationRolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationRolePermission>
          }
          groupBy: {
            args: Prisma.NotificationRolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationRolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationRolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationRolePermissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    lead?: LeadOmit
    bid?: BidOmit
    leadWatch?: LeadWatchOmit
    leadSale?: LeadSaleOmit
    settings?: SettingsOmit
    userType?: UserTypeOmit
    page?: PageOmit
    userTypePermission?: UserTypePermissionOmit
    leadTypePermission?: LeadTypePermissionOmit
    userLeadTypePermission?: UserLeadTypePermissionOmit
    fAQ?: FAQOmit
    about?: AboutOmit
    designSettings?: DesignSettingsOmit
    emailTemplate?: EmailTemplateOmit
    sMSTemplate?: SMSTemplateOmit
    activityLog?: ActivityLogOmit
    passwordResetToken?: PasswordResetTokenOmit
    balanceTransaction?: BalanceTransactionOmit
    notificationType?: NotificationTypeOmit
    notificationPreference?: NotificationPreferenceOmit
    notification?: NotificationOmit
    notificationRolePermission?: NotificationRolePermissionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bids: number
    leads: number
    purchasedLeads: number
    watching: number
    leadTypePermissions: number
    activityLogs: number
    passwordResetTokens: number
    balanceTransactions: number
    notifications: number
    notificationPreferences: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bids?: boolean | UserCountOutputTypeCountBidsArgs
    leads?: boolean | UserCountOutputTypeCountLeadsArgs
    purchasedLeads?: boolean | UserCountOutputTypeCountPurchasedLeadsArgs
    watching?: boolean | UserCountOutputTypeCountWatchingArgs
    leadTypePermissions?: boolean | UserCountOutputTypeCountLeadTypePermissionsArgs
    activityLogs?: boolean | UserCountOutputTypeCountActivityLogsArgs
    passwordResetTokens?: boolean | UserCountOutputTypeCountPasswordResetTokensArgs
    balanceTransactions?: boolean | UserCountOutputTypeCountBalanceTransactionsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    notificationPreferences?: boolean | UserCountOutputTypeCountNotificationPreferencesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BidWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPurchasedLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadSaleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeadTypePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeadTypePermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBalanceTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPreferenceWhereInput
  }


  /**
   * Count Type LeadCountOutputType
   */

  export type LeadCountOutputType = {
    bids: number
    watchers: number
  }

  export type LeadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bids?: boolean | LeadCountOutputTypeCountBidsArgs
    watchers?: boolean | LeadCountOutputTypeCountWatchersArgs
  }

  // Custom InputTypes
  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadCountOutputType
     */
    select?: LeadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountBidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BidWhereInput
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWatchWhereInput
  }


  /**
   * Count Type UserTypeCountOutputType
   */

  export type UserTypeCountOutputType = {
    leadTypePermissions: number
    users: number
    permissions: number
    notificationRolePermissions: number
  }

  export type UserTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadTypePermissions?: boolean | UserTypeCountOutputTypeCountLeadTypePermissionsArgs
    users?: boolean | UserTypeCountOutputTypeCountUsersArgs
    permissions?: boolean | UserTypeCountOutputTypeCountPermissionsArgs
    notificationRolePermissions?: boolean | UserTypeCountOutputTypeCountNotificationRolePermissionsArgs
  }

  // Custom InputTypes
  /**
   * UserTypeCountOutputType without action
   */
  export type UserTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypeCountOutputType
     */
    select?: UserTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserTypeCountOutputType without action
   */
  export type UserTypeCountOutputTypeCountLeadTypePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadTypePermissionWhereInput
  }

  /**
   * UserTypeCountOutputType without action
   */
  export type UserTypeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserTypeCountOutputType without action
   */
  export type UserTypeCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTypePermissionWhereInput
  }

  /**
   * UserTypeCountOutputType without action
   */
  export type UserTypeCountOutputTypeCountNotificationRolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationRolePermissionWhereInput
  }


  /**
   * Count Type PageCountOutputType
   */

  export type PageCountOutputType = {
    permissions: number
  }

  export type PageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | PageCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * PageCountOutputType without action
   */
  export type PageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageCountOutputType
     */
    select?: PageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PageCountOutputType without action
   */
  export type PageCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTypePermissionWhereInput
  }


  /**
   * Count Type NotificationTypeCountOutputType
   */

  export type NotificationTypeCountOutputType = {
    notifications: number
    userPreferences: number
    roleTypePermissions: number
  }

  export type NotificationTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | NotificationTypeCountOutputTypeCountNotificationsArgs
    userPreferences?: boolean | NotificationTypeCountOutputTypeCountUserPreferencesArgs
    roleTypePermissions?: boolean | NotificationTypeCountOutputTypeCountRoleTypePermissionsArgs
  }

  // Custom InputTypes
  /**
   * NotificationTypeCountOutputType without action
   */
  export type NotificationTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTypeCountOutputType
     */
    select?: NotificationTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationTypeCountOutputType without action
   */
  export type NotificationTypeCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * NotificationTypeCountOutputType without action
   */
  export type NotificationTypeCountOutputTypeCountUserPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPreferenceWhereInput
  }

  /**
   * NotificationTypeCountOutputType without action
   */
  export type NotificationTypeCountOutputTypeCountRoleTypePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationRolePermissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: number | null
  }

  export type UserSumAggregateOutputType = {
    balance: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    userTypeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    username: string | null
    profileImage: string | null
    lastActivity: Date | null
    lastIP: string | null
    lastUserAgent: string | null
    twoFactorEnabled: boolean | null
    twoFactorSecret: string | null
    isActive: boolean | null
    balance: number | null
    balanceEnabled: boolean | null
    paymentMethod: string | null
    ibanAccountHolder: string | null
    ibanNumber: string | null
    ibanBic: string | null
    ibanAddress: string | null
    ibanPostalCode: string | null
    ibanCity: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    userTypeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    username: string | null
    profileImage: string | null
    lastActivity: Date | null
    lastIP: string | null
    lastUserAgent: string | null
    twoFactorEnabled: boolean | null
    twoFactorSecret: string | null
    isActive: boolean | null
    balance: number | null
    balanceEnabled: boolean | null
    paymentMethod: string | null
    ibanAccountHolder: string | null
    ibanNumber: string | null
    ibanBic: string | null
    ibanAddress: string | null
    ibanPostalCode: string | null
    ibanCity: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    userTypeId: number
    createdAt: number
    updatedAt: number
    firstName: number
    lastName: number
    username: number
    profileImage: number
    lastActivity: number
    lastIP: number
    lastUserAgent: number
    twoFactorEnabled: number
    twoFactorSecret: number
    isActive: number
    balance: number
    balanceEnabled: number
    paymentMethod: number
    ibanAccountHolder: number
    ibanNumber: number
    ibanBic: number
    ibanAddress: number
    ibanPostalCode: number
    ibanCity: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    userTypeId?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    username?: true
    profileImage?: true
    lastActivity?: true
    lastIP?: true
    lastUserAgent?: true
    twoFactorEnabled?: true
    twoFactorSecret?: true
    isActive?: true
    balance?: true
    balanceEnabled?: true
    paymentMethod?: true
    ibanAccountHolder?: true
    ibanNumber?: true
    ibanBic?: true
    ibanAddress?: true
    ibanPostalCode?: true
    ibanCity?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    userTypeId?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    username?: true
    profileImage?: true
    lastActivity?: true
    lastIP?: true
    lastUserAgent?: true
    twoFactorEnabled?: true
    twoFactorSecret?: true
    isActive?: true
    balance?: true
    balanceEnabled?: true
    paymentMethod?: true
    ibanAccountHolder?: true
    ibanNumber?: true
    ibanBic?: true
    ibanAddress?: true
    ibanPostalCode?: true
    ibanCity?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    userTypeId?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    username?: true
    profileImage?: true
    lastActivity?: true
    lastIP?: true
    lastUserAgent?: true
    twoFactorEnabled?: true
    twoFactorSecret?: true
    isActive?: true
    balance?: true
    balanceEnabled?: true
    paymentMethod?: true
    ibanAccountHolder?: true
    ibanNumber?: true
    ibanBic?: true
    ibanAddress?: true
    ibanPostalCode?: true
    ibanCity?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt: Date
    updatedAt: Date
    firstName: string | null
    lastName: string | null
    username: string | null
    profileImage: string | null
    lastActivity: Date | null
    lastIP: string | null
    lastUserAgent: string | null
    twoFactorEnabled: boolean
    twoFactorSecret: string | null
    isActive: boolean
    balance: number
    balanceEnabled: boolean
    paymentMethod: string
    ibanAccountHolder: string | null
    ibanNumber: string | null
    ibanBic: string | null
    ibanAddress: string | null
    ibanPostalCode: string | null
    ibanCity: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    userTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    profileImage?: boolean
    lastActivity?: boolean
    lastIP?: boolean
    lastUserAgent?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    isActive?: boolean
    balance?: boolean
    balanceEnabled?: boolean
    paymentMethod?: boolean
    ibanAccountHolder?: boolean
    ibanNumber?: boolean
    ibanBic?: boolean
    ibanAddress?: boolean
    ibanPostalCode?: boolean
    ibanCity?: boolean
    bids?: boolean | User$bidsArgs<ExtArgs>
    leads?: boolean | User$leadsArgs<ExtArgs>
    purchasedLeads?: boolean | User$purchasedLeadsArgs<ExtArgs>
    watching?: boolean | User$watchingArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    leadTypePermissions?: boolean | User$leadTypePermissionsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    passwordResetTokens?: boolean | User$passwordResetTokensArgs<ExtArgs>
    balanceTransactions?: boolean | User$balanceTransactionsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationPreferences?: boolean | User$notificationPreferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    userTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    profileImage?: boolean
    lastActivity?: boolean
    lastIP?: boolean
    lastUserAgent?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    isActive?: boolean
    balance?: boolean
    balanceEnabled?: boolean
    paymentMethod?: boolean
    ibanAccountHolder?: boolean
    ibanNumber?: boolean
    ibanBic?: boolean
    ibanAddress?: boolean
    ibanPostalCode?: boolean
    ibanCity?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    userTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    profileImage?: boolean
    lastActivity?: boolean
    lastIP?: boolean
    lastUserAgent?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    isActive?: boolean
    balance?: boolean
    balanceEnabled?: boolean
    paymentMethod?: boolean
    ibanAccountHolder?: boolean
    ibanNumber?: boolean
    ibanBic?: boolean
    ibanAddress?: boolean
    ibanPostalCode?: boolean
    ibanCity?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    userTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    profileImage?: boolean
    lastActivity?: boolean
    lastIP?: boolean
    lastUserAgent?: boolean
    twoFactorEnabled?: boolean
    twoFactorSecret?: boolean
    isActive?: boolean
    balance?: boolean
    balanceEnabled?: boolean
    paymentMethod?: boolean
    ibanAccountHolder?: boolean
    ibanNumber?: boolean
    ibanBic?: boolean
    ibanAddress?: boolean
    ibanPostalCode?: boolean
    ibanCity?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "passwordHash" | "userTypeId" | "createdAt" | "updatedAt" | "firstName" | "lastName" | "username" | "profileImage" | "lastActivity" | "lastIP" | "lastUserAgent" | "twoFactorEnabled" | "twoFactorSecret" | "isActive" | "balance" | "balanceEnabled" | "paymentMethod" | "ibanAccountHolder" | "ibanNumber" | "ibanBic" | "ibanAddress" | "ibanPostalCode" | "ibanCity", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bids?: boolean | User$bidsArgs<ExtArgs>
    leads?: boolean | User$leadsArgs<ExtArgs>
    purchasedLeads?: boolean | User$purchasedLeadsArgs<ExtArgs>
    watching?: boolean | User$watchingArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    leadTypePermissions?: boolean | User$leadTypePermissionsArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    passwordResetTokens?: boolean | User$passwordResetTokensArgs<ExtArgs>
    balanceTransactions?: boolean | User$balanceTransactionsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationPreferences?: boolean | User$notificationPreferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      bids: Prisma.$BidPayload<ExtArgs>[]
      leads: Prisma.$LeadPayload<ExtArgs>[]
      purchasedLeads: Prisma.$LeadSalePayload<ExtArgs>[]
      watching: Prisma.$LeadWatchPayload<ExtArgs>[]
      userType: Prisma.$UserTypePayload<ExtArgs>
      leadTypePermissions: Prisma.$UserLeadTypePermissionPayload<ExtArgs>[]
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      passwordResetTokens: Prisma.$PasswordResetTokenPayload<ExtArgs>[]
      balanceTransactions: Prisma.$BalanceTransactionPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      notificationPreferences: Prisma.$NotificationPreferencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      userTypeId: string
      createdAt: Date
      updatedAt: Date
      firstName: string | null
      lastName: string | null
      username: string | null
      profileImage: string | null
      lastActivity: Date | null
      lastIP: string | null
      lastUserAgent: string | null
      twoFactorEnabled: boolean
      twoFactorSecret: string | null
      isActive: boolean
      balance: number
      balanceEnabled: boolean
      paymentMethod: string
      ibanAccountHolder: string | null
      ibanNumber: string | null
      ibanBic: string | null
      ibanAddress: string | null
      ibanPostalCode: string | null
      ibanCity: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bids<T extends User$bidsArgs<ExtArgs> = {}>(args?: Subset<T, User$bidsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leads<T extends User$leadsArgs<ExtArgs> = {}>(args?: Subset<T, User$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    purchasedLeads<T extends User$purchasedLeadsArgs<ExtArgs> = {}>(args?: Subset<T, User$purchasedLeadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watching<T extends User$watchingArgs<ExtArgs> = {}>(args?: Subset<T, User$watchingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userType<T extends UserTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserTypeDefaultArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    leadTypePermissions<T extends User$leadTypePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$leadTypePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityLogs<T extends User$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    passwordResetTokens<T extends User$passwordResetTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordResetTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    balanceTransactions<T extends User$balanceTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$balanceTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationPreferences<T extends User$notificationPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly userTypeId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly lastActivity: FieldRef<"User", 'DateTime'>
    readonly lastIP: FieldRef<"User", 'String'>
    readonly lastUserAgent: FieldRef<"User", 'String'>
    readonly twoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly twoFactorSecret: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly balance: FieldRef<"User", 'Float'>
    readonly balanceEnabled: FieldRef<"User", 'Boolean'>
    readonly paymentMethod: FieldRef<"User", 'String'>
    readonly ibanAccountHolder: FieldRef<"User", 'String'>
    readonly ibanNumber: FieldRef<"User", 'String'>
    readonly ibanBic: FieldRef<"User", 'String'>
    readonly ibanAddress: FieldRef<"User", 'String'>
    readonly ibanPostalCode: FieldRef<"User", 'String'>
    readonly ibanCity: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.bids
   */
  export type User$bidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    where?: BidWhereInput
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    cursor?: BidWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * User.leads
   */
  export type User$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    cursor?: LeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * User.purchasedLeads
   */
  export type User$purchasedLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    where?: LeadSaleWhereInput
    orderBy?: LeadSaleOrderByWithRelationInput | LeadSaleOrderByWithRelationInput[]
    cursor?: LeadSaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadSaleScalarFieldEnum | LeadSaleScalarFieldEnum[]
  }

  /**
   * User.watching
   */
  export type User$watchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    where?: LeadWatchWhereInput
    orderBy?: LeadWatchOrderByWithRelationInput | LeadWatchOrderByWithRelationInput[]
    cursor?: LeadWatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadWatchScalarFieldEnum | LeadWatchScalarFieldEnum[]
  }

  /**
   * User.leadTypePermissions
   */
  export type User$leadTypePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    where?: UserLeadTypePermissionWhereInput
    orderBy?: UserLeadTypePermissionOrderByWithRelationInput | UserLeadTypePermissionOrderByWithRelationInput[]
    cursor?: UserLeadTypePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLeadTypePermissionScalarFieldEnum | UserLeadTypePermissionScalarFieldEnum[]
  }

  /**
   * User.activityLogs
   */
  export type User$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * User.passwordResetTokens
   */
  export type User$passwordResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    cursor?: PasswordResetTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * User.balanceTransactions
   */
  export type User$balanceTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    where?: BalanceTransactionWhereInput
    orderBy?: BalanceTransactionOrderByWithRelationInput | BalanceTransactionOrderByWithRelationInput[]
    cursor?: BalanceTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BalanceTransactionScalarFieldEnum | BalanceTransactionScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.notificationPreferences
   */
  export type User$notificationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    where?: NotificationPreferenceWhereInput
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    cursor?: NotificationPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Lead
   */

  export type AggregateLead = {
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  export type LeadAvgAggregateOutputType = {
    startPrice: number | null
    minIncrement: number | null
    instantBuyPrice: number | null
    reservePrice: number | null
    antiSnipeSeconds: number | null
  }

  export type LeadSumAggregateOutputType = {
    startPrice: number | null
    minIncrement: number | null
    instantBuyPrice: number | null
    reservePrice: number | null
    antiSnipeSeconds: number | null
  }

  export type LeadMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    privateDetails: string | null
    postalCode: string | null
    startPrice: number | null
    minIncrement: number | null
    instantBuyPrice: number | null
    reservePrice: number | null
    antiSnipeSeconds: number | null
    insuranceType: string | null
    isActive: boolean | null
    isShowcase: boolean | null
    isSold: boolean | null
    featured: boolean | null
    startsAt: Date | null
    endsAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type LeadMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    privateDetails: string | null
    postalCode: string | null
    startPrice: number | null
    minIncrement: number | null
    instantBuyPrice: number | null
    reservePrice: number | null
    antiSnipeSeconds: number | null
    insuranceType: string | null
    isActive: boolean | null
    isShowcase: boolean | null
    isSold: boolean | null
    featured: boolean | null
    startsAt: Date | null
    endsAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type LeadCountAggregateOutputType = {
    id: number
    title: number
    description: number
    privateDetails: number
    postalCode: number
    startPrice: number
    minIncrement: number
    instantBuyPrice: number
    reservePrice: number
    antiSnipeSeconds: number
    insuranceType: number
    isActive: number
    isShowcase: number
    isSold: number
    featured: number
    startsAt: number
    endsAt: number
    createdAt: number
    updatedAt: number
    ownerId: number
    _all: number
  }


  export type LeadAvgAggregateInputType = {
    startPrice?: true
    minIncrement?: true
    instantBuyPrice?: true
    reservePrice?: true
    antiSnipeSeconds?: true
  }

  export type LeadSumAggregateInputType = {
    startPrice?: true
    minIncrement?: true
    instantBuyPrice?: true
    reservePrice?: true
    antiSnipeSeconds?: true
  }

  export type LeadMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    privateDetails?: true
    postalCode?: true
    startPrice?: true
    minIncrement?: true
    instantBuyPrice?: true
    reservePrice?: true
    antiSnipeSeconds?: true
    insuranceType?: true
    isActive?: true
    isShowcase?: true
    isSold?: true
    featured?: true
    startsAt?: true
    endsAt?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type LeadMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    privateDetails?: true
    postalCode?: true
    startPrice?: true
    minIncrement?: true
    instantBuyPrice?: true
    reservePrice?: true
    antiSnipeSeconds?: true
    insuranceType?: true
    isActive?: true
    isShowcase?: true
    isSold?: true
    featured?: true
    startsAt?: true
    endsAt?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type LeadCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    privateDetails?: true
    postalCode?: true
    startPrice?: true
    minIncrement?: true
    instantBuyPrice?: true
    reservePrice?: true
    antiSnipeSeconds?: true
    insuranceType?: true
    isActive?: true
    isShowcase?: true
    isSold?: true
    featured?: true
    startsAt?: true
    endsAt?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    _all?: true
  }

  export type LeadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lead to aggregate.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leads
    **/
    _count?: true | LeadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadMaxAggregateInputType
  }

  export type GetLeadAggregateType<T extends LeadAggregateArgs> = {
        [P in keyof T & keyof AggregateLead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLead[P]>
      : GetScalarType<T[P], AggregateLead[P]>
  }




  export type LeadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithAggregationInput | LeadOrderByWithAggregationInput[]
    by: LeadScalarFieldEnum[] | LeadScalarFieldEnum
    having?: LeadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadCountAggregateInputType | true
    _avg?: LeadAvgAggregateInputType
    _sum?: LeadSumAggregateInputType
    _min?: LeadMinAggregateInputType
    _max?: LeadMaxAggregateInputType
  }

  export type LeadGroupByOutputType = {
    id: string
    title: string
    description: string
    privateDetails: string | null
    postalCode: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice: number | null
    reservePrice: number | null
    antiSnipeSeconds: number
    insuranceType: string | null
    isActive: boolean
    isShowcase: boolean
    isSold: boolean
    featured: boolean
    startsAt: Date | null
    endsAt: Date
    createdAt: Date
    updatedAt: Date
    ownerId: string
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  type GetLeadGroupByPayload<T extends LeadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadGroupByOutputType[P]>
            : GetScalarType<T[P], LeadGroupByOutputType[P]>
        }
      >
    >


  export type LeadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    privateDetails?: boolean
    postalCode?: boolean
    startPrice?: boolean
    minIncrement?: boolean
    instantBuyPrice?: boolean
    reservePrice?: boolean
    antiSnipeSeconds?: boolean
    insuranceType?: boolean
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    bids?: boolean | Lead$bidsArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | Lead$saleArgs<ExtArgs>
    watchers?: boolean | Lead$watchersArgs<ExtArgs>
    _count?: boolean | LeadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    privateDetails?: boolean
    postalCode?: boolean
    startPrice?: boolean
    minIncrement?: boolean
    instantBuyPrice?: boolean
    reservePrice?: boolean
    antiSnipeSeconds?: boolean
    insuranceType?: boolean
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    privateDetails?: boolean
    postalCode?: boolean
    startPrice?: boolean
    minIncrement?: boolean
    instantBuyPrice?: boolean
    reservePrice?: boolean
    antiSnipeSeconds?: boolean
    insuranceType?: boolean
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    privateDetails?: boolean
    postalCode?: boolean
    startPrice?: boolean
    minIncrement?: boolean
    instantBuyPrice?: boolean
    reservePrice?: boolean
    antiSnipeSeconds?: boolean
    insuranceType?: boolean
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: boolean
    endsAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
  }

  export type LeadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "privateDetails" | "postalCode" | "startPrice" | "minIncrement" | "instantBuyPrice" | "reservePrice" | "antiSnipeSeconds" | "insuranceType" | "isActive" | "isShowcase" | "isSold" | "featured" | "startsAt" | "endsAt" | "createdAt" | "updatedAt" | "ownerId", ExtArgs["result"]["lead"]>
  export type LeadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bids?: boolean | Lead$bidsArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    sale?: boolean | Lead$saleArgs<ExtArgs>
    watchers?: boolean | Lead$watchersArgs<ExtArgs>
    _count?: boolean | LeadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LeadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LeadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lead"
    objects: {
      bids: Prisma.$BidPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
      sale: Prisma.$LeadSalePayload<ExtArgs> | null
      watchers: Prisma.$LeadWatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      privateDetails: string | null
      postalCode: string | null
      startPrice: number
      minIncrement: number
      instantBuyPrice: number | null
      reservePrice: number | null
      antiSnipeSeconds: number
      insuranceType: string | null
      isActive: boolean
      isShowcase: boolean
      isSold: boolean
      featured: boolean
      startsAt: Date | null
      endsAt: Date
      createdAt: Date
      updatedAt: Date
      ownerId: string
    }, ExtArgs["result"]["lead"]>
    composites: {}
  }

  type LeadGetPayload<S extends boolean | null | undefined | LeadDefaultArgs> = $Result.GetResult<Prisma.$LeadPayload, S>

  type LeadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadCountAggregateInputType | true
    }

  export interface LeadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lead'], meta: { name: 'Lead' } }
    /**
     * Find zero or one Lead that matches the filter.
     * @param {LeadFindUniqueArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadFindUniqueArgs>(args: SelectSubset<T, LeadFindUniqueArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lead that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadFindUniqueOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadFindFirstArgs>(args?: SelectSubset<T, LeadFindFirstArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.lead.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.lead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadWithIdOnly = await prisma.lead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadFindManyArgs>(args?: SelectSubset<T, LeadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lead.
     * @param {LeadCreateArgs} args - Arguments to create a Lead.
     * @example
     * // Create one Lead
     * const Lead = await prisma.lead.create({
     *   data: {
     *     // ... data to create a Lead
     *   }
     * })
     * 
     */
    create<T extends LeadCreateArgs>(args: SelectSubset<T, LeadCreateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leads.
     * @param {LeadCreateManyArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadCreateManyArgs>(args?: SelectSubset<T, LeadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leads and returns the data saved in the database.
     * @param {LeadCreateManyAndReturnArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leads and only return the `id`
     * const leadWithIdOnly = await prisma.lead.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lead.
     * @param {LeadDeleteArgs} args - Arguments to delete one Lead.
     * @example
     * // Delete one Lead
     * const Lead = await prisma.lead.delete({
     *   where: {
     *     // ... filter to delete one Lead
     *   }
     * })
     * 
     */
    delete<T extends LeadDeleteArgs>(args: SelectSubset<T, LeadDeleteArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lead.
     * @param {LeadUpdateArgs} args - Arguments to update one Lead.
     * @example
     * // Update one Lead
     * const lead = await prisma.lead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadUpdateArgs>(args: SelectSubset<T, LeadUpdateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leads.
     * @param {LeadDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.lead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadDeleteManyArgs>(args?: SelectSubset<T, LeadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const lead = await prisma.lead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadUpdateManyArgs>(args: SelectSubset<T, LeadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads and returns the data updated in the database.
     * @param {LeadUpdateManyAndReturnArgs} args - Arguments to update many Leads.
     * @example
     * // Update many Leads
     * const lead = await prisma.lead.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Leads and only return the `id`
     * const leadWithIdOnly = await prisma.lead.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lead.
     * @param {LeadUpsertArgs} args - Arguments to update or create a Lead.
     * @example
     * // Update or create a Lead
     * const lead = await prisma.lead.upsert({
     *   create: {
     *     // ... data to create a Lead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lead we want to update
     *   }
     * })
     */
    upsert<T extends LeadUpsertArgs>(args: SelectSubset<T, LeadUpsertArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadCountArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.lead.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count<T extends LeadCountArgs>(
      args?: Subset<T, LeadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadAggregateArgs>(args: Subset<T, LeadAggregateArgs>): Prisma.PrismaPromise<GetLeadAggregateType<T>>

    /**
     * Group by Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadGroupByArgs['orderBy'] }
        : { orderBy?: LeadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lead model
   */
  readonly fields: LeadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bids<T extends Lead$bidsArgs<ExtArgs> = {}>(args?: Subset<T, Lead$bidsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sale<T extends Lead$saleArgs<ExtArgs> = {}>(args?: Subset<T, Lead$saleArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    watchers<T extends Lead$watchersArgs<ExtArgs> = {}>(args?: Subset<T, Lead$watchersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lead model
   */
  interface LeadFieldRefs {
    readonly id: FieldRef<"Lead", 'String'>
    readonly title: FieldRef<"Lead", 'String'>
    readonly description: FieldRef<"Lead", 'String'>
    readonly privateDetails: FieldRef<"Lead", 'String'>
    readonly postalCode: FieldRef<"Lead", 'String'>
    readonly startPrice: FieldRef<"Lead", 'Int'>
    readonly minIncrement: FieldRef<"Lead", 'Int'>
    readonly instantBuyPrice: FieldRef<"Lead", 'Int'>
    readonly reservePrice: FieldRef<"Lead", 'Int'>
    readonly antiSnipeSeconds: FieldRef<"Lead", 'Int'>
    readonly insuranceType: FieldRef<"Lead", 'String'>
    readonly isActive: FieldRef<"Lead", 'Boolean'>
    readonly isShowcase: FieldRef<"Lead", 'Boolean'>
    readonly isSold: FieldRef<"Lead", 'Boolean'>
    readonly featured: FieldRef<"Lead", 'Boolean'>
    readonly startsAt: FieldRef<"Lead", 'DateTime'>
    readonly endsAt: FieldRef<"Lead", 'DateTime'>
    readonly createdAt: FieldRef<"Lead", 'DateTime'>
    readonly updatedAt: FieldRef<"Lead", 'DateTime'>
    readonly ownerId: FieldRef<"Lead", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lead findUnique
   */
  export type LeadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findUniqueOrThrow
   */
  export type LeadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findFirst
   */
  export type LeadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findFirstOrThrow
   */
  export type LeadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findMany
   */
  export type LeadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead create
   */
  export type LeadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The data needed to create a Lead.
     */
    data: XOR<LeadCreateInput, LeadUncheckedCreateInput>
  }

  /**
   * Lead createMany
   */
  export type LeadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lead createManyAndReturn
   */
  export type LeadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lead update
   */
  export type LeadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The data needed to update a Lead.
     */
    data: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
    /**
     * Choose, which Lead to update.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead updateMany
   */
  export type LeadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadWhereInput
    /**
     * Limit how many Leads to update.
     */
    limit?: number
  }

  /**
   * Lead updateManyAndReturn
   */
  export type LeadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadWhereInput
    /**
     * Limit how many Leads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lead upsert
   */
  export type LeadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The filter to search for the Lead to update in case it exists.
     */
    where: LeadWhereUniqueInput
    /**
     * In case the Lead found by the `where` argument doesn't exist, create a new Lead with this data.
     */
    create: XOR<LeadCreateInput, LeadUncheckedCreateInput>
    /**
     * In case the Lead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
  }

  /**
   * Lead delete
   */
  export type LeadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter which Lead to delete.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead deleteMany
   */
  export type LeadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leads to delete
     */
    where?: LeadWhereInput
    /**
     * Limit how many Leads to delete.
     */
    limit?: number
  }

  /**
   * Lead.bids
   */
  export type Lead$bidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    where?: BidWhereInput
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    cursor?: BidWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Lead.sale
   */
  export type Lead$saleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    where?: LeadSaleWhereInput
  }

  /**
   * Lead.watchers
   */
  export type Lead$watchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    where?: LeadWatchWhereInput
    orderBy?: LeadWatchOrderByWithRelationInput | LeadWatchOrderByWithRelationInput[]
    cursor?: LeadWatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadWatchScalarFieldEnum | LeadWatchScalarFieldEnum[]
  }

  /**
   * Lead without action
   */
  export type LeadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lead
     */
    omit?: LeadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
  }


  /**
   * Model Bid
   */

  export type AggregateBid = {
    _count: BidCountAggregateOutputType | null
    _avg: BidAvgAggregateOutputType | null
    _sum: BidSumAggregateOutputType | null
    _min: BidMinAggregateOutputType | null
    _max: BidMaxAggregateOutputType | null
  }

  export type BidAvgAggregateOutputType = {
    amount: number | null
    maxBid: number | null
  }

  export type BidSumAggregateOutputType = {
    amount: number | null
    maxBid: number | null
  }

  export type BidMinAggregateOutputType = {
    id: string | null
    amount: number | null
    maxBid: number | null
    isAutoBid: boolean | null
    createdAt: Date | null
    leadId: string | null
    userId: string | null
  }

  export type BidMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    maxBid: number | null
    isAutoBid: boolean | null
    createdAt: Date | null
    leadId: string | null
    userId: string | null
  }

  export type BidCountAggregateOutputType = {
    id: number
    amount: number
    maxBid: number
    isAutoBid: number
    createdAt: number
    leadId: number
    userId: number
    _all: number
  }


  export type BidAvgAggregateInputType = {
    amount?: true
    maxBid?: true
  }

  export type BidSumAggregateInputType = {
    amount?: true
    maxBid?: true
  }

  export type BidMinAggregateInputType = {
    id?: true
    amount?: true
    maxBid?: true
    isAutoBid?: true
    createdAt?: true
    leadId?: true
    userId?: true
  }

  export type BidMaxAggregateInputType = {
    id?: true
    amount?: true
    maxBid?: true
    isAutoBid?: true
    createdAt?: true
    leadId?: true
    userId?: true
  }

  export type BidCountAggregateInputType = {
    id?: true
    amount?: true
    maxBid?: true
    isAutoBid?: true
    createdAt?: true
    leadId?: true
    userId?: true
    _all?: true
  }

  export type BidAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bid to aggregate.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bids
    **/
    _count?: true | BidCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BidAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BidSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BidMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BidMaxAggregateInputType
  }

  export type GetBidAggregateType<T extends BidAggregateArgs> = {
        [P in keyof T & keyof AggregateBid]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBid[P]>
      : GetScalarType<T[P], AggregateBid[P]>
  }




  export type BidGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BidWhereInput
    orderBy?: BidOrderByWithAggregationInput | BidOrderByWithAggregationInput[]
    by: BidScalarFieldEnum[] | BidScalarFieldEnum
    having?: BidScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BidCountAggregateInputType | true
    _avg?: BidAvgAggregateInputType
    _sum?: BidSumAggregateInputType
    _min?: BidMinAggregateInputType
    _max?: BidMaxAggregateInputType
  }

  export type BidGroupByOutputType = {
    id: string
    amount: number
    maxBid: number
    isAutoBid: boolean
    createdAt: Date
    leadId: string
    userId: string
    _count: BidCountAggregateOutputType | null
    _avg: BidAvgAggregateOutputType | null
    _sum: BidSumAggregateOutputType | null
    _min: BidMinAggregateOutputType | null
    _max: BidMaxAggregateOutputType | null
  }

  type GetBidGroupByPayload<T extends BidGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BidGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BidGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BidGroupByOutputType[P]>
            : GetScalarType<T[P], BidGroupByOutputType[P]>
        }
      >
    >


  export type BidSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    maxBid?: boolean
    isAutoBid?: boolean
    createdAt?: boolean
    leadId?: boolean
    userId?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bid"]>

  export type BidSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    maxBid?: boolean
    isAutoBid?: boolean
    createdAt?: boolean
    leadId?: boolean
    userId?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bid"]>

  export type BidSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    maxBid?: boolean
    isAutoBid?: boolean
    createdAt?: boolean
    leadId?: boolean
    userId?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bid"]>

  export type BidSelectScalar = {
    id?: boolean
    amount?: boolean
    maxBid?: boolean
    isAutoBid?: boolean
    createdAt?: boolean
    leadId?: boolean
    userId?: boolean
  }

  export type BidOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "maxBid" | "isAutoBid" | "createdAt" | "leadId" | "userId", ExtArgs["result"]["bid"]>
  export type BidInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BidIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BidIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BidPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bid"
    objects: {
      lead: Prisma.$LeadPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      maxBid: number
      isAutoBid: boolean
      createdAt: Date
      leadId: string
      userId: string
    }, ExtArgs["result"]["bid"]>
    composites: {}
  }

  type BidGetPayload<S extends boolean | null | undefined | BidDefaultArgs> = $Result.GetResult<Prisma.$BidPayload, S>

  type BidCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BidFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BidCountAggregateInputType | true
    }

  export interface BidDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bid'], meta: { name: 'Bid' } }
    /**
     * Find zero or one Bid that matches the filter.
     * @param {BidFindUniqueArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BidFindUniqueArgs>(args: SelectSubset<T, BidFindUniqueArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bid that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BidFindUniqueOrThrowArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BidFindUniqueOrThrowArgs>(args: SelectSubset<T, BidFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bid that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidFindFirstArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BidFindFirstArgs>(args?: SelectSubset<T, BidFindFirstArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bid that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidFindFirstOrThrowArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BidFindFirstOrThrowArgs>(args?: SelectSubset<T, BidFindFirstOrThrowArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bids that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bids
     * const bids = await prisma.bid.findMany()
     * 
     * // Get first 10 Bids
     * const bids = await prisma.bid.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bidWithIdOnly = await prisma.bid.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BidFindManyArgs>(args?: SelectSubset<T, BidFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bid.
     * @param {BidCreateArgs} args - Arguments to create a Bid.
     * @example
     * // Create one Bid
     * const Bid = await prisma.bid.create({
     *   data: {
     *     // ... data to create a Bid
     *   }
     * })
     * 
     */
    create<T extends BidCreateArgs>(args: SelectSubset<T, BidCreateArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bids.
     * @param {BidCreateManyArgs} args - Arguments to create many Bids.
     * @example
     * // Create many Bids
     * const bid = await prisma.bid.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BidCreateManyArgs>(args?: SelectSubset<T, BidCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bids and returns the data saved in the database.
     * @param {BidCreateManyAndReturnArgs} args - Arguments to create many Bids.
     * @example
     * // Create many Bids
     * const bid = await prisma.bid.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bids and only return the `id`
     * const bidWithIdOnly = await prisma.bid.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BidCreateManyAndReturnArgs>(args?: SelectSubset<T, BidCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bid.
     * @param {BidDeleteArgs} args - Arguments to delete one Bid.
     * @example
     * // Delete one Bid
     * const Bid = await prisma.bid.delete({
     *   where: {
     *     // ... filter to delete one Bid
     *   }
     * })
     * 
     */
    delete<T extends BidDeleteArgs>(args: SelectSubset<T, BidDeleteArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bid.
     * @param {BidUpdateArgs} args - Arguments to update one Bid.
     * @example
     * // Update one Bid
     * const bid = await prisma.bid.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BidUpdateArgs>(args: SelectSubset<T, BidUpdateArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bids.
     * @param {BidDeleteManyArgs} args - Arguments to filter Bids to delete.
     * @example
     * // Delete a few Bids
     * const { count } = await prisma.bid.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BidDeleteManyArgs>(args?: SelectSubset<T, BidDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bids
     * const bid = await prisma.bid.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BidUpdateManyArgs>(args: SelectSubset<T, BidUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bids and returns the data updated in the database.
     * @param {BidUpdateManyAndReturnArgs} args - Arguments to update many Bids.
     * @example
     * // Update many Bids
     * const bid = await prisma.bid.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bids and only return the `id`
     * const bidWithIdOnly = await prisma.bid.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BidUpdateManyAndReturnArgs>(args: SelectSubset<T, BidUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bid.
     * @param {BidUpsertArgs} args - Arguments to update or create a Bid.
     * @example
     * // Update or create a Bid
     * const bid = await prisma.bid.upsert({
     *   create: {
     *     // ... data to create a Bid
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bid we want to update
     *   }
     * })
     */
    upsert<T extends BidUpsertArgs>(args: SelectSubset<T, BidUpsertArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidCountArgs} args - Arguments to filter Bids to count.
     * @example
     * // Count the number of Bids
     * const count = await prisma.bid.count({
     *   where: {
     *     // ... the filter for the Bids we want to count
     *   }
     * })
    **/
    count<T extends BidCountArgs>(
      args?: Subset<T, BidCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BidCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bid.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BidAggregateArgs>(args: Subset<T, BidAggregateArgs>): Prisma.PrismaPromise<GetBidAggregateType<T>>

    /**
     * Group by Bid.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BidGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BidGroupByArgs['orderBy'] }
        : { orderBy?: BidGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BidGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBidGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bid model
   */
  readonly fields: BidFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bid.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BidClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bid model
   */
  interface BidFieldRefs {
    readonly id: FieldRef<"Bid", 'String'>
    readonly amount: FieldRef<"Bid", 'Int'>
    readonly maxBid: FieldRef<"Bid", 'Int'>
    readonly isAutoBid: FieldRef<"Bid", 'Boolean'>
    readonly createdAt: FieldRef<"Bid", 'DateTime'>
    readonly leadId: FieldRef<"Bid", 'String'>
    readonly userId: FieldRef<"Bid", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bid findUnique
   */
  export type BidFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid findUniqueOrThrow
   */
  export type BidFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid findFirst
   */
  export type BidFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bids.
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bids.
     */
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bid findFirstOrThrow
   */
  export type BidFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bids.
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bids.
     */
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bid findMany
   */
  export type BidFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bids to fetch.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bids.
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bid create
   */
  export type BidCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * The data needed to create a Bid.
     */
    data: XOR<BidCreateInput, BidUncheckedCreateInput>
  }

  /**
   * Bid createMany
   */
  export type BidCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bids.
     */
    data: BidCreateManyInput | BidCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bid createManyAndReturn
   */
  export type BidCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * The data used to create many Bids.
     */
    data: BidCreateManyInput | BidCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bid update
   */
  export type BidUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * The data needed to update a Bid.
     */
    data: XOR<BidUpdateInput, BidUncheckedUpdateInput>
    /**
     * Choose, which Bid to update.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid updateMany
   */
  export type BidUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bids.
     */
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyInput>
    /**
     * Filter which Bids to update
     */
    where?: BidWhereInput
    /**
     * Limit how many Bids to update.
     */
    limit?: number
  }

  /**
   * Bid updateManyAndReturn
   */
  export type BidUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * The data used to update Bids.
     */
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyInput>
    /**
     * Filter which Bids to update
     */
    where?: BidWhereInput
    /**
     * Limit how many Bids to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bid upsert
   */
  export type BidUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * The filter to search for the Bid to update in case it exists.
     */
    where: BidWhereUniqueInput
    /**
     * In case the Bid found by the `where` argument doesn't exist, create a new Bid with this data.
     */
    create: XOR<BidCreateInput, BidUncheckedCreateInput>
    /**
     * In case the Bid was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BidUpdateInput, BidUncheckedUpdateInput>
  }

  /**
   * Bid delete
   */
  export type BidDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter which Bid to delete.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid deleteMany
   */
  export type BidDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bids to delete
     */
    where?: BidWhereInput
    /**
     * Limit how many Bids to delete.
     */
    limit?: number
  }

  /**
   * Bid without action
   */
  export type BidDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
  }


  /**
   * Model LeadWatch
   */

  export type AggregateLeadWatch = {
    _count: LeadWatchCountAggregateOutputType | null
    _min: LeadWatchMinAggregateOutputType | null
    _max: LeadWatchMaxAggregateOutputType | null
  }

  export type LeadWatchMinAggregateOutputType = {
    id: string | null
    leadId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LeadWatchMaxAggregateOutputType = {
    id: string | null
    leadId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type LeadWatchCountAggregateOutputType = {
    id: number
    leadId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type LeadWatchMinAggregateInputType = {
    id?: true
    leadId?: true
    userId?: true
    createdAt?: true
  }

  export type LeadWatchMaxAggregateInputType = {
    id?: true
    leadId?: true
    userId?: true
    createdAt?: true
  }

  export type LeadWatchCountAggregateInputType = {
    id?: true
    leadId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type LeadWatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadWatch to aggregate.
     */
    where?: LeadWatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadWatches to fetch.
     */
    orderBy?: LeadWatchOrderByWithRelationInput | LeadWatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadWatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadWatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadWatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadWatches
    **/
    _count?: true | LeadWatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadWatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadWatchMaxAggregateInputType
  }

  export type GetLeadWatchAggregateType<T extends LeadWatchAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadWatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadWatch[P]>
      : GetScalarType<T[P], AggregateLeadWatch[P]>
  }




  export type LeadWatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWatchWhereInput
    orderBy?: LeadWatchOrderByWithAggregationInput | LeadWatchOrderByWithAggregationInput[]
    by: LeadWatchScalarFieldEnum[] | LeadWatchScalarFieldEnum
    having?: LeadWatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadWatchCountAggregateInputType | true
    _min?: LeadWatchMinAggregateInputType
    _max?: LeadWatchMaxAggregateInputType
  }

  export type LeadWatchGroupByOutputType = {
    id: string
    leadId: string
    userId: string
    createdAt: Date
    _count: LeadWatchCountAggregateOutputType | null
    _min: LeadWatchMinAggregateOutputType | null
    _max: LeadWatchMaxAggregateOutputType | null
  }

  type GetLeadWatchGroupByPayload<T extends LeadWatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadWatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadWatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadWatchGroupByOutputType[P]>
            : GetScalarType<T[P], LeadWatchGroupByOutputType[P]>
        }
      >
    >


  export type LeadWatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    userId?: boolean
    createdAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadWatch"]>

  export type LeadWatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    userId?: boolean
    createdAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadWatch"]>

  export type LeadWatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    userId?: boolean
    createdAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadWatch"]>

  export type LeadWatchSelectScalar = {
    id?: boolean
    leadId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type LeadWatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leadId" | "userId" | "createdAt", ExtArgs["result"]["leadWatch"]>
  export type LeadWatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LeadWatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LeadWatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LeadWatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadWatch"
    objects: {
      lead: Prisma.$LeadPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leadId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["leadWatch"]>
    composites: {}
  }

  type LeadWatchGetPayload<S extends boolean | null | undefined | LeadWatchDefaultArgs> = $Result.GetResult<Prisma.$LeadWatchPayload, S>

  type LeadWatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadWatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadWatchCountAggregateInputType | true
    }

  export interface LeadWatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadWatch'], meta: { name: 'LeadWatch' } }
    /**
     * Find zero or one LeadWatch that matches the filter.
     * @param {LeadWatchFindUniqueArgs} args - Arguments to find a LeadWatch
     * @example
     * // Get one LeadWatch
     * const leadWatch = await prisma.leadWatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadWatchFindUniqueArgs>(args: SelectSubset<T, LeadWatchFindUniqueArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeadWatch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadWatchFindUniqueOrThrowArgs} args - Arguments to find a LeadWatch
     * @example
     * // Get one LeadWatch
     * const leadWatch = await prisma.leadWatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadWatchFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadWatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadWatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchFindFirstArgs} args - Arguments to find a LeadWatch
     * @example
     * // Get one LeadWatch
     * const leadWatch = await prisma.leadWatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadWatchFindFirstArgs>(args?: SelectSubset<T, LeadWatchFindFirstArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadWatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchFindFirstOrThrowArgs} args - Arguments to find a LeadWatch
     * @example
     * // Get one LeadWatch
     * const leadWatch = await prisma.leadWatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadWatchFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadWatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeadWatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadWatches
     * const leadWatches = await prisma.leadWatch.findMany()
     * 
     * // Get first 10 LeadWatches
     * const leadWatches = await prisma.leadWatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadWatchWithIdOnly = await prisma.leadWatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadWatchFindManyArgs>(args?: SelectSubset<T, LeadWatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeadWatch.
     * @param {LeadWatchCreateArgs} args - Arguments to create a LeadWatch.
     * @example
     * // Create one LeadWatch
     * const LeadWatch = await prisma.leadWatch.create({
     *   data: {
     *     // ... data to create a LeadWatch
     *   }
     * })
     * 
     */
    create<T extends LeadWatchCreateArgs>(args: SelectSubset<T, LeadWatchCreateArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeadWatches.
     * @param {LeadWatchCreateManyArgs} args - Arguments to create many LeadWatches.
     * @example
     * // Create many LeadWatches
     * const leadWatch = await prisma.leadWatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadWatchCreateManyArgs>(args?: SelectSubset<T, LeadWatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadWatches and returns the data saved in the database.
     * @param {LeadWatchCreateManyAndReturnArgs} args - Arguments to create many LeadWatches.
     * @example
     * // Create many LeadWatches
     * const leadWatch = await prisma.leadWatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadWatches and only return the `id`
     * const leadWatchWithIdOnly = await prisma.leadWatch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadWatchCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadWatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeadWatch.
     * @param {LeadWatchDeleteArgs} args - Arguments to delete one LeadWatch.
     * @example
     * // Delete one LeadWatch
     * const LeadWatch = await prisma.leadWatch.delete({
     *   where: {
     *     // ... filter to delete one LeadWatch
     *   }
     * })
     * 
     */
    delete<T extends LeadWatchDeleteArgs>(args: SelectSubset<T, LeadWatchDeleteArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeadWatch.
     * @param {LeadWatchUpdateArgs} args - Arguments to update one LeadWatch.
     * @example
     * // Update one LeadWatch
     * const leadWatch = await prisma.leadWatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadWatchUpdateArgs>(args: SelectSubset<T, LeadWatchUpdateArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeadWatches.
     * @param {LeadWatchDeleteManyArgs} args - Arguments to filter LeadWatches to delete.
     * @example
     * // Delete a few LeadWatches
     * const { count } = await prisma.leadWatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadWatchDeleteManyArgs>(args?: SelectSubset<T, LeadWatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadWatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadWatches
     * const leadWatch = await prisma.leadWatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadWatchUpdateManyArgs>(args: SelectSubset<T, LeadWatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadWatches and returns the data updated in the database.
     * @param {LeadWatchUpdateManyAndReturnArgs} args - Arguments to update many LeadWatches.
     * @example
     * // Update many LeadWatches
     * const leadWatch = await prisma.leadWatch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeadWatches and only return the `id`
     * const leadWatchWithIdOnly = await prisma.leadWatch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadWatchUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadWatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeadWatch.
     * @param {LeadWatchUpsertArgs} args - Arguments to update or create a LeadWatch.
     * @example
     * // Update or create a LeadWatch
     * const leadWatch = await prisma.leadWatch.upsert({
     *   create: {
     *     // ... data to create a LeadWatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadWatch we want to update
     *   }
     * })
     */
    upsert<T extends LeadWatchUpsertArgs>(args: SelectSubset<T, LeadWatchUpsertArgs<ExtArgs>>): Prisma__LeadWatchClient<$Result.GetResult<Prisma.$LeadWatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeadWatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchCountArgs} args - Arguments to filter LeadWatches to count.
     * @example
     * // Count the number of LeadWatches
     * const count = await prisma.leadWatch.count({
     *   where: {
     *     // ... the filter for the LeadWatches we want to count
     *   }
     * })
    **/
    count<T extends LeadWatchCountArgs>(
      args?: Subset<T, LeadWatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadWatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadWatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadWatchAggregateArgs>(args: Subset<T, LeadWatchAggregateArgs>): Prisma.PrismaPromise<GetLeadWatchAggregateType<T>>

    /**
     * Group by LeadWatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadWatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadWatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadWatchGroupByArgs['orderBy'] }
        : { orderBy?: LeadWatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadWatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadWatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadWatch model
   */
  readonly fields: LeadWatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadWatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadWatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadWatch model
   */
  interface LeadWatchFieldRefs {
    readonly id: FieldRef<"LeadWatch", 'String'>
    readonly leadId: FieldRef<"LeadWatch", 'String'>
    readonly userId: FieldRef<"LeadWatch", 'String'>
    readonly createdAt: FieldRef<"LeadWatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeadWatch findUnique
   */
  export type LeadWatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * Filter, which LeadWatch to fetch.
     */
    where: LeadWatchWhereUniqueInput
  }

  /**
   * LeadWatch findUniqueOrThrow
   */
  export type LeadWatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * Filter, which LeadWatch to fetch.
     */
    where: LeadWatchWhereUniqueInput
  }

  /**
   * LeadWatch findFirst
   */
  export type LeadWatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * Filter, which LeadWatch to fetch.
     */
    where?: LeadWatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadWatches to fetch.
     */
    orderBy?: LeadWatchOrderByWithRelationInput | LeadWatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadWatches.
     */
    cursor?: LeadWatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadWatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadWatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadWatches.
     */
    distinct?: LeadWatchScalarFieldEnum | LeadWatchScalarFieldEnum[]
  }

  /**
   * LeadWatch findFirstOrThrow
   */
  export type LeadWatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * Filter, which LeadWatch to fetch.
     */
    where?: LeadWatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadWatches to fetch.
     */
    orderBy?: LeadWatchOrderByWithRelationInput | LeadWatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadWatches.
     */
    cursor?: LeadWatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadWatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadWatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadWatches.
     */
    distinct?: LeadWatchScalarFieldEnum | LeadWatchScalarFieldEnum[]
  }

  /**
   * LeadWatch findMany
   */
  export type LeadWatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * Filter, which LeadWatches to fetch.
     */
    where?: LeadWatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadWatches to fetch.
     */
    orderBy?: LeadWatchOrderByWithRelationInput | LeadWatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadWatches.
     */
    cursor?: LeadWatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadWatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadWatches.
     */
    skip?: number
    distinct?: LeadWatchScalarFieldEnum | LeadWatchScalarFieldEnum[]
  }

  /**
   * LeadWatch create
   */
  export type LeadWatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadWatch.
     */
    data: XOR<LeadWatchCreateInput, LeadWatchUncheckedCreateInput>
  }

  /**
   * LeadWatch createMany
   */
  export type LeadWatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadWatches.
     */
    data: LeadWatchCreateManyInput | LeadWatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadWatch createManyAndReturn
   */
  export type LeadWatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * The data used to create many LeadWatches.
     */
    data: LeadWatchCreateManyInput | LeadWatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadWatch update
   */
  export type LeadWatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadWatch.
     */
    data: XOR<LeadWatchUpdateInput, LeadWatchUncheckedUpdateInput>
    /**
     * Choose, which LeadWatch to update.
     */
    where: LeadWatchWhereUniqueInput
  }

  /**
   * LeadWatch updateMany
   */
  export type LeadWatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadWatches.
     */
    data: XOR<LeadWatchUpdateManyMutationInput, LeadWatchUncheckedUpdateManyInput>
    /**
     * Filter which LeadWatches to update
     */
    where?: LeadWatchWhereInput
    /**
     * Limit how many LeadWatches to update.
     */
    limit?: number
  }

  /**
   * LeadWatch updateManyAndReturn
   */
  export type LeadWatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * The data used to update LeadWatches.
     */
    data: XOR<LeadWatchUpdateManyMutationInput, LeadWatchUncheckedUpdateManyInput>
    /**
     * Filter which LeadWatches to update
     */
    where?: LeadWatchWhereInput
    /**
     * Limit how many LeadWatches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadWatch upsert
   */
  export type LeadWatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadWatch to update in case it exists.
     */
    where: LeadWatchWhereUniqueInput
    /**
     * In case the LeadWatch found by the `where` argument doesn't exist, create a new LeadWatch with this data.
     */
    create: XOR<LeadWatchCreateInput, LeadWatchUncheckedCreateInput>
    /**
     * In case the LeadWatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadWatchUpdateInput, LeadWatchUncheckedUpdateInput>
  }

  /**
   * LeadWatch delete
   */
  export type LeadWatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
    /**
     * Filter which LeadWatch to delete.
     */
    where: LeadWatchWhereUniqueInput
  }

  /**
   * LeadWatch deleteMany
   */
  export type LeadWatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadWatches to delete
     */
    where?: LeadWatchWhereInput
    /**
     * Limit how many LeadWatches to delete.
     */
    limit?: number
  }

  /**
   * LeadWatch without action
   */
  export type LeadWatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadWatch
     */
    select?: LeadWatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadWatch
     */
    omit?: LeadWatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadWatchInclude<ExtArgs> | null
  }


  /**
   * Model LeadSale
   */

  export type AggregateLeadSale = {
    _count: LeadSaleCountAggregateOutputType | null
    _avg: LeadSaleAvgAggregateOutputType | null
    _sum: LeadSaleSumAggregateOutputType | null
    _min: LeadSaleMinAggregateOutputType | null
    _max: LeadSaleMaxAggregateOutputType | null
  }

  export type LeadSaleAvgAggregateOutputType = {
    amount: number | null
    balanceBefore: number | null
    balanceAfter: number | null
  }

  export type LeadSaleSumAggregateOutputType = {
    amount: number | null
    balanceBefore: number | null
    balanceAfter: number | null
  }

  export type LeadSaleMinAggregateOutputType = {
    id: string | null
    leadId: string | null
    buyerId: string | null
    amount: number | null
    paymentMethod: string | null
    balanceBefore: number | null
    balanceAfter: number | null
    soldAt: Date | null
    createdAt: Date | null
  }

  export type LeadSaleMaxAggregateOutputType = {
    id: string | null
    leadId: string | null
    buyerId: string | null
    amount: number | null
    paymentMethod: string | null
    balanceBefore: number | null
    balanceAfter: number | null
    soldAt: Date | null
    createdAt: Date | null
  }

  export type LeadSaleCountAggregateOutputType = {
    id: number
    leadId: number
    buyerId: number
    amount: number
    paymentMethod: number
    balanceBefore: number
    balanceAfter: number
    soldAt: number
    createdAt: number
    _all: number
  }


  export type LeadSaleAvgAggregateInputType = {
    amount?: true
    balanceBefore?: true
    balanceAfter?: true
  }

  export type LeadSaleSumAggregateInputType = {
    amount?: true
    balanceBefore?: true
    balanceAfter?: true
  }

  export type LeadSaleMinAggregateInputType = {
    id?: true
    leadId?: true
    buyerId?: true
    amount?: true
    paymentMethod?: true
    balanceBefore?: true
    balanceAfter?: true
    soldAt?: true
    createdAt?: true
  }

  export type LeadSaleMaxAggregateInputType = {
    id?: true
    leadId?: true
    buyerId?: true
    amount?: true
    paymentMethod?: true
    balanceBefore?: true
    balanceAfter?: true
    soldAt?: true
    createdAt?: true
  }

  export type LeadSaleCountAggregateInputType = {
    id?: true
    leadId?: true
    buyerId?: true
    amount?: true
    paymentMethod?: true
    balanceBefore?: true
    balanceAfter?: true
    soldAt?: true
    createdAt?: true
    _all?: true
  }

  export type LeadSaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadSale to aggregate.
     */
    where?: LeadSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadSales to fetch.
     */
    orderBy?: LeadSaleOrderByWithRelationInput | LeadSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadSales
    **/
    _count?: true | LeadSaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadSaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadSaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadSaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadSaleMaxAggregateInputType
  }

  export type GetLeadSaleAggregateType<T extends LeadSaleAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadSale[P]>
      : GetScalarType<T[P], AggregateLeadSale[P]>
  }




  export type LeadSaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadSaleWhereInput
    orderBy?: LeadSaleOrderByWithAggregationInput | LeadSaleOrderByWithAggregationInput[]
    by: LeadSaleScalarFieldEnum[] | LeadSaleScalarFieldEnum
    having?: LeadSaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadSaleCountAggregateInputType | true
    _avg?: LeadSaleAvgAggregateInputType
    _sum?: LeadSaleSumAggregateInputType
    _min?: LeadSaleMinAggregateInputType
    _max?: LeadSaleMaxAggregateInputType
  }

  export type LeadSaleGroupByOutputType = {
    id: string
    leadId: string
    buyerId: string
    amount: number
    paymentMethod: string
    balanceBefore: number | null
    balanceAfter: number | null
    soldAt: Date
    createdAt: Date
    _count: LeadSaleCountAggregateOutputType | null
    _avg: LeadSaleAvgAggregateOutputType | null
    _sum: LeadSaleSumAggregateOutputType | null
    _min: LeadSaleMinAggregateOutputType | null
    _max: LeadSaleMaxAggregateOutputType | null
  }

  type GetLeadSaleGroupByPayload<T extends LeadSaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadSaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadSaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadSaleGroupByOutputType[P]>
            : GetScalarType<T[P], LeadSaleGroupByOutputType[P]>
        }
      >
    >


  export type LeadSaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    buyerId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    soldAt?: boolean
    createdAt?: boolean
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadSale"]>

  export type LeadSaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    buyerId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    soldAt?: boolean
    createdAt?: boolean
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadSale"]>

  export type LeadSaleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    buyerId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    soldAt?: boolean
    createdAt?: boolean
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadSale"]>

  export type LeadSaleSelectScalar = {
    id?: boolean
    leadId?: boolean
    buyerId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    balanceBefore?: boolean
    balanceAfter?: boolean
    soldAt?: boolean
    createdAt?: boolean
  }

  export type LeadSaleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leadId" | "buyerId" | "amount" | "paymentMethod" | "balanceBefore" | "balanceAfter" | "soldAt" | "createdAt", ExtArgs["result"]["leadSale"]>
  export type LeadSaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }
  export type LeadSaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }
  export type LeadSaleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }

  export type $LeadSalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadSale"
    objects: {
      buyer: Prisma.$UserPayload<ExtArgs>
      lead: Prisma.$LeadPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leadId: string
      buyerId: string
      amount: number
      paymentMethod: string
      balanceBefore: number | null
      balanceAfter: number | null
      soldAt: Date
      createdAt: Date
    }, ExtArgs["result"]["leadSale"]>
    composites: {}
  }

  type LeadSaleGetPayload<S extends boolean | null | undefined | LeadSaleDefaultArgs> = $Result.GetResult<Prisma.$LeadSalePayload, S>

  type LeadSaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadSaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadSaleCountAggregateInputType | true
    }

  export interface LeadSaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadSale'], meta: { name: 'LeadSale' } }
    /**
     * Find zero or one LeadSale that matches the filter.
     * @param {LeadSaleFindUniqueArgs} args - Arguments to find a LeadSale
     * @example
     * // Get one LeadSale
     * const leadSale = await prisma.leadSale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadSaleFindUniqueArgs>(args: SelectSubset<T, LeadSaleFindUniqueArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeadSale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadSaleFindUniqueOrThrowArgs} args - Arguments to find a LeadSale
     * @example
     * // Get one LeadSale
     * const leadSale = await prisma.leadSale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadSaleFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadSaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadSale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleFindFirstArgs} args - Arguments to find a LeadSale
     * @example
     * // Get one LeadSale
     * const leadSale = await prisma.leadSale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadSaleFindFirstArgs>(args?: SelectSubset<T, LeadSaleFindFirstArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadSale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleFindFirstOrThrowArgs} args - Arguments to find a LeadSale
     * @example
     * // Get one LeadSale
     * const leadSale = await prisma.leadSale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadSaleFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadSaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeadSales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadSales
     * const leadSales = await prisma.leadSale.findMany()
     * 
     * // Get first 10 LeadSales
     * const leadSales = await prisma.leadSale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadSaleWithIdOnly = await prisma.leadSale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadSaleFindManyArgs>(args?: SelectSubset<T, LeadSaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeadSale.
     * @param {LeadSaleCreateArgs} args - Arguments to create a LeadSale.
     * @example
     * // Create one LeadSale
     * const LeadSale = await prisma.leadSale.create({
     *   data: {
     *     // ... data to create a LeadSale
     *   }
     * })
     * 
     */
    create<T extends LeadSaleCreateArgs>(args: SelectSubset<T, LeadSaleCreateArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeadSales.
     * @param {LeadSaleCreateManyArgs} args - Arguments to create many LeadSales.
     * @example
     * // Create many LeadSales
     * const leadSale = await prisma.leadSale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadSaleCreateManyArgs>(args?: SelectSubset<T, LeadSaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadSales and returns the data saved in the database.
     * @param {LeadSaleCreateManyAndReturnArgs} args - Arguments to create many LeadSales.
     * @example
     * // Create many LeadSales
     * const leadSale = await prisma.leadSale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadSales and only return the `id`
     * const leadSaleWithIdOnly = await prisma.leadSale.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadSaleCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadSaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeadSale.
     * @param {LeadSaleDeleteArgs} args - Arguments to delete one LeadSale.
     * @example
     * // Delete one LeadSale
     * const LeadSale = await prisma.leadSale.delete({
     *   where: {
     *     // ... filter to delete one LeadSale
     *   }
     * })
     * 
     */
    delete<T extends LeadSaleDeleteArgs>(args: SelectSubset<T, LeadSaleDeleteArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeadSale.
     * @param {LeadSaleUpdateArgs} args - Arguments to update one LeadSale.
     * @example
     * // Update one LeadSale
     * const leadSale = await prisma.leadSale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadSaleUpdateArgs>(args: SelectSubset<T, LeadSaleUpdateArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeadSales.
     * @param {LeadSaleDeleteManyArgs} args - Arguments to filter LeadSales to delete.
     * @example
     * // Delete a few LeadSales
     * const { count } = await prisma.leadSale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadSaleDeleteManyArgs>(args?: SelectSubset<T, LeadSaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadSales
     * const leadSale = await prisma.leadSale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadSaleUpdateManyArgs>(args: SelectSubset<T, LeadSaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadSales and returns the data updated in the database.
     * @param {LeadSaleUpdateManyAndReturnArgs} args - Arguments to update many LeadSales.
     * @example
     * // Update many LeadSales
     * const leadSale = await prisma.leadSale.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeadSales and only return the `id`
     * const leadSaleWithIdOnly = await prisma.leadSale.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadSaleUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadSaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeadSale.
     * @param {LeadSaleUpsertArgs} args - Arguments to update or create a LeadSale.
     * @example
     * // Update or create a LeadSale
     * const leadSale = await prisma.leadSale.upsert({
     *   create: {
     *     // ... data to create a LeadSale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadSale we want to update
     *   }
     * })
     */
    upsert<T extends LeadSaleUpsertArgs>(args: SelectSubset<T, LeadSaleUpsertArgs<ExtArgs>>): Prisma__LeadSaleClient<$Result.GetResult<Prisma.$LeadSalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeadSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleCountArgs} args - Arguments to filter LeadSales to count.
     * @example
     * // Count the number of LeadSales
     * const count = await prisma.leadSale.count({
     *   where: {
     *     // ... the filter for the LeadSales we want to count
     *   }
     * })
    **/
    count<T extends LeadSaleCountArgs>(
      args?: Subset<T, LeadSaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadSaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadSale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadSaleAggregateArgs>(args: Subset<T, LeadSaleAggregateArgs>): Prisma.PrismaPromise<GetLeadSaleAggregateType<T>>

    /**
     * Group by LeadSale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadSaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadSaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadSaleGroupByArgs['orderBy'] }
        : { orderBy?: LeadSaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadSaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadSale model
   */
  readonly fields: LeadSaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadSale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadSaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadSale model
   */
  interface LeadSaleFieldRefs {
    readonly id: FieldRef<"LeadSale", 'String'>
    readonly leadId: FieldRef<"LeadSale", 'String'>
    readonly buyerId: FieldRef<"LeadSale", 'String'>
    readonly amount: FieldRef<"LeadSale", 'Int'>
    readonly paymentMethod: FieldRef<"LeadSale", 'String'>
    readonly balanceBefore: FieldRef<"LeadSale", 'Int'>
    readonly balanceAfter: FieldRef<"LeadSale", 'Int'>
    readonly soldAt: FieldRef<"LeadSale", 'DateTime'>
    readonly createdAt: FieldRef<"LeadSale", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeadSale findUnique
   */
  export type LeadSaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * Filter, which LeadSale to fetch.
     */
    where: LeadSaleWhereUniqueInput
  }

  /**
   * LeadSale findUniqueOrThrow
   */
  export type LeadSaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * Filter, which LeadSale to fetch.
     */
    where: LeadSaleWhereUniqueInput
  }

  /**
   * LeadSale findFirst
   */
  export type LeadSaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * Filter, which LeadSale to fetch.
     */
    where?: LeadSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadSales to fetch.
     */
    orderBy?: LeadSaleOrderByWithRelationInput | LeadSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadSales.
     */
    cursor?: LeadSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadSales.
     */
    distinct?: LeadSaleScalarFieldEnum | LeadSaleScalarFieldEnum[]
  }

  /**
   * LeadSale findFirstOrThrow
   */
  export type LeadSaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * Filter, which LeadSale to fetch.
     */
    where?: LeadSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadSales to fetch.
     */
    orderBy?: LeadSaleOrderByWithRelationInput | LeadSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadSales.
     */
    cursor?: LeadSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadSales.
     */
    distinct?: LeadSaleScalarFieldEnum | LeadSaleScalarFieldEnum[]
  }

  /**
   * LeadSale findMany
   */
  export type LeadSaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * Filter, which LeadSales to fetch.
     */
    where?: LeadSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadSales to fetch.
     */
    orderBy?: LeadSaleOrderByWithRelationInput | LeadSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadSales.
     */
    cursor?: LeadSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadSales.
     */
    skip?: number
    distinct?: LeadSaleScalarFieldEnum | LeadSaleScalarFieldEnum[]
  }

  /**
   * LeadSale create
   */
  export type LeadSaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadSale.
     */
    data: XOR<LeadSaleCreateInput, LeadSaleUncheckedCreateInput>
  }

  /**
   * LeadSale createMany
   */
  export type LeadSaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadSales.
     */
    data: LeadSaleCreateManyInput | LeadSaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadSale createManyAndReturn
   */
  export type LeadSaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * The data used to create many LeadSales.
     */
    data: LeadSaleCreateManyInput | LeadSaleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadSale update
   */
  export type LeadSaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadSale.
     */
    data: XOR<LeadSaleUpdateInput, LeadSaleUncheckedUpdateInput>
    /**
     * Choose, which LeadSale to update.
     */
    where: LeadSaleWhereUniqueInput
  }

  /**
   * LeadSale updateMany
   */
  export type LeadSaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadSales.
     */
    data: XOR<LeadSaleUpdateManyMutationInput, LeadSaleUncheckedUpdateManyInput>
    /**
     * Filter which LeadSales to update
     */
    where?: LeadSaleWhereInput
    /**
     * Limit how many LeadSales to update.
     */
    limit?: number
  }

  /**
   * LeadSale updateManyAndReturn
   */
  export type LeadSaleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * The data used to update LeadSales.
     */
    data: XOR<LeadSaleUpdateManyMutationInput, LeadSaleUncheckedUpdateManyInput>
    /**
     * Filter which LeadSales to update
     */
    where?: LeadSaleWhereInput
    /**
     * Limit how many LeadSales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadSale upsert
   */
  export type LeadSaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadSale to update in case it exists.
     */
    where: LeadSaleWhereUniqueInput
    /**
     * In case the LeadSale found by the `where` argument doesn't exist, create a new LeadSale with this data.
     */
    create: XOR<LeadSaleCreateInput, LeadSaleUncheckedCreateInput>
    /**
     * In case the LeadSale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadSaleUpdateInput, LeadSaleUncheckedUpdateInput>
  }

  /**
   * LeadSale delete
   */
  export type LeadSaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
    /**
     * Filter which LeadSale to delete.
     */
    where: LeadSaleWhereUniqueInput
  }

  /**
   * LeadSale deleteMany
   */
  export type LeadSaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadSales to delete
     */
    where?: LeadSaleWhereInput
    /**
     * Limit how many LeadSales to delete.
     */
    limit?: number
  }

  /**
   * LeadSale without action
   */
  export type LeadSaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadSale
     */
    select?: LeadSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadSale
     */
    omit?: LeadSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadSaleInclude<ExtArgs> | null
  }


  /**
   * Model Settings
   */

  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsAvgAggregateOutputType = {
    startingNumber: number | null
    defaultAuctionDays: number | null
    defaultMinIncrement: number | null
    smtpPort: number | null
  }

  export type SettingsSumAggregateOutputType = {
    startingNumber: number | null
    defaultAuctionDays: number | null
    defaultMinIncrement: number | null
    smtpPort: number | null
  }

  export type SettingsMinAggregateOutputType = {
    id: string | null
    leadIdFormat: string | null
    customFormat: string | null
    leadPrefix: string | null
    startingNumber: number | null
    numberType: string | null
    defaultCurrency: string | null
    defaultAuctionDays: number | null
    defaultMinIncrement: number | null
    homepageHeroEyebrow: string | null
    homepageHeroTitle: string | null
    homepageHeroHighlight: string | null
    homepageHeroTitleSuffix: string | null
    homepageHeroSubtitle: string | null
    homepageHeroPrimaryCtaText: string | null
    homepageHeroPrimaryCtaLink: string | null
    homepageHeroSecondaryCtaText: string | null
    homepageHeroSecondaryCtaLink: string | null
    homepageFeatureHeading: string | null
    homepageShowcaseEyebrow: string | null
    homepageShowcaseTitle: string | null
    homepageShowcaseCtaText: string | null
    homepageShowcaseCtaLink: string | null
    homepageStatsEyebrow: string | null
    homepageStatsTitle: string | null
    homepageCtaTitle: string | null
    homepageCtaSubtitle: string | null
    homepageCtaPrimaryText: string | null
    homepageCtaPrimaryLink: string | null
    homepageCtaSecondaryText: string | null
    homepageCtaSecondaryLink: string | null
    maintenanceMode: boolean | null
    maintenanceMessage: string | null
    smtpHost: string | null
    smtpPort: number | null
    smtpUser: string | null
    smtpPass: string | null
    smtpFromName: string | null
    smtpUseTLS: boolean | null
    smtpUseSSL: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    companyLogoUrl: string | null
    companyName: string | null
    faviconUrl: string | null
    footerDescription: string | null
    footerEmail: string | null
    footerNote: string | null
    footerPhone: string | null
    tradeRegisterNumber: string | null
  }

  export type SettingsMaxAggregateOutputType = {
    id: string | null
    leadIdFormat: string | null
    customFormat: string | null
    leadPrefix: string | null
    startingNumber: number | null
    numberType: string | null
    defaultCurrency: string | null
    defaultAuctionDays: number | null
    defaultMinIncrement: number | null
    homepageHeroEyebrow: string | null
    homepageHeroTitle: string | null
    homepageHeroHighlight: string | null
    homepageHeroTitleSuffix: string | null
    homepageHeroSubtitle: string | null
    homepageHeroPrimaryCtaText: string | null
    homepageHeroPrimaryCtaLink: string | null
    homepageHeroSecondaryCtaText: string | null
    homepageHeroSecondaryCtaLink: string | null
    homepageFeatureHeading: string | null
    homepageShowcaseEyebrow: string | null
    homepageShowcaseTitle: string | null
    homepageShowcaseCtaText: string | null
    homepageShowcaseCtaLink: string | null
    homepageStatsEyebrow: string | null
    homepageStatsTitle: string | null
    homepageCtaTitle: string | null
    homepageCtaSubtitle: string | null
    homepageCtaPrimaryText: string | null
    homepageCtaPrimaryLink: string | null
    homepageCtaSecondaryText: string | null
    homepageCtaSecondaryLink: string | null
    maintenanceMode: boolean | null
    maintenanceMessage: string | null
    smtpHost: string | null
    smtpPort: number | null
    smtpUser: string | null
    smtpPass: string | null
    smtpFromName: string | null
    smtpUseTLS: boolean | null
    smtpUseSSL: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    companyLogoUrl: string | null
    companyName: string | null
    faviconUrl: string | null
    footerDescription: string | null
    footerEmail: string | null
    footerNote: string | null
    footerPhone: string | null
    tradeRegisterNumber: string | null
  }

  export type SettingsCountAggregateOutputType = {
    id: number
    leadIdFormat: number
    customFormat: number
    leadPrefix: number
    startingNumber: number
    numberType: number
    defaultCurrency: number
    defaultAuctionDays: number
    defaultMinIncrement: number
    homepageHeroEyebrow: number
    homepageHeroTitle: number
    homepageHeroHighlight: number
    homepageHeroTitleSuffix: number
    homepageHeroSubtitle: number
    homepageHeroPrimaryCtaText: number
    homepageHeroPrimaryCtaLink: number
    homepageHeroSecondaryCtaText: number
    homepageHeroSecondaryCtaLink: number
    homepageFeatureHeading: number
    homepageFeatures: number
    homepageShowcaseEyebrow: number
    homepageShowcaseTitle: number
    homepageShowcaseCtaText: number
    homepageShowcaseCtaLink: number
    homepageStatsEyebrow: number
    homepageStatsTitle: number
    homepageStats: number
    homepageCtaTitle: number
    homepageCtaSubtitle: number
    homepageCtaPrimaryText: number
    homepageCtaPrimaryLink: number
    homepageCtaSecondaryText: number
    homepageCtaSecondaryLink: number
    maintenanceMode: number
    maintenanceMessage: number
    smtpHost: number
    smtpPort: number
    smtpUser: number
    smtpPass: number
    smtpFromName: number
    smtpUseTLS: number
    smtpUseSSL: number
    createdAt: number
    updatedAt: number
    companyLogoUrl: number
    companyName: number
    faviconUrl: number
    footerDescription: number
    footerEmail: number
    footerNote: number
    footerPhone: number
    insuranceTypes: number
    legalLinks: number
    servicesLinks: number
    socialMedia: number
    supportLinks: number
    tradeRegisterNumber: number
    _all: number
  }


  export type SettingsAvgAggregateInputType = {
    startingNumber?: true
    defaultAuctionDays?: true
    defaultMinIncrement?: true
    smtpPort?: true
  }

  export type SettingsSumAggregateInputType = {
    startingNumber?: true
    defaultAuctionDays?: true
    defaultMinIncrement?: true
    smtpPort?: true
  }

  export type SettingsMinAggregateInputType = {
    id?: true
    leadIdFormat?: true
    customFormat?: true
    leadPrefix?: true
    startingNumber?: true
    numberType?: true
    defaultCurrency?: true
    defaultAuctionDays?: true
    defaultMinIncrement?: true
    homepageHeroEyebrow?: true
    homepageHeroTitle?: true
    homepageHeroHighlight?: true
    homepageHeroTitleSuffix?: true
    homepageHeroSubtitle?: true
    homepageHeroPrimaryCtaText?: true
    homepageHeroPrimaryCtaLink?: true
    homepageHeroSecondaryCtaText?: true
    homepageHeroSecondaryCtaLink?: true
    homepageFeatureHeading?: true
    homepageShowcaseEyebrow?: true
    homepageShowcaseTitle?: true
    homepageShowcaseCtaText?: true
    homepageShowcaseCtaLink?: true
    homepageStatsEyebrow?: true
    homepageStatsTitle?: true
    homepageCtaTitle?: true
    homepageCtaSubtitle?: true
    homepageCtaPrimaryText?: true
    homepageCtaPrimaryLink?: true
    homepageCtaSecondaryText?: true
    homepageCtaSecondaryLink?: true
    maintenanceMode?: true
    maintenanceMessage?: true
    smtpHost?: true
    smtpPort?: true
    smtpUser?: true
    smtpPass?: true
    smtpFromName?: true
    smtpUseTLS?: true
    smtpUseSSL?: true
    createdAt?: true
    updatedAt?: true
    companyLogoUrl?: true
    companyName?: true
    faviconUrl?: true
    footerDescription?: true
    footerEmail?: true
    footerNote?: true
    footerPhone?: true
    tradeRegisterNumber?: true
  }

  export type SettingsMaxAggregateInputType = {
    id?: true
    leadIdFormat?: true
    customFormat?: true
    leadPrefix?: true
    startingNumber?: true
    numberType?: true
    defaultCurrency?: true
    defaultAuctionDays?: true
    defaultMinIncrement?: true
    homepageHeroEyebrow?: true
    homepageHeroTitle?: true
    homepageHeroHighlight?: true
    homepageHeroTitleSuffix?: true
    homepageHeroSubtitle?: true
    homepageHeroPrimaryCtaText?: true
    homepageHeroPrimaryCtaLink?: true
    homepageHeroSecondaryCtaText?: true
    homepageHeroSecondaryCtaLink?: true
    homepageFeatureHeading?: true
    homepageShowcaseEyebrow?: true
    homepageShowcaseTitle?: true
    homepageShowcaseCtaText?: true
    homepageShowcaseCtaLink?: true
    homepageStatsEyebrow?: true
    homepageStatsTitle?: true
    homepageCtaTitle?: true
    homepageCtaSubtitle?: true
    homepageCtaPrimaryText?: true
    homepageCtaPrimaryLink?: true
    homepageCtaSecondaryText?: true
    homepageCtaSecondaryLink?: true
    maintenanceMode?: true
    maintenanceMessage?: true
    smtpHost?: true
    smtpPort?: true
    smtpUser?: true
    smtpPass?: true
    smtpFromName?: true
    smtpUseTLS?: true
    smtpUseSSL?: true
    createdAt?: true
    updatedAt?: true
    companyLogoUrl?: true
    companyName?: true
    faviconUrl?: true
    footerDescription?: true
    footerEmail?: true
    footerNote?: true
    footerPhone?: true
    tradeRegisterNumber?: true
  }

  export type SettingsCountAggregateInputType = {
    id?: true
    leadIdFormat?: true
    customFormat?: true
    leadPrefix?: true
    startingNumber?: true
    numberType?: true
    defaultCurrency?: true
    defaultAuctionDays?: true
    defaultMinIncrement?: true
    homepageHeroEyebrow?: true
    homepageHeroTitle?: true
    homepageHeroHighlight?: true
    homepageHeroTitleSuffix?: true
    homepageHeroSubtitle?: true
    homepageHeroPrimaryCtaText?: true
    homepageHeroPrimaryCtaLink?: true
    homepageHeroSecondaryCtaText?: true
    homepageHeroSecondaryCtaLink?: true
    homepageFeatureHeading?: true
    homepageFeatures?: true
    homepageShowcaseEyebrow?: true
    homepageShowcaseTitle?: true
    homepageShowcaseCtaText?: true
    homepageShowcaseCtaLink?: true
    homepageStatsEyebrow?: true
    homepageStatsTitle?: true
    homepageStats?: true
    homepageCtaTitle?: true
    homepageCtaSubtitle?: true
    homepageCtaPrimaryText?: true
    homepageCtaPrimaryLink?: true
    homepageCtaSecondaryText?: true
    homepageCtaSecondaryLink?: true
    maintenanceMode?: true
    maintenanceMessage?: true
    smtpHost?: true
    smtpPort?: true
    smtpUser?: true
    smtpPass?: true
    smtpFromName?: true
    smtpUseTLS?: true
    smtpUseSSL?: true
    createdAt?: true
    updatedAt?: true
    companyLogoUrl?: true
    companyName?: true
    faviconUrl?: true
    footerDescription?: true
    footerEmail?: true
    footerNote?: true
    footerPhone?: true
    insuranceTypes?: true
    legalLinks?: true
    servicesLinks?: true
    socialMedia?: true
    supportLinks?: true
    tradeRegisterNumber?: true
    _all?: true
  }

  export type SettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to aggregate.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type SettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingsWhereInput
    orderBy?: SettingsOrderByWithAggregationInput | SettingsOrderByWithAggregationInput[]
    by: SettingsScalarFieldEnum[] | SettingsScalarFieldEnum
    having?: SettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _avg?: SettingsAvgAggregateInputType
    _sum?: SettingsSumAggregateInputType
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }

  export type SettingsGroupByOutputType = {
    id: string
    leadIdFormat: string
    customFormat: string
    leadPrefix: string
    startingNumber: number
    numberType: string
    defaultCurrency: string
    defaultAuctionDays: number
    defaultMinIncrement: number
    homepageHeroEyebrow: string
    homepageHeroTitle: string
    homepageHeroHighlight: string
    homepageHeroTitleSuffix: string
    homepageHeroSubtitle: string
    homepageHeroPrimaryCtaText: string
    homepageHeroPrimaryCtaLink: string
    homepageHeroSecondaryCtaText: string
    homepageHeroSecondaryCtaLink: string
    homepageFeatureHeading: string
    homepageFeatures: JsonValue
    homepageShowcaseEyebrow: string
    homepageShowcaseTitle: string
    homepageShowcaseCtaText: string
    homepageShowcaseCtaLink: string
    homepageStatsEyebrow: string
    homepageStatsTitle: string
    homepageStats: JsonValue
    homepageCtaTitle: string
    homepageCtaSubtitle: string
    homepageCtaPrimaryText: string
    homepageCtaPrimaryLink: string
    homepageCtaSecondaryText: string
    homepageCtaSecondaryLink: string
    maintenanceMode: boolean
    maintenanceMessage: string
    smtpHost: string
    smtpPort: number
    smtpUser: string
    smtpPass: string
    smtpFromName: string
    smtpUseTLS: boolean
    smtpUseSSL: boolean
    createdAt: Date
    updatedAt: Date
    companyLogoUrl: string
    companyName: string
    faviconUrl: string
    footerDescription: string
    footerEmail: string
    footerNote: string
    footerPhone: string
    insuranceTypes: JsonValue
    legalLinks: JsonValue | null
    servicesLinks: JsonValue | null
    socialMedia: JsonValue | null
    supportLinks: JsonValue | null
    tradeRegisterNumber: string
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type SettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadIdFormat?: boolean
    customFormat?: boolean
    leadPrefix?: boolean
    startingNumber?: boolean
    numberType?: boolean
    defaultCurrency?: boolean
    defaultAuctionDays?: boolean
    defaultMinIncrement?: boolean
    homepageHeroEyebrow?: boolean
    homepageHeroTitle?: boolean
    homepageHeroHighlight?: boolean
    homepageHeroTitleSuffix?: boolean
    homepageHeroSubtitle?: boolean
    homepageHeroPrimaryCtaText?: boolean
    homepageHeroPrimaryCtaLink?: boolean
    homepageHeroSecondaryCtaText?: boolean
    homepageHeroSecondaryCtaLink?: boolean
    homepageFeatureHeading?: boolean
    homepageFeatures?: boolean
    homepageShowcaseEyebrow?: boolean
    homepageShowcaseTitle?: boolean
    homepageShowcaseCtaText?: boolean
    homepageShowcaseCtaLink?: boolean
    homepageStatsEyebrow?: boolean
    homepageStatsTitle?: boolean
    homepageStats?: boolean
    homepageCtaTitle?: boolean
    homepageCtaSubtitle?: boolean
    homepageCtaPrimaryText?: boolean
    homepageCtaPrimaryLink?: boolean
    homepageCtaSecondaryText?: boolean
    homepageCtaSecondaryLink?: boolean
    maintenanceMode?: boolean
    maintenanceMessage?: boolean
    smtpHost?: boolean
    smtpPort?: boolean
    smtpUser?: boolean
    smtpPass?: boolean
    smtpFromName?: boolean
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyLogoUrl?: boolean
    companyName?: boolean
    faviconUrl?: boolean
    footerDescription?: boolean
    footerEmail?: boolean
    footerNote?: boolean
    footerPhone?: boolean
    insuranceTypes?: boolean
    legalLinks?: boolean
    servicesLinks?: boolean
    socialMedia?: boolean
    supportLinks?: boolean
    tradeRegisterNumber?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadIdFormat?: boolean
    customFormat?: boolean
    leadPrefix?: boolean
    startingNumber?: boolean
    numberType?: boolean
    defaultCurrency?: boolean
    defaultAuctionDays?: boolean
    defaultMinIncrement?: boolean
    homepageHeroEyebrow?: boolean
    homepageHeroTitle?: boolean
    homepageHeroHighlight?: boolean
    homepageHeroTitleSuffix?: boolean
    homepageHeroSubtitle?: boolean
    homepageHeroPrimaryCtaText?: boolean
    homepageHeroPrimaryCtaLink?: boolean
    homepageHeroSecondaryCtaText?: boolean
    homepageHeroSecondaryCtaLink?: boolean
    homepageFeatureHeading?: boolean
    homepageFeatures?: boolean
    homepageShowcaseEyebrow?: boolean
    homepageShowcaseTitle?: boolean
    homepageShowcaseCtaText?: boolean
    homepageShowcaseCtaLink?: boolean
    homepageStatsEyebrow?: boolean
    homepageStatsTitle?: boolean
    homepageStats?: boolean
    homepageCtaTitle?: boolean
    homepageCtaSubtitle?: boolean
    homepageCtaPrimaryText?: boolean
    homepageCtaPrimaryLink?: boolean
    homepageCtaSecondaryText?: boolean
    homepageCtaSecondaryLink?: boolean
    maintenanceMode?: boolean
    maintenanceMessage?: boolean
    smtpHost?: boolean
    smtpPort?: boolean
    smtpUser?: boolean
    smtpPass?: boolean
    smtpFromName?: boolean
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyLogoUrl?: boolean
    companyName?: boolean
    faviconUrl?: boolean
    footerDescription?: boolean
    footerEmail?: boolean
    footerNote?: boolean
    footerPhone?: boolean
    insuranceTypes?: boolean
    legalLinks?: boolean
    servicesLinks?: boolean
    socialMedia?: boolean
    supportLinks?: boolean
    tradeRegisterNumber?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadIdFormat?: boolean
    customFormat?: boolean
    leadPrefix?: boolean
    startingNumber?: boolean
    numberType?: boolean
    defaultCurrency?: boolean
    defaultAuctionDays?: boolean
    defaultMinIncrement?: boolean
    homepageHeroEyebrow?: boolean
    homepageHeroTitle?: boolean
    homepageHeroHighlight?: boolean
    homepageHeroTitleSuffix?: boolean
    homepageHeroSubtitle?: boolean
    homepageHeroPrimaryCtaText?: boolean
    homepageHeroPrimaryCtaLink?: boolean
    homepageHeroSecondaryCtaText?: boolean
    homepageHeroSecondaryCtaLink?: boolean
    homepageFeatureHeading?: boolean
    homepageFeatures?: boolean
    homepageShowcaseEyebrow?: boolean
    homepageShowcaseTitle?: boolean
    homepageShowcaseCtaText?: boolean
    homepageShowcaseCtaLink?: boolean
    homepageStatsEyebrow?: boolean
    homepageStatsTitle?: boolean
    homepageStats?: boolean
    homepageCtaTitle?: boolean
    homepageCtaSubtitle?: boolean
    homepageCtaPrimaryText?: boolean
    homepageCtaPrimaryLink?: boolean
    homepageCtaSecondaryText?: boolean
    homepageCtaSecondaryLink?: boolean
    maintenanceMode?: boolean
    maintenanceMessage?: boolean
    smtpHost?: boolean
    smtpPort?: boolean
    smtpUser?: boolean
    smtpPass?: boolean
    smtpFromName?: boolean
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyLogoUrl?: boolean
    companyName?: boolean
    faviconUrl?: boolean
    footerDescription?: boolean
    footerEmail?: boolean
    footerNote?: boolean
    footerPhone?: boolean
    insuranceTypes?: boolean
    legalLinks?: boolean
    servicesLinks?: boolean
    socialMedia?: boolean
    supportLinks?: boolean
    tradeRegisterNumber?: boolean
  }, ExtArgs["result"]["settings"]>

  export type SettingsSelectScalar = {
    id?: boolean
    leadIdFormat?: boolean
    customFormat?: boolean
    leadPrefix?: boolean
    startingNumber?: boolean
    numberType?: boolean
    defaultCurrency?: boolean
    defaultAuctionDays?: boolean
    defaultMinIncrement?: boolean
    homepageHeroEyebrow?: boolean
    homepageHeroTitle?: boolean
    homepageHeroHighlight?: boolean
    homepageHeroTitleSuffix?: boolean
    homepageHeroSubtitle?: boolean
    homepageHeroPrimaryCtaText?: boolean
    homepageHeroPrimaryCtaLink?: boolean
    homepageHeroSecondaryCtaText?: boolean
    homepageHeroSecondaryCtaLink?: boolean
    homepageFeatureHeading?: boolean
    homepageFeatures?: boolean
    homepageShowcaseEyebrow?: boolean
    homepageShowcaseTitle?: boolean
    homepageShowcaseCtaText?: boolean
    homepageShowcaseCtaLink?: boolean
    homepageStatsEyebrow?: boolean
    homepageStatsTitle?: boolean
    homepageStats?: boolean
    homepageCtaTitle?: boolean
    homepageCtaSubtitle?: boolean
    homepageCtaPrimaryText?: boolean
    homepageCtaPrimaryLink?: boolean
    homepageCtaSecondaryText?: boolean
    homepageCtaSecondaryLink?: boolean
    maintenanceMode?: boolean
    maintenanceMessage?: boolean
    smtpHost?: boolean
    smtpPort?: boolean
    smtpUser?: boolean
    smtpPass?: boolean
    smtpFromName?: boolean
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyLogoUrl?: boolean
    companyName?: boolean
    faviconUrl?: boolean
    footerDescription?: boolean
    footerEmail?: boolean
    footerNote?: boolean
    footerPhone?: boolean
    insuranceTypes?: boolean
    legalLinks?: boolean
    servicesLinks?: boolean
    socialMedia?: boolean
    supportLinks?: boolean
    tradeRegisterNumber?: boolean
  }

  export type SettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leadIdFormat" | "customFormat" | "leadPrefix" | "startingNumber" | "numberType" | "defaultCurrency" | "defaultAuctionDays" | "defaultMinIncrement" | "homepageHeroEyebrow" | "homepageHeroTitle" | "homepageHeroHighlight" | "homepageHeroTitleSuffix" | "homepageHeroSubtitle" | "homepageHeroPrimaryCtaText" | "homepageHeroPrimaryCtaLink" | "homepageHeroSecondaryCtaText" | "homepageHeroSecondaryCtaLink" | "homepageFeatureHeading" | "homepageFeatures" | "homepageShowcaseEyebrow" | "homepageShowcaseTitle" | "homepageShowcaseCtaText" | "homepageShowcaseCtaLink" | "homepageStatsEyebrow" | "homepageStatsTitle" | "homepageStats" | "homepageCtaTitle" | "homepageCtaSubtitle" | "homepageCtaPrimaryText" | "homepageCtaPrimaryLink" | "homepageCtaSecondaryText" | "homepageCtaSecondaryLink" | "maintenanceMode" | "maintenanceMessage" | "smtpHost" | "smtpPort" | "smtpUser" | "smtpPass" | "smtpFromName" | "smtpUseTLS" | "smtpUseSSL" | "createdAt" | "updatedAt" | "companyLogoUrl" | "companyName" | "faviconUrl" | "footerDescription" | "footerEmail" | "footerNote" | "footerPhone" | "insuranceTypes" | "legalLinks" | "servicesLinks" | "socialMedia" | "supportLinks" | "tradeRegisterNumber", ExtArgs["result"]["settings"]>

  export type $SettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Settings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leadIdFormat: string
      customFormat: string
      leadPrefix: string
      startingNumber: number
      numberType: string
      defaultCurrency: string
      defaultAuctionDays: number
      defaultMinIncrement: number
      homepageHeroEyebrow: string
      homepageHeroTitle: string
      homepageHeroHighlight: string
      homepageHeroTitleSuffix: string
      homepageHeroSubtitle: string
      homepageHeroPrimaryCtaText: string
      homepageHeroPrimaryCtaLink: string
      homepageHeroSecondaryCtaText: string
      homepageHeroSecondaryCtaLink: string
      homepageFeatureHeading: string
      homepageFeatures: Prisma.JsonValue
      homepageShowcaseEyebrow: string
      homepageShowcaseTitle: string
      homepageShowcaseCtaText: string
      homepageShowcaseCtaLink: string
      homepageStatsEyebrow: string
      homepageStatsTitle: string
      homepageStats: Prisma.JsonValue
      homepageCtaTitle: string
      homepageCtaSubtitle: string
      homepageCtaPrimaryText: string
      homepageCtaPrimaryLink: string
      homepageCtaSecondaryText: string
      homepageCtaSecondaryLink: string
      maintenanceMode: boolean
      maintenanceMessage: string
      smtpHost: string
      smtpPort: number
      smtpUser: string
      smtpPass: string
      smtpFromName: string
      smtpUseTLS: boolean
      smtpUseSSL: boolean
      createdAt: Date
      updatedAt: Date
      companyLogoUrl: string
      companyName: string
      faviconUrl: string
      footerDescription: string
      footerEmail: string
      footerNote: string
      footerPhone: string
      insuranceTypes: Prisma.JsonValue
      legalLinks: Prisma.JsonValue | null
      servicesLinks: Prisma.JsonValue | null
      socialMedia: Prisma.JsonValue | null
      supportLinks: Prisma.JsonValue | null
      tradeRegisterNumber: string
    }, ExtArgs["result"]["settings"]>
    composites: {}
  }

  type SettingsGetPayload<S extends boolean | null | undefined | SettingsDefaultArgs> = $Result.GetResult<Prisma.$SettingsPayload, S>

  type SettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface SettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Settings'], meta: { name: 'Settings' } }
    /**
     * Find zero or one Settings that matches the filter.
     * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingsFindUniqueArgs>(args: SelectSubset<T, SettingsFindUniqueArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Settings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingsFindFirstArgs>(args?: SelectSubset<T, SettingsFindFirstArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingsFindManyArgs>(args?: SelectSubset<T, SettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Settings.
     * @param {SettingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
     */
    create<T extends SettingsCreateArgs>(args: SelectSubset<T, SettingsCreateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingsCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingsCreateManyArgs>(args?: SelectSubset<T, SettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingsCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingsWithIdOnly = await prisma.settings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Settings.
     * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
     */
    delete<T extends SettingsDeleteArgs>(args: SelectSubset<T, SettingsDeleteArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Settings.
     * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingsUpdateArgs>(args: SelectSubset<T, SettingsUpdateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingsDeleteManyArgs>(args?: SelectSubset<T, SettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingsUpdateManyArgs>(args: SelectSubset<T, SettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings and returns the data updated in the database.
     * @param {SettingsUpdateManyAndReturnArgs} args - Arguments to update many Settings.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Settings and only return the `id`
     * const settingsWithIdOnly = await prisma.settings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Settings.
     * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
     */
    upsert<T extends SettingsUpsertArgs>(args: SelectSubset<T, SettingsUpsertArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingsCountArgs>(
      args?: Subset<T, SettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingsGroupByArgs['orderBy'] }
        : { orderBy?: SettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Settings model
   */
  readonly fields: SettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Settings model
   */
  interface SettingsFieldRefs {
    readonly id: FieldRef<"Settings", 'String'>
    readonly leadIdFormat: FieldRef<"Settings", 'String'>
    readonly customFormat: FieldRef<"Settings", 'String'>
    readonly leadPrefix: FieldRef<"Settings", 'String'>
    readonly startingNumber: FieldRef<"Settings", 'Int'>
    readonly numberType: FieldRef<"Settings", 'String'>
    readonly defaultCurrency: FieldRef<"Settings", 'String'>
    readonly defaultAuctionDays: FieldRef<"Settings", 'Int'>
    readonly defaultMinIncrement: FieldRef<"Settings", 'Int'>
    readonly homepageHeroEyebrow: FieldRef<"Settings", 'String'>
    readonly homepageHeroTitle: FieldRef<"Settings", 'String'>
    readonly homepageHeroHighlight: FieldRef<"Settings", 'String'>
    readonly homepageHeroTitleSuffix: FieldRef<"Settings", 'String'>
    readonly homepageHeroSubtitle: FieldRef<"Settings", 'String'>
    readonly homepageHeroPrimaryCtaText: FieldRef<"Settings", 'String'>
    readonly homepageHeroPrimaryCtaLink: FieldRef<"Settings", 'String'>
    readonly homepageHeroSecondaryCtaText: FieldRef<"Settings", 'String'>
    readonly homepageHeroSecondaryCtaLink: FieldRef<"Settings", 'String'>
    readonly homepageFeatureHeading: FieldRef<"Settings", 'String'>
    readonly homepageFeatures: FieldRef<"Settings", 'Json'>
    readonly homepageShowcaseEyebrow: FieldRef<"Settings", 'String'>
    readonly homepageShowcaseTitle: FieldRef<"Settings", 'String'>
    readonly homepageShowcaseCtaText: FieldRef<"Settings", 'String'>
    readonly homepageShowcaseCtaLink: FieldRef<"Settings", 'String'>
    readonly homepageStatsEyebrow: FieldRef<"Settings", 'String'>
    readonly homepageStatsTitle: FieldRef<"Settings", 'String'>
    readonly homepageStats: FieldRef<"Settings", 'Json'>
    readonly homepageCtaTitle: FieldRef<"Settings", 'String'>
    readonly homepageCtaSubtitle: FieldRef<"Settings", 'String'>
    readonly homepageCtaPrimaryText: FieldRef<"Settings", 'String'>
    readonly homepageCtaPrimaryLink: FieldRef<"Settings", 'String'>
    readonly homepageCtaSecondaryText: FieldRef<"Settings", 'String'>
    readonly homepageCtaSecondaryLink: FieldRef<"Settings", 'String'>
    readonly maintenanceMode: FieldRef<"Settings", 'Boolean'>
    readonly maintenanceMessage: FieldRef<"Settings", 'String'>
    readonly smtpHost: FieldRef<"Settings", 'String'>
    readonly smtpPort: FieldRef<"Settings", 'Int'>
    readonly smtpUser: FieldRef<"Settings", 'String'>
    readonly smtpPass: FieldRef<"Settings", 'String'>
    readonly smtpFromName: FieldRef<"Settings", 'String'>
    readonly smtpUseTLS: FieldRef<"Settings", 'Boolean'>
    readonly smtpUseSSL: FieldRef<"Settings", 'Boolean'>
    readonly createdAt: FieldRef<"Settings", 'DateTime'>
    readonly updatedAt: FieldRef<"Settings", 'DateTime'>
    readonly companyLogoUrl: FieldRef<"Settings", 'String'>
    readonly companyName: FieldRef<"Settings", 'String'>
    readonly faviconUrl: FieldRef<"Settings", 'String'>
    readonly footerDescription: FieldRef<"Settings", 'String'>
    readonly footerEmail: FieldRef<"Settings", 'String'>
    readonly footerNote: FieldRef<"Settings", 'String'>
    readonly footerPhone: FieldRef<"Settings", 'String'>
    readonly insuranceTypes: FieldRef<"Settings", 'Json'>
    readonly legalLinks: FieldRef<"Settings", 'Json'>
    readonly servicesLinks: FieldRef<"Settings", 'Json'>
    readonly socialMedia: FieldRef<"Settings", 'Json'>
    readonly supportLinks: FieldRef<"Settings", 'Json'>
    readonly tradeRegisterNumber: FieldRef<"Settings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Settings findUnique
   */
  export type SettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findUniqueOrThrow
   */
  export type SettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findFirst
   */
  export type SettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findFirstOrThrow
   */
  export type SettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findMany
   */
  export type SettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings create
   */
  export type SettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a Settings.
     */
    data: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
  }

  /**
   * Settings createMany
   */
  export type SettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Settings createManyAndReturn
   */
  export type SettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Settings update
   */
  export type SettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a Settings.
     */
    data: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
    /**
     * Choose, which Settings to update.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings updateMany
   */
  export type SettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings updateManyAndReturn
   */
  export type SettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings upsert
   */
  export type SettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the Settings to update in case it exists.
     */
    where: SettingsWhereUniqueInput
    /**
     * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
     */
    create: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
    /**
     * In case the Settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
  }

  /**
   * Settings delete
   */
  export type SettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter which Settings to delete.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings deleteMany
   */
  export type SettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Settings without action
   */
  export type SettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
  }


  /**
   * Model UserType
   */

  export type AggregateUserType = {
    _count: UserTypeCountAggregateOutputType | null
    _min: UserTypeMinAggregateOutputType | null
    _max: UserTypeMaxAggregateOutputType | null
  }

  export type UserTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserType to aggregate.
     */
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     */
    orderBy?: UserTypeOrderByWithRelationInput | UserTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTypes
    **/
    _count?: true | UserTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTypeMaxAggregateInputType
  }

  export type GetUserTypeAggregateType<T extends UserTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserType[P]>
      : GetScalarType<T[P], AggregateUserType[P]>
  }




  export type UserTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTypeWhereInput
    orderBy?: UserTypeOrderByWithAggregationInput | UserTypeOrderByWithAggregationInput[]
    by: UserTypeScalarFieldEnum[] | UserTypeScalarFieldEnum
    having?: UserTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTypeCountAggregateInputType | true
    _min?: UserTypeMinAggregateInputType
    _max?: UserTypeMaxAggregateInputType
  }

  export type UserTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserTypeCountAggregateOutputType | null
    _min: UserTypeMinAggregateOutputType | null
    _max: UserTypeMaxAggregateOutputType | null
  }

  type GetUserTypeGroupByPayload<T extends UserTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTypeGroupByOutputType[P]>
            : GetScalarType<T[P], UserTypeGroupByOutputType[P]>
        }
      >
    >


  export type UserTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    leadTypePermissions?: boolean | UserType$leadTypePermissionsArgs<ExtArgs>
    users?: boolean | UserType$usersArgs<ExtArgs>
    permissions?: boolean | UserType$permissionsArgs<ExtArgs>
    notificationRolePermissions?: boolean | UserType$notificationRolePermissionsArgs<ExtArgs>
    _count?: boolean | UserTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userType"]>

  export type UserTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userType"]>

  export type UserTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userType"]>

  export type UserTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["userType"]>
  export type UserTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadTypePermissions?: boolean | UserType$leadTypePermissionsArgs<ExtArgs>
    users?: boolean | UserType$usersArgs<ExtArgs>
    permissions?: boolean | UserType$permissionsArgs<ExtArgs>
    notificationRolePermissions?: boolean | UserType$notificationRolePermissionsArgs<ExtArgs>
    _count?: boolean | UserTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserType"
    objects: {
      leadTypePermissions: Prisma.$LeadTypePermissionPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      permissions: Prisma.$UserTypePermissionPayload<ExtArgs>[]
      notificationRolePermissions: Prisma.$NotificationRolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userType"]>
    composites: {}
  }

  type UserTypeGetPayload<S extends boolean | null | undefined | UserTypeDefaultArgs> = $Result.GetResult<Prisma.$UserTypePayload, S>

  type UserTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTypeCountAggregateInputType | true
    }

  export interface UserTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserType'], meta: { name: 'UserType' } }
    /**
     * Find zero or one UserType that matches the filter.
     * @param {UserTypeFindUniqueArgs} args - Arguments to find a UserType
     * @example
     * // Get one UserType
     * const userType = await prisma.userType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTypeFindUniqueArgs>(args: SelectSubset<T, UserTypeFindUniqueArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTypeFindUniqueOrThrowArgs} args - Arguments to find a UserType
     * @example
     * // Get one UserType
     * const userType = await prisma.userType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeFindFirstArgs} args - Arguments to find a UserType
     * @example
     * // Get one UserType
     * const userType = await prisma.userType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTypeFindFirstArgs>(args?: SelectSubset<T, UserTypeFindFirstArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeFindFirstOrThrowArgs} args - Arguments to find a UserType
     * @example
     * // Get one UserType
     * const userType = await prisma.userType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTypes
     * const userTypes = await prisma.userType.findMany()
     * 
     * // Get first 10 UserTypes
     * const userTypes = await prisma.userType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTypeWithIdOnly = await prisma.userType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserTypeFindManyArgs>(args?: SelectSubset<T, UserTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserType.
     * @param {UserTypeCreateArgs} args - Arguments to create a UserType.
     * @example
     * // Create one UserType
     * const UserType = await prisma.userType.create({
     *   data: {
     *     // ... data to create a UserType
     *   }
     * })
     * 
     */
    create<T extends UserTypeCreateArgs>(args: SelectSubset<T, UserTypeCreateArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserTypes.
     * @param {UserTypeCreateManyArgs} args - Arguments to create many UserTypes.
     * @example
     * // Create many UserTypes
     * const userType = await prisma.userType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserTypeCreateManyArgs>(args?: SelectSubset<T, UserTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserTypes and returns the data saved in the database.
     * @param {UserTypeCreateManyAndReturnArgs} args - Arguments to create many UserTypes.
     * @example
     * // Create many UserTypes
     * const userType = await prisma.userType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserTypes and only return the `id`
     * const userTypeWithIdOnly = await prisma.userType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserType.
     * @param {UserTypeDeleteArgs} args - Arguments to delete one UserType.
     * @example
     * // Delete one UserType
     * const UserType = await prisma.userType.delete({
     *   where: {
     *     // ... filter to delete one UserType
     *   }
     * })
     * 
     */
    delete<T extends UserTypeDeleteArgs>(args: SelectSubset<T, UserTypeDeleteArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserType.
     * @param {UserTypeUpdateArgs} args - Arguments to update one UserType.
     * @example
     * // Update one UserType
     * const userType = await prisma.userType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserTypeUpdateArgs>(args: SelectSubset<T, UserTypeUpdateArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserTypes.
     * @param {UserTypeDeleteManyArgs} args - Arguments to filter UserTypes to delete.
     * @example
     * // Delete a few UserTypes
     * const { count } = await prisma.userType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserTypeDeleteManyArgs>(args?: SelectSubset<T, UserTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTypes
     * const userType = await prisma.userType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserTypeUpdateManyArgs>(args: SelectSubset<T, UserTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTypes and returns the data updated in the database.
     * @param {UserTypeUpdateManyAndReturnArgs} args - Arguments to update many UserTypes.
     * @example
     * // Update many UserTypes
     * const userType = await prisma.userType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserTypes and only return the `id`
     * const userTypeWithIdOnly = await prisma.userType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, UserTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserType.
     * @param {UserTypeUpsertArgs} args - Arguments to update or create a UserType.
     * @example
     * // Update or create a UserType
     * const userType = await prisma.userType.upsert({
     *   create: {
     *     // ... data to create a UserType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserType we want to update
     *   }
     * })
     */
    upsert<T extends UserTypeUpsertArgs>(args: SelectSubset<T, UserTypeUpsertArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeCountArgs} args - Arguments to filter UserTypes to count.
     * @example
     * // Count the number of UserTypes
     * const count = await prisma.userType.count({
     *   where: {
     *     // ... the filter for the UserTypes we want to count
     *   }
     * })
    **/
    count<T extends UserTypeCountArgs>(
      args?: Subset<T, UserTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTypeAggregateArgs>(args: Subset<T, UserTypeAggregateArgs>): Prisma.PrismaPromise<GetUserTypeAggregateType<T>>

    /**
     * Group by UserType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTypeGroupByArgs['orderBy'] }
        : { orderBy?: UserTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserType model
   */
  readonly fields: UserTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leadTypePermissions<T extends UserType$leadTypePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, UserType$leadTypePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends UserType$usersArgs<ExtArgs> = {}>(args?: Subset<T, UserType$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends UserType$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, UserType$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationRolePermissions<T extends UserType$notificationRolePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, UserType$notificationRolePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserType model
   */
  interface UserTypeFieldRefs {
    readonly id: FieldRef<"UserType", 'String'>
    readonly name: FieldRef<"UserType", 'String'>
    readonly description: FieldRef<"UserType", 'String'>
    readonly isActive: FieldRef<"UserType", 'Boolean'>
    readonly createdAt: FieldRef<"UserType", 'DateTime'>
    readonly updatedAt: FieldRef<"UserType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserType findUnique
   */
  export type UserTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserType to fetch.
     */
    where: UserTypeWhereUniqueInput
  }

  /**
   * UserType findUniqueOrThrow
   */
  export type UserTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserType to fetch.
     */
    where: UserTypeWhereUniqueInput
  }

  /**
   * UserType findFirst
   */
  export type UserTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserType to fetch.
     */
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     */
    orderBy?: UserTypeOrderByWithRelationInput | UserTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTypes.
     */
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTypes.
     */
    distinct?: UserTypeScalarFieldEnum | UserTypeScalarFieldEnum[]
  }

  /**
   * UserType findFirstOrThrow
   */
  export type UserTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserType to fetch.
     */
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     */
    orderBy?: UserTypeOrderByWithRelationInput | UserTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTypes.
     */
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTypes.
     */
    distinct?: UserTypeScalarFieldEnum | UserTypeScalarFieldEnum[]
  }

  /**
   * UserType findMany
   */
  export type UserTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * Filter, which UserTypes to fetch.
     */
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     */
    orderBy?: UserTypeOrderByWithRelationInput | UserTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTypes.
     */
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     */
    skip?: number
    distinct?: UserTypeScalarFieldEnum | UserTypeScalarFieldEnum[]
  }

  /**
   * UserType create
   */
  export type UserTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserType.
     */
    data: XOR<UserTypeCreateInput, UserTypeUncheckedCreateInput>
  }

  /**
   * UserType createMany
   */
  export type UserTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTypes.
     */
    data: UserTypeCreateManyInput | UserTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserType createManyAndReturn
   */
  export type UserTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * The data used to create many UserTypes.
     */
    data: UserTypeCreateManyInput | UserTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserType update
   */
  export type UserTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserType.
     */
    data: XOR<UserTypeUpdateInput, UserTypeUncheckedUpdateInput>
    /**
     * Choose, which UserType to update.
     */
    where: UserTypeWhereUniqueInput
  }

  /**
   * UserType updateMany
   */
  export type UserTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTypes.
     */
    data: XOR<UserTypeUpdateManyMutationInput, UserTypeUncheckedUpdateManyInput>
    /**
     * Filter which UserTypes to update
     */
    where?: UserTypeWhereInput
    /**
     * Limit how many UserTypes to update.
     */
    limit?: number
  }

  /**
   * UserType updateManyAndReturn
   */
  export type UserTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * The data used to update UserTypes.
     */
    data: XOR<UserTypeUpdateManyMutationInput, UserTypeUncheckedUpdateManyInput>
    /**
     * Filter which UserTypes to update
     */
    where?: UserTypeWhereInput
    /**
     * Limit how many UserTypes to update.
     */
    limit?: number
  }

  /**
   * UserType upsert
   */
  export type UserTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserType to update in case it exists.
     */
    where: UserTypeWhereUniqueInput
    /**
     * In case the UserType found by the `where` argument doesn't exist, create a new UserType with this data.
     */
    create: XOR<UserTypeCreateInput, UserTypeUncheckedCreateInput>
    /**
     * In case the UserType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTypeUpdateInput, UserTypeUncheckedUpdateInput>
  }

  /**
   * UserType delete
   */
  export type UserTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
    /**
     * Filter which UserType to delete.
     */
    where: UserTypeWhereUniqueInput
  }

  /**
   * UserType deleteMany
   */
  export type UserTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTypes to delete
     */
    where?: UserTypeWhereInput
    /**
     * Limit how many UserTypes to delete.
     */
    limit?: number
  }

  /**
   * UserType.leadTypePermissions
   */
  export type UserType$leadTypePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    where?: LeadTypePermissionWhereInput
    orderBy?: LeadTypePermissionOrderByWithRelationInput | LeadTypePermissionOrderByWithRelationInput[]
    cursor?: LeadTypePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadTypePermissionScalarFieldEnum | LeadTypePermissionScalarFieldEnum[]
  }

  /**
   * UserType.users
   */
  export type UserType$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * UserType.permissions
   */
  export type UserType$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    where?: UserTypePermissionWhereInput
    orderBy?: UserTypePermissionOrderByWithRelationInput | UserTypePermissionOrderByWithRelationInput[]
    cursor?: UserTypePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTypePermissionScalarFieldEnum | UserTypePermissionScalarFieldEnum[]
  }

  /**
   * UserType.notificationRolePermissions
   */
  export type UserType$notificationRolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    where?: NotificationRolePermissionWhereInput
    orderBy?: NotificationRolePermissionOrderByWithRelationInput | NotificationRolePermissionOrderByWithRelationInput[]
    cursor?: NotificationRolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationRolePermissionScalarFieldEnum | NotificationRolePermissionScalarFieldEnum[]
  }

  /**
   * UserType without action
   */
  export type UserTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserType
     */
    select?: UserTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserType
     */
    omit?: UserTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypeInclude<ExtArgs> | null
  }


  /**
   * Model Page
   */

  export type AggregatePage = {
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  export type PageMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PageMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Page to aggregate.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pages
    **/
    _count?: true | PageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageMaxAggregateInputType
  }

  export type GetPageAggregateType<T extends PageAggregateArgs> = {
        [P in keyof T & keyof AggregatePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePage[P]>
      : GetScalarType<T[P], AggregatePage[P]>
  }




  export type PageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageWhereInput
    orderBy?: PageOrderByWithAggregationInput | PageOrderByWithAggregationInput[]
    by: PageScalarFieldEnum[] | PageScalarFieldEnum
    having?: PageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageCountAggregateInputType | true
    _min?: PageMinAggregateInputType
    _max?: PageMaxAggregateInputType
  }

  export type PageGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  type GetPageGroupByPayload<T extends PageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageGroupByOutputType[P]>
            : GetScalarType<T[P], PageGroupByOutputType[P]>
        }
      >
    >


  export type PageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    permissions?: boolean | Page$permissionsArgs<ExtArgs>
    _count?: boolean | PageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["page"]>

  export type PageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["page"]>

  export type PageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["page"]>

  export type PageSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["page"]>
  export type PageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | Page$permissionsArgs<ExtArgs>
    _count?: boolean | PageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Page"
    objects: {
      permissions: Prisma.$UserTypePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["page"]>
    composites: {}
  }

  type PageGetPayload<S extends boolean | null | undefined | PageDefaultArgs> = $Result.GetResult<Prisma.$PagePayload, S>

  type PageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PageCountAggregateInputType | true
    }

  export interface PageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Page'], meta: { name: 'Page' } }
    /**
     * Find zero or one Page that matches the filter.
     * @param {PageFindUniqueArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageFindUniqueArgs>(args: SelectSubset<T, PageFindUniqueArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Page that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PageFindUniqueOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageFindUniqueOrThrowArgs>(args: SelectSubset<T, PageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Page that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageFindFirstArgs>(args?: SelectSubset<T, PageFindFirstArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Page that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageFindFirstOrThrowArgs>(args?: SelectSubset<T, PageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.page.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.page.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageWithIdOnly = await prisma.page.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageFindManyArgs>(args?: SelectSubset<T, PageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Page.
     * @param {PageCreateArgs} args - Arguments to create a Page.
     * @example
     * // Create one Page
     * const Page = await prisma.page.create({
     *   data: {
     *     // ... data to create a Page
     *   }
     * })
     * 
     */
    create<T extends PageCreateArgs>(args: SelectSubset<T, PageCreateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pages.
     * @param {PageCreateManyArgs} args - Arguments to create many Pages.
     * @example
     * // Create many Pages
     * const page = await prisma.page.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageCreateManyArgs>(args?: SelectSubset<T, PageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pages and returns the data saved in the database.
     * @param {PageCreateManyAndReturnArgs} args - Arguments to create many Pages.
     * @example
     * // Create many Pages
     * const page = await prisma.page.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pages and only return the `id`
     * const pageWithIdOnly = await prisma.page.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageCreateManyAndReturnArgs>(args?: SelectSubset<T, PageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Page.
     * @param {PageDeleteArgs} args - Arguments to delete one Page.
     * @example
     * // Delete one Page
     * const Page = await prisma.page.delete({
     *   where: {
     *     // ... filter to delete one Page
     *   }
     * })
     * 
     */
    delete<T extends PageDeleteArgs>(args: SelectSubset<T, PageDeleteArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Page.
     * @param {PageUpdateArgs} args - Arguments to update one Page.
     * @example
     * // Update one Page
     * const page = await prisma.page.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageUpdateArgs>(args: SelectSubset<T, PageUpdateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pages.
     * @param {PageDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.page.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageDeleteManyArgs>(args?: SelectSubset<T, PageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const page = await prisma.page.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageUpdateManyArgs>(args: SelectSubset<T, PageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages and returns the data updated in the database.
     * @param {PageUpdateManyAndReturnArgs} args - Arguments to update many Pages.
     * @example
     * // Update many Pages
     * const page = await prisma.page.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pages and only return the `id`
     * const pageWithIdOnly = await prisma.page.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PageUpdateManyAndReturnArgs>(args: SelectSubset<T, PageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Page.
     * @param {PageUpsertArgs} args - Arguments to update or create a Page.
     * @example
     * // Update or create a Page
     * const page = await prisma.page.upsert({
     *   create: {
     *     // ... data to create a Page
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Page we want to update
     *   }
     * })
     */
    upsert<T extends PageUpsertArgs>(args: SelectSubset<T, PageUpsertArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.page.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends PageCountArgs>(
      args?: Subset<T, PageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageAggregateArgs>(args: Subset<T, PageAggregateArgs>): Prisma.PrismaPromise<GetPageAggregateType<T>>

    /**
     * Group by Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageGroupByArgs['orderBy'] }
        : { orderBy?: PageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Page model
   */
  readonly fields: PageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Page.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends Page$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Page$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Page model
   */
  interface PageFieldRefs {
    readonly id: FieldRef<"Page", 'String'>
    readonly name: FieldRef<"Page", 'String'>
    readonly description: FieldRef<"Page", 'String'>
    readonly isActive: FieldRef<"Page", 'Boolean'>
    readonly createdAt: FieldRef<"Page", 'DateTime'>
    readonly updatedAt: FieldRef<"Page", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Page findUnique
   */
  export type PageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findUniqueOrThrow
   */
  export type PageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findFirst
   */
  export type PageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findFirstOrThrow
   */
  export type PageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findMany
   */
  export type PageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter, which Pages to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page create
   */
  export type PageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The data needed to create a Page.
     */
    data: XOR<PageCreateInput, PageUncheckedCreateInput>
  }

  /**
   * Page createMany
   */
  export type PageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pages.
     */
    data: PageCreateManyInput | PageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Page createManyAndReturn
   */
  export type PageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * The data used to create many Pages.
     */
    data: PageCreateManyInput | PageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Page update
   */
  export type PageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The data needed to update a Page.
     */
    data: XOR<PageUpdateInput, PageUncheckedUpdateInput>
    /**
     * Choose, which Page to update.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page updateMany
   */
  export type PageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pages.
     */
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyInput>
    /**
     * Filter which Pages to update
     */
    where?: PageWhereInput
    /**
     * Limit how many Pages to update.
     */
    limit?: number
  }

  /**
   * Page updateManyAndReturn
   */
  export type PageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * The data used to update Pages.
     */
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyInput>
    /**
     * Filter which Pages to update
     */
    where?: PageWhereInput
    /**
     * Limit how many Pages to update.
     */
    limit?: number
  }

  /**
   * Page upsert
   */
  export type PageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * The filter to search for the Page to update in case it exists.
     */
    where: PageWhereUniqueInput
    /**
     * In case the Page found by the `where` argument doesn't exist, create a new Page with this data.
     */
    create: XOR<PageCreateInput, PageUncheckedCreateInput>
    /**
     * In case the Page was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageUpdateInput, PageUncheckedUpdateInput>
  }

  /**
   * Page delete
   */
  export type PageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
    /**
     * Filter which Page to delete.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page deleteMany
   */
  export type PageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pages to delete
     */
    where?: PageWhereInput
    /**
     * Limit how many Pages to delete.
     */
    limit?: number
  }

  /**
   * Page.permissions
   */
  export type Page$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    where?: UserTypePermissionWhereInput
    orderBy?: UserTypePermissionOrderByWithRelationInput | UserTypePermissionOrderByWithRelationInput[]
    cursor?: UserTypePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserTypePermissionScalarFieldEnum | UserTypePermissionScalarFieldEnum[]
  }

  /**
   * Page without action
   */
  export type PageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Page
     */
    omit?: PageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageInclude<ExtArgs> | null
  }


  /**
   * Model UserTypePermission
   */

  export type AggregateUserTypePermission = {
    _count: UserTypePermissionCountAggregateOutputType | null
    _avg: UserTypePermissionAvgAggregateOutputType | null
    _sum: UserTypePermissionSumAggregateOutputType | null
    _min: UserTypePermissionMinAggregateOutputType | null
    _max: UserTypePermissionMaxAggregateOutputType | null
  }

  export type UserTypePermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type UserTypePermissionSumAggregateOutputType = {
    id: number | null
  }

  export type UserTypePermissionMinAggregateOutputType = {
    id: number | null
    userTypeId: string | null
    pageId: string | null
    hasAccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTypePermissionMaxAggregateOutputType = {
    id: number | null
    userTypeId: string | null
    pageId: string | null
    hasAccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTypePermissionCountAggregateOutputType = {
    id: number
    userTypeId: number
    pageId: number
    hasAccess: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTypePermissionAvgAggregateInputType = {
    id?: true
  }

  export type UserTypePermissionSumAggregateInputType = {
    id?: true
  }

  export type UserTypePermissionMinAggregateInputType = {
    id?: true
    userTypeId?: true
    pageId?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTypePermissionMaxAggregateInputType = {
    id?: true
    userTypeId?: true
    pageId?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTypePermissionCountAggregateInputType = {
    id?: true
    userTypeId?: true
    pageId?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTypePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTypePermission to aggregate.
     */
    where?: UserTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypePermissions to fetch.
     */
    orderBy?: UserTypePermissionOrderByWithRelationInput | UserTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTypePermissions
    **/
    _count?: true | UserTypePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTypePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTypePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTypePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTypePermissionMaxAggregateInputType
  }

  export type GetUserTypePermissionAggregateType<T extends UserTypePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTypePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTypePermission[P]>
      : GetScalarType<T[P], AggregateUserTypePermission[P]>
  }




  export type UserTypePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserTypePermissionWhereInput
    orderBy?: UserTypePermissionOrderByWithAggregationInput | UserTypePermissionOrderByWithAggregationInput[]
    by: UserTypePermissionScalarFieldEnum[] | UserTypePermissionScalarFieldEnum
    having?: UserTypePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTypePermissionCountAggregateInputType | true
    _avg?: UserTypePermissionAvgAggregateInputType
    _sum?: UserTypePermissionSumAggregateInputType
    _min?: UserTypePermissionMinAggregateInputType
    _max?: UserTypePermissionMaxAggregateInputType
  }

  export type UserTypePermissionGroupByOutputType = {
    id: number
    userTypeId: string
    pageId: string
    hasAccess: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserTypePermissionCountAggregateOutputType | null
    _avg: UserTypePermissionAvgAggregateOutputType | null
    _sum: UserTypePermissionSumAggregateOutputType | null
    _min: UserTypePermissionMinAggregateOutputType | null
    _max: UserTypePermissionMaxAggregateOutputType | null
  }

  type GetUserTypePermissionGroupByPayload<T extends UserTypePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserTypePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTypePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTypePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserTypePermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserTypePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    pageId?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    page?: boolean | PageDefaultArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTypePermission"]>

  export type UserTypePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    pageId?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    page?: boolean | PageDefaultArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTypePermission"]>

  export type UserTypePermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    pageId?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    page?: boolean | PageDefaultArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userTypePermission"]>

  export type UserTypePermissionSelectScalar = {
    id?: boolean
    userTypeId?: boolean
    pageId?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTypePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userTypeId" | "pageId" | "hasAccess" | "createdAt" | "updatedAt", ExtArgs["result"]["userTypePermission"]>
  export type UserTypePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    page?: boolean | PageDefaultArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }
  export type UserTypePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    page?: boolean | PageDefaultArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }
  export type UserTypePermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    page?: boolean | PageDefaultArgs<ExtArgs>
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }

  export type $UserTypePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserTypePermission"
    objects: {
      page: Prisma.$PagePayload<ExtArgs>
      userType: Prisma.$UserTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userTypeId: string
      pageId: string
      hasAccess: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userTypePermission"]>
    composites: {}
  }

  type UserTypePermissionGetPayload<S extends boolean | null | undefined | UserTypePermissionDefaultArgs> = $Result.GetResult<Prisma.$UserTypePermissionPayload, S>

  type UserTypePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserTypePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserTypePermissionCountAggregateInputType | true
    }

  export interface UserTypePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTypePermission'], meta: { name: 'UserTypePermission' } }
    /**
     * Find zero or one UserTypePermission that matches the filter.
     * @param {UserTypePermissionFindUniqueArgs} args - Arguments to find a UserTypePermission
     * @example
     * // Get one UserTypePermission
     * const userTypePermission = await prisma.userTypePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserTypePermissionFindUniqueArgs>(args: SelectSubset<T, UserTypePermissionFindUniqueArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserTypePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserTypePermissionFindUniqueOrThrowArgs} args - Arguments to find a UserTypePermission
     * @example
     * // Get one UserTypePermission
     * const userTypePermission = await prisma.userTypePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserTypePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserTypePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTypePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionFindFirstArgs} args - Arguments to find a UserTypePermission
     * @example
     * // Get one UserTypePermission
     * const userTypePermission = await prisma.userTypePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserTypePermissionFindFirstArgs>(args?: SelectSubset<T, UserTypePermissionFindFirstArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserTypePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionFindFirstOrThrowArgs} args - Arguments to find a UserTypePermission
     * @example
     * // Get one UserTypePermission
     * const userTypePermission = await prisma.userTypePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserTypePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserTypePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserTypePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTypePermissions
     * const userTypePermissions = await prisma.userTypePermission.findMany()
     * 
     * // Get first 10 UserTypePermissions
     * const userTypePermissions = await prisma.userTypePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTypePermissionWithIdOnly = await prisma.userTypePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserTypePermissionFindManyArgs>(args?: SelectSubset<T, UserTypePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserTypePermission.
     * @param {UserTypePermissionCreateArgs} args - Arguments to create a UserTypePermission.
     * @example
     * // Create one UserTypePermission
     * const UserTypePermission = await prisma.userTypePermission.create({
     *   data: {
     *     // ... data to create a UserTypePermission
     *   }
     * })
     * 
     */
    create<T extends UserTypePermissionCreateArgs>(args: SelectSubset<T, UserTypePermissionCreateArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserTypePermissions.
     * @param {UserTypePermissionCreateManyArgs} args - Arguments to create many UserTypePermissions.
     * @example
     * // Create many UserTypePermissions
     * const userTypePermission = await prisma.userTypePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserTypePermissionCreateManyArgs>(args?: SelectSubset<T, UserTypePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserTypePermissions and returns the data saved in the database.
     * @param {UserTypePermissionCreateManyAndReturnArgs} args - Arguments to create many UserTypePermissions.
     * @example
     * // Create many UserTypePermissions
     * const userTypePermission = await prisma.userTypePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserTypePermissions and only return the `id`
     * const userTypePermissionWithIdOnly = await prisma.userTypePermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserTypePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserTypePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserTypePermission.
     * @param {UserTypePermissionDeleteArgs} args - Arguments to delete one UserTypePermission.
     * @example
     * // Delete one UserTypePermission
     * const UserTypePermission = await prisma.userTypePermission.delete({
     *   where: {
     *     // ... filter to delete one UserTypePermission
     *   }
     * })
     * 
     */
    delete<T extends UserTypePermissionDeleteArgs>(args: SelectSubset<T, UserTypePermissionDeleteArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserTypePermission.
     * @param {UserTypePermissionUpdateArgs} args - Arguments to update one UserTypePermission.
     * @example
     * // Update one UserTypePermission
     * const userTypePermission = await prisma.userTypePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserTypePermissionUpdateArgs>(args: SelectSubset<T, UserTypePermissionUpdateArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserTypePermissions.
     * @param {UserTypePermissionDeleteManyArgs} args - Arguments to filter UserTypePermissions to delete.
     * @example
     * // Delete a few UserTypePermissions
     * const { count } = await prisma.userTypePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserTypePermissionDeleteManyArgs>(args?: SelectSubset<T, UserTypePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTypePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTypePermissions
     * const userTypePermission = await prisma.userTypePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserTypePermissionUpdateManyArgs>(args: SelectSubset<T, UserTypePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTypePermissions and returns the data updated in the database.
     * @param {UserTypePermissionUpdateManyAndReturnArgs} args - Arguments to update many UserTypePermissions.
     * @example
     * // Update many UserTypePermissions
     * const userTypePermission = await prisma.userTypePermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserTypePermissions and only return the `id`
     * const userTypePermissionWithIdOnly = await prisma.userTypePermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserTypePermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserTypePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserTypePermission.
     * @param {UserTypePermissionUpsertArgs} args - Arguments to update or create a UserTypePermission.
     * @example
     * // Update or create a UserTypePermission
     * const userTypePermission = await prisma.userTypePermission.upsert({
     *   create: {
     *     // ... data to create a UserTypePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTypePermission we want to update
     *   }
     * })
     */
    upsert<T extends UserTypePermissionUpsertArgs>(args: SelectSubset<T, UserTypePermissionUpsertArgs<ExtArgs>>): Prisma__UserTypePermissionClient<$Result.GetResult<Prisma.$UserTypePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserTypePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionCountArgs} args - Arguments to filter UserTypePermissions to count.
     * @example
     * // Count the number of UserTypePermissions
     * const count = await prisma.userTypePermission.count({
     *   where: {
     *     // ... the filter for the UserTypePermissions we want to count
     *   }
     * })
    **/
    count<T extends UserTypePermissionCountArgs>(
      args?: Subset<T, UserTypePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTypePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTypePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTypePermissionAggregateArgs>(args: Subset<T, UserTypePermissionAggregateArgs>): Prisma.PrismaPromise<GetUserTypePermissionAggregateType<T>>

    /**
     * Group by UserTypePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTypePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTypePermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserTypePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTypePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTypePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserTypePermission model
   */
  readonly fields: UserTypePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTypePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserTypePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    page<T extends PageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PageDefaultArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    userType<T extends UserTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserTypeDefaultArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserTypePermission model
   */
  interface UserTypePermissionFieldRefs {
    readonly id: FieldRef<"UserTypePermission", 'Int'>
    readonly userTypeId: FieldRef<"UserTypePermission", 'String'>
    readonly pageId: FieldRef<"UserTypePermission", 'String'>
    readonly hasAccess: FieldRef<"UserTypePermission", 'Boolean'>
    readonly createdAt: FieldRef<"UserTypePermission", 'DateTime'>
    readonly updatedAt: FieldRef<"UserTypePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserTypePermission findUnique
   */
  export type UserTypePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserTypePermission to fetch.
     */
    where: UserTypePermissionWhereUniqueInput
  }

  /**
   * UserTypePermission findUniqueOrThrow
   */
  export type UserTypePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserTypePermission to fetch.
     */
    where: UserTypePermissionWhereUniqueInput
  }

  /**
   * UserTypePermission findFirst
   */
  export type UserTypePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserTypePermission to fetch.
     */
    where?: UserTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypePermissions to fetch.
     */
    orderBy?: UserTypePermissionOrderByWithRelationInput | UserTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTypePermissions.
     */
    cursor?: UserTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTypePermissions.
     */
    distinct?: UserTypePermissionScalarFieldEnum | UserTypePermissionScalarFieldEnum[]
  }

  /**
   * UserTypePermission findFirstOrThrow
   */
  export type UserTypePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserTypePermission to fetch.
     */
    where?: UserTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypePermissions to fetch.
     */
    orderBy?: UserTypePermissionOrderByWithRelationInput | UserTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTypePermissions.
     */
    cursor?: UserTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTypePermissions.
     */
    distinct?: UserTypePermissionScalarFieldEnum | UserTypePermissionScalarFieldEnum[]
  }

  /**
   * UserTypePermission findMany
   */
  export type UserTypePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserTypePermissions to fetch.
     */
    where?: UserTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypePermissions to fetch.
     */
    orderBy?: UserTypePermissionOrderByWithRelationInput | UserTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTypePermissions.
     */
    cursor?: UserTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypePermissions.
     */
    skip?: number
    distinct?: UserTypePermissionScalarFieldEnum | UserTypePermissionScalarFieldEnum[]
  }

  /**
   * UserTypePermission create
   */
  export type UserTypePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTypePermission.
     */
    data: XOR<UserTypePermissionCreateInput, UserTypePermissionUncheckedCreateInput>
  }

  /**
   * UserTypePermission createMany
   */
  export type UserTypePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTypePermissions.
     */
    data: UserTypePermissionCreateManyInput | UserTypePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserTypePermission createManyAndReturn
   */
  export type UserTypePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * The data used to create many UserTypePermissions.
     */
    data: UserTypePermissionCreateManyInput | UserTypePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserTypePermission update
   */
  export type UserTypePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTypePermission.
     */
    data: XOR<UserTypePermissionUpdateInput, UserTypePermissionUncheckedUpdateInput>
    /**
     * Choose, which UserTypePermission to update.
     */
    where: UserTypePermissionWhereUniqueInput
  }

  /**
   * UserTypePermission updateMany
   */
  export type UserTypePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTypePermissions.
     */
    data: XOR<UserTypePermissionUpdateManyMutationInput, UserTypePermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserTypePermissions to update
     */
    where?: UserTypePermissionWhereInput
    /**
     * Limit how many UserTypePermissions to update.
     */
    limit?: number
  }

  /**
   * UserTypePermission updateManyAndReturn
   */
  export type UserTypePermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * The data used to update UserTypePermissions.
     */
    data: XOR<UserTypePermissionUpdateManyMutationInput, UserTypePermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserTypePermissions to update
     */
    where?: UserTypePermissionWhereInput
    /**
     * Limit how many UserTypePermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserTypePermission upsert
   */
  export type UserTypePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTypePermission to update in case it exists.
     */
    where: UserTypePermissionWhereUniqueInput
    /**
     * In case the UserTypePermission found by the `where` argument doesn't exist, create a new UserTypePermission with this data.
     */
    create: XOR<UserTypePermissionCreateInput, UserTypePermissionUncheckedCreateInput>
    /**
     * In case the UserTypePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTypePermissionUpdateInput, UserTypePermissionUncheckedUpdateInput>
  }

  /**
   * UserTypePermission delete
   */
  export type UserTypePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
    /**
     * Filter which UserTypePermission to delete.
     */
    where: UserTypePermissionWhereUniqueInput
  }

  /**
   * UserTypePermission deleteMany
   */
  export type UserTypePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTypePermissions to delete
     */
    where?: UserTypePermissionWhereInput
    /**
     * Limit how many UserTypePermissions to delete.
     */
    limit?: number
  }

  /**
   * UserTypePermission without action
   */
  export type UserTypePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTypePermission
     */
    select?: UserTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserTypePermission
     */
    omit?: UserTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserTypePermissionInclude<ExtArgs> | null
  }


  /**
   * Model LeadTypePermission
   */

  export type AggregateLeadTypePermission = {
    _count: LeadTypePermissionCountAggregateOutputType | null
    _avg: LeadTypePermissionAvgAggregateOutputType | null
    _sum: LeadTypePermissionSumAggregateOutputType | null
    _min: LeadTypePermissionMinAggregateOutputType | null
    _max: LeadTypePermissionMaxAggregateOutputType | null
  }

  export type LeadTypePermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type LeadTypePermissionSumAggregateOutputType = {
    id: number | null
  }

  export type LeadTypePermissionMinAggregateOutputType = {
    id: number | null
    userTypeId: string | null
    leadType: string | null
    hasAccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeadTypePermissionMaxAggregateOutputType = {
    id: number | null
    userTypeId: string | null
    leadType: string | null
    hasAccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeadTypePermissionCountAggregateOutputType = {
    id: number
    userTypeId: number
    leadType: number
    hasAccess: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LeadTypePermissionAvgAggregateInputType = {
    id?: true
  }

  export type LeadTypePermissionSumAggregateInputType = {
    id?: true
  }

  export type LeadTypePermissionMinAggregateInputType = {
    id?: true
    userTypeId?: true
    leadType?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeadTypePermissionMaxAggregateInputType = {
    id?: true
    userTypeId?: true
    leadType?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeadTypePermissionCountAggregateInputType = {
    id?: true
    userTypeId?: true
    leadType?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LeadTypePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadTypePermission to aggregate.
     */
    where?: LeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadTypePermissions to fetch.
     */
    orderBy?: LeadTypePermissionOrderByWithRelationInput | LeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadTypePermissions
    **/
    _count?: true | LeadTypePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadTypePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadTypePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadTypePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadTypePermissionMaxAggregateInputType
  }

  export type GetLeadTypePermissionAggregateType<T extends LeadTypePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadTypePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadTypePermission[P]>
      : GetScalarType<T[P], AggregateLeadTypePermission[P]>
  }




  export type LeadTypePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadTypePermissionWhereInput
    orderBy?: LeadTypePermissionOrderByWithAggregationInput | LeadTypePermissionOrderByWithAggregationInput[]
    by: LeadTypePermissionScalarFieldEnum[] | LeadTypePermissionScalarFieldEnum
    having?: LeadTypePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadTypePermissionCountAggregateInputType | true
    _avg?: LeadTypePermissionAvgAggregateInputType
    _sum?: LeadTypePermissionSumAggregateInputType
    _min?: LeadTypePermissionMinAggregateInputType
    _max?: LeadTypePermissionMaxAggregateInputType
  }

  export type LeadTypePermissionGroupByOutputType = {
    id: number
    userTypeId: string
    leadType: string
    hasAccess: boolean
    createdAt: Date
    updatedAt: Date
    _count: LeadTypePermissionCountAggregateOutputType | null
    _avg: LeadTypePermissionAvgAggregateOutputType | null
    _sum: LeadTypePermissionSumAggregateOutputType | null
    _min: LeadTypePermissionMinAggregateOutputType | null
    _max: LeadTypePermissionMaxAggregateOutputType | null
  }

  type GetLeadTypePermissionGroupByPayload<T extends LeadTypePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadTypePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadTypePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadTypePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], LeadTypePermissionGroupByOutputType[P]>
        }
      >
    >


  export type LeadTypePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadTypePermission"]>

  export type LeadTypePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadTypePermission"]>

  export type LeadTypePermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadTypePermission"]>

  export type LeadTypePermissionSelectScalar = {
    id?: boolean
    userTypeId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LeadTypePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userTypeId" | "leadType" | "hasAccess" | "createdAt" | "updatedAt", ExtArgs["result"]["leadTypePermission"]>
  export type LeadTypePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }
  export type LeadTypePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }
  export type LeadTypePermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
  }

  export type $LeadTypePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadTypePermission"
    objects: {
      userType: Prisma.$UserTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userTypeId: string
      leadType: string
      hasAccess: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["leadTypePermission"]>
    composites: {}
  }

  type LeadTypePermissionGetPayload<S extends boolean | null | undefined | LeadTypePermissionDefaultArgs> = $Result.GetResult<Prisma.$LeadTypePermissionPayload, S>

  type LeadTypePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadTypePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadTypePermissionCountAggregateInputType | true
    }

  export interface LeadTypePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadTypePermission'], meta: { name: 'LeadTypePermission' } }
    /**
     * Find zero or one LeadTypePermission that matches the filter.
     * @param {LeadTypePermissionFindUniqueArgs} args - Arguments to find a LeadTypePermission
     * @example
     * // Get one LeadTypePermission
     * const leadTypePermission = await prisma.leadTypePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadTypePermissionFindUniqueArgs>(args: SelectSubset<T, LeadTypePermissionFindUniqueArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeadTypePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadTypePermissionFindUniqueOrThrowArgs} args - Arguments to find a LeadTypePermission
     * @example
     * // Get one LeadTypePermission
     * const leadTypePermission = await prisma.leadTypePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadTypePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadTypePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadTypePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionFindFirstArgs} args - Arguments to find a LeadTypePermission
     * @example
     * // Get one LeadTypePermission
     * const leadTypePermission = await prisma.leadTypePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadTypePermissionFindFirstArgs>(args?: SelectSubset<T, LeadTypePermissionFindFirstArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeadTypePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionFindFirstOrThrowArgs} args - Arguments to find a LeadTypePermission
     * @example
     * // Get one LeadTypePermission
     * const leadTypePermission = await prisma.leadTypePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadTypePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadTypePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeadTypePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadTypePermissions
     * const leadTypePermissions = await prisma.leadTypePermission.findMany()
     * 
     * // Get first 10 LeadTypePermissions
     * const leadTypePermissions = await prisma.leadTypePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadTypePermissionWithIdOnly = await prisma.leadTypePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadTypePermissionFindManyArgs>(args?: SelectSubset<T, LeadTypePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeadTypePermission.
     * @param {LeadTypePermissionCreateArgs} args - Arguments to create a LeadTypePermission.
     * @example
     * // Create one LeadTypePermission
     * const LeadTypePermission = await prisma.leadTypePermission.create({
     *   data: {
     *     // ... data to create a LeadTypePermission
     *   }
     * })
     * 
     */
    create<T extends LeadTypePermissionCreateArgs>(args: SelectSubset<T, LeadTypePermissionCreateArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeadTypePermissions.
     * @param {LeadTypePermissionCreateManyArgs} args - Arguments to create many LeadTypePermissions.
     * @example
     * // Create many LeadTypePermissions
     * const leadTypePermission = await prisma.leadTypePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadTypePermissionCreateManyArgs>(args?: SelectSubset<T, LeadTypePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadTypePermissions and returns the data saved in the database.
     * @param {LeadTypePermissionCreateManyAndReturnArgs} args - Arguments to create many LeadTypePermissions.
     * @example
     * // Create many LeadTypePermissions
     * const leadTypePermission = await prisma.leadTypePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadTypePermissions and only return the `id`
     * const leadTypePermissionWithIdOnly = await prisma.leadTypePermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadTypePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadTypePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeadTypePermission.
     * @param {LeadTypePermissionDeleteArgs} args - Arguments to delete one LeadTypePermission.
     * @example
     * // Delete one LeadTypePermission
     * const LeadTypePermission = await prisma.leadTypePermission.delete({
     *   where: {
     *     // ... filter to delete one LeadTypePermission
     *   }
     * })
     * 
     */
    delete<T extends LeadTypePermissionDeleteArgs>(args: SelectSubset<T, LeadTypePermissionDeleteArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeadTypePermission.
     * @param {LeadTypePermissionUpdateArgs} args - Arguments to update one LeadTypePermission.
     * @example
     * // Update one LeadTypePermission
     * const leadTypePermission = await prisma.leadTypePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadTypePermissionUpdateArgs>(args: SelectSubset<T, LeadTypePermissionUpdateArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeadTypePermissions.
     * @param {LeadTypePermissionDeleteManyArgs} args - Arguments to filter LeadTypePermissions to delete.
     * @example
     * // Delete a few LeadTypePermissions
     * const { count } = await prisma.leadTypePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadTypePermissionDeleteManyArgs>(args?: SelectSubset<T, LeadTypePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadTypePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadTypePermissions
     * const leadTypePermission = await prisma.leadTypePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadTypePermissionUpdateManyArgs>(args: SelectSubset<T, LeadTypePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadTypePermissions and returns the data updated in the database.
     * @param {LeadTypePermissionUpdateManyAndReturnArgs} args - Arguments to update many LeadTypePermissions.
     * @example
     * // Update many LeadTypePermissions
     * const leadTypePermission = await prisma.leadTypePermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeadTypePermissions and only return the `id`
     * const leadTypePermissionWithIdOnly = await prisma.leadTypePermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadTypePermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadTypePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeadTypePermission.
     * @param {LeadTypePermissionUpsertArgs} args - Arguments to update or create a LeadTypePermission.
     * @example
     * // Update or create a LeadTypePermission
     * const leadTypePermission = await prisma.leadTypePermission.upsert({
     *   create: {
     *     // ... data to create a LeadTypePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadTypePermission we want to update
     *   }
     * })
     */
    upsert<T extends LeadTypePermissionUpsertArgs>(args: SelectSubset<T, LeadTypePermissionUpsertArgs<ExtArgs>>): Prisma__LeadTypePermissionClient<$Result.GetResult<Prisma.$LeadTypePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeadTypePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionCountArgs} args - Arguments to filter LeadTypePermissions to count.
     * @example
     * // Count the number of LeadTypePermissions
     * const count = await prisma.leadTypePermission.count({
     *   where: {
     *     // ... the filter for the LeadTypePermissions we want to count
     *   }
     * })
    **/
    count<T extends LeadTypePermissionCountArgs>(
      args?: Subset<T, LeadTypePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadTypePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadTypePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadTypePermissionAggregateArgs>(args: Subset<T, LeadTypePermissionAggregateArgs>): Prisma.PrismaPromise<GetLeadTypePermissionAggregateType<T>>

    /**
     * Group by LeadTypePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadTypePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadTypePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadTypePermissionGroupByArgs['orderBy'] }
        : { orderBy?: LeadTypePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadTypePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadTypePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadTypePermission model
   */
  readonly fields: LeadTypePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadTypePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadTypePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userType<T extends UserTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserTypeDefaultArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadTypePermission model
   */
  interface LeadTypePermissionFieldRefs {
    readonly id: FieldRef<"LeadTypePermission", 'Int'>
    readonly userTypeId: FieldRef<"LeadTypePermission", 'String'>
    readonly leadType: FieldRef<"LeadTypePermission", 'String'>
    readonly hasAccess: FieldRef<"LeadTypePermission", 'Boolean'>
    readonly createdAt: FieldRef<"LeadTypePermission", 'DateTime'>
    readonly updatedAt: FieldRef<"LeadTypePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeadTypePermission findUnique
   */
  export type LeadTypePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which LeadTypePermission to fetch.
     */
    where: LeadTypePermissionWhereUniqueInput
  }

  /**
   * LeadTypePermission findUniqueOrThrow
   */
  export type LeadTypePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which LeadTypePermission to fetch.
     */
    where: LeadTypePermissionWhereUniqueInput
  }

  /**
   * LeadTypePermission findFirst
   */
  export type LeadTypePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which LeadTypePermission to fetch.
     */
    where?: LeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadTypePermissions to fetch.
     */
    orderBy?: LeadTypePermissionOrderByWithRelationInput | LeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadTypePermissions.
     */
    cursor?: LeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadTypePermissions.
     */
    distinct?: LeadTypePermissionScalarFieldEnum | LeadTypePermissionScalarFieldEnum[]
  }

  /**
   * LeadTypePermission findFirstOrThrow
   */
  export type LeadTypePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which LeadTypePermission to fetch.
     */
    where?: LeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadTypePermissions to fetch.
     */
    orderBy?: LeadTypePermissionOrderByWithRelationInput | LeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadTypePermissions.
     */
    cursor?: LeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadTypePermissions.
     */
    distinct?: LeadTypePermissionScalarFieldEnum | LeadTypePermissionScalarFieldEnum[]
  }

  /**
   * LeadTypePermission findMany
   */
  export type LeadTypePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which LeadTypePermissions to fetch.
     */
    where?: LeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadTypePermissions to fetch.
     */
    orderBy?: LeadTypePermissionOrderByWithRelationInput | LeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadTypePermissions.
     */
    cursor?: LeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadTypePermissions.
     */
    skip?: number
    distinct?: LeadTypePermissionScalarFieldEnum | LeadTypePermissionScalarFieldEnum[]
  }

  /**
   * LeadTypePermission create
   */
  export type LeadTypePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadTypePermission.
     */
    data: XOR<LeadTypePermissionCreateInput, LeadTypePermissionUncheckedCreateInput>
  }

  /**
   * LeadTypePermission createMany
   */
  export type LeadTypePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadTypePermissions.
     */
    data: LeadTypePermissionCreateManyInput | LeadTypePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadTypePermission createManyAndReturn
   */
  export type LeadTypePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * The data used to create many LeadTypePermissions.
     */
    data: LeadTypePermissionCreateManyInput | LeadTypePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadTypePermission update
   */
  export type LeadTypePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadTypePermission.
     */
    data: XOR<LeadTypePermissionUpdateInput, LeadTypePermissionUncheckedUpdateInput>
    /**
     * Choose, which LeadTypePermission to update.
     */
    where: LeadTypePermissionWhereUniqueInput
  }

  /**
   * LeadTypePermission updateMany
   */
  export type LeadTypePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadTypePermissions.
     */
    data: XOR<LeadTypePermissionUpdateManyMutationInput, LeadTypePermissionUncheckedUpdateManyInput>
    /**
     * Filter which LeadTypePermissions to update
     */
    where?: LeadTypePermissionWhereInput
    /**
     * Limit how many LeadTypePermissions to update.
     */
    limit?: number
  }

  /**
   * LeadTypePermission updateManyAndReturn
   */
  export type LeadTypePermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * The data used to update LeadTypePermissions.
     */
    data: XOR<LeadTypePermissionUpdateManyMutationInput, LeadTypePermissionUncheckedUpdateManyInput>
    /**
     * Filter which LeadTypePermissions to update
     */
    where?: LeadTypePermissionWhereInput
    /**
     * Limit how many LeadTypePermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadTypePermission upsert
   */
  export type LeadTypePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadTypePermission to update in case it exists.
     */
    where: LeadTypePermissionWhereUniqueInput
    /**
     * In case the LeadTypePermission found by the `where` argument doesn't exist, create a new LeadTypePermission with this data.
     */
    create: XOR<LeadTypePermissionCreateInput, LeadTypePermissionUncheckedCreateInput>
    /**
     * In case the LeadTypePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadTypePermissionUpdateInput, LeadTypePermissionUncheckedUpdateInput>
  }

  /**
   * LeadTypePermission delete
   */
  export type LeadTypePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter which LeadTypePermission to delete.
     */
    where: LeadTypePermissionWhereUniqueInput
  }

  /**
   * LeadTypePermission deleteMany
   */
  export type LeadTypePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadTypePermissions to delete
     */
    where?: LeadTypePermissionWhereInput
    /**
     * Limit how many LeadTypePermissions to delete.
     */
    limit?: number
  }

  /**
   * LeadTypePermission without action
   */
  export type LeadTypePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadTypePermission
     */
    select?: LeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeadTypePermission
     */
    omit?: LeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadTypePermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserLeadTypePermission
   */

  export type AggregateUserLeadTypePermission = {
    _count: UserLeadTypePermissionCountAggregateOutputType | null
    _avg: UserLeadTypePermissionAvgAggregateOutputType | null
    _sum: UserLeadTypePermissionSumAggregateOutputType | null
    _min: UserLeadTypePermissionMinAggregateOutputType | null
    _max: UserLeadTypePermissionMaxAggregateOutputType | null
  }

  export type UserLeadTypePermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type UserLeadTypePermissionSumAggregateOutputType = {
    id: number | null
  }

  export type UserLeadTypePermissionMinAggregateOutputType = {
    id: number | null
    userId: string | null
    leadType: string | null
    hasAccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserLeadTypePermissionMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    leadType: string | null
    hasAccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserLeadTypePermissionCountAggregateOutputType = {
    id: number
    userId: number
    leadType: number
    hasAccess: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserLeadTypePermissionAvgAggregateInputType = {
    id?: true
  }

  export type UserLeadTypePermissionSumAggregateInputType = {
    id?: true
  }

  export type UserLeadTypePermissionMinAggregateInputType = {
    id?: true
    userId?: true
    leadType?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserLeadTypePermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    leadType?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserLeadTypePermissionCountAggregateInputType = {
    id?: true
    userId?: true
    leadType?: true
    hasAccess?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserLeadTypePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLeadTypePermission to aggregate.
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeadTypePermissions to fetch.
     */
    orderBy?: UserLeadTypePermissionOrderByWithRelationInput | UserLeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeadTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLeadTypePermissions
    **/
    _count?: true | UserLeadTypePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLeadTypePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLeadTypePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLeadTypePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLeadTypePermissionMaxAggregateInputType
  }

  export type GetUserLeadTypePermissionAggregateType<T extends UserLeadTypePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLeadTypePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLeadTypePermission[P]>
      : GetScalarType<T[P], AggregateUserLeadTypePermission[P]>
  }




  export type UserLeadTypePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLeadTypePermissionWhereInput
    orderBy?: UserLeadTypePermissionOrderByWithAggregationInput | UserLeadTypePermissionOrderByWithAggregationInput[]
    by: UserLeadTypePermissionScalarFieldEnum[] | UserLeadTypePermissionScalarFieldEnum
    having?: UserLeadTypePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLeadTypePermissionCountAggregateInputType | true
    _avg?: UserLeadTypePermissionAvgAggregateInputType
    _sum?: UserLeadTypePermissionSumAggregateInputType
    _min?: UserLeadTypePermissionMinAggregateInputType
    _max?: UserLeadTypePermissionMaxAggregateInputType
  }

  export type UserLeadTypePermissionGroupByOutputType = {
    id: number
    userId: string
    leadType: string
    hasAccess: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserLeadTypePermissionCountAggregateOutputType | null
    _avg: UserLeadTypePermissionAvgAggregateOutputType | null
    _sum: UserLeadTypePermissionSumAggregateOutputType | null
    _min: UserLeadTypePermissionMinAggregateOutputType | null
    _max: UserLeadTypePermissionMaxAggregateOutputType | null
  }

  type GetUserLeadTypePermissionGroupByPayload<T extends UserLeadTypePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLeadTypePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLeadTypePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLeadTypePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserLeadTypePermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserLeadTypePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeadTypePermission"]>

  export type UserLeadTypePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeadTypePermission"]>

  export type UserLeadTypePermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLeadTypePermission"]>

  export type UserLeadTypePermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    leadType?: boolean
    hasAccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserLeadTypePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "leadType" | "hasAccess" | "createdAt" | "updatedAt", ExtArgs["result"]["userLeadTypePermission"]>
  export type UserLeadTypePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserLeadTypePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserLeadTypePermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserLeadTypePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLeadTypePermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      leadType: string
      hasAccess: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userLeadTypePermission"]>
    composites: {}
  }

  type UserLeadTypePermissionGetPayload<S extends boolean | null | undefined | UserLeadTypePermissionDefaultArgs> = $Result.GetResult<Prisma.$UserLeadTypePermissionPayload, S>

  type UserLeadTypePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserLeadTypePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserLeadTypePermissionCountAggregateInputType | true
    }

  export interface UserLeadTypePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLeadTypePermission'], meta: { name: 'UserLeadTypePermission' } }
    /**
     * Find zero or one UserLeadTypePermission that matches the filter.
     * @param {UserLeadTypePermissionFindUniqueArgs} args - Arguments to find a UserLeadTypePermission
     * @example
     * // Get one UserLeadTypePermission
     * const userLeadTypePermission = await prisma.userLeadTypePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLeadTypePermissionFindUniqueArgs>(args: SelectSubset<T, UserLeadTypePermissionFindUniqueArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserLeadTypePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserLeadTypePermissionFindUniqueOrThrowArgs} args - Arguments to find a UserLeadTypePermission
     * @example
     * // Get one UserLeadTypePermission
     * const userLeadTypePermission = await prisma.userLeadTypePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLeadTypePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLeadTypePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLeadTypePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionFindFirstArgs} args - Arguments to find a UserLeadTypePermission
     * @example
     * // Get one UserLeadTypePermission
     * const userLeadTypePermission = await prisma.userLeadTypePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLeadTypePermissionFindFirstArgs>(args?: SelectSubset<T, UserLeadTypePermissionFindFirstArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLeadTypePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionFindFirstOrThrowArgs} args - Arguments to find a UserLeadTypePermission
     * @example
     * // Get one UserLeadTypePermission
     * const userLeadTypePermission = await prisma.userLeadTypePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLeadTypePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLeadTypePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserLeadTypePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLeadTypePermissions
     * const userLeadTypePermissions = await prisma.userLeadTypePermission.findMany()
     * 
     * // Get first 10 UserLeadTypePermissions
     * const userLeadTypePermissions = await prisma.userLeadTypePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLeadTypePermissionWithIdOnly = await prisma.userLeadTypePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLeadTypePermissionFindManyArgs>(args?: SelectSubset<T, UserLeadTypePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserLeadTypePermission.
     * @param {UserLeadTypePermissionCreateArgs} args - Arguments to create a UserLeadTypePermission.
     * @example
     * // Create one UserLeadTypePermission
     * const UserLeadTypePermission = await prisma.userLeadTypePermission.create({
     *   data: {
     *     // ... data to create a UserLeadTypePermission
     *   }
     * })
     * 
     */
    create<T extends UserLeadTypePermissionCreateArgs>(args: SelectSubset<T, UserLeadTypePermissionCreateArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserLeadTypePermissions.
     * @param {UserLeadTypePermissionCreateManyArgs} args - Arguments to create many UserLeadTypePermissions.
     * @example
     * // Create many UserLeadTypePermissions
     * const userLeadTypePermission = await prisma.userLeadTypePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLeadTypePermissionCreateManyArgs>(args?: SelectSubset<T, UserLeadTypePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLeadTypePermissions and returns the data saved in the database.
     * @param {UserLeadTypePermissionCreateManyAndReturnArgs} args - Arguments to create many UserLeadTypePermissions.
     * @example
     * // Create many UserLeadTypePermissions
     * const userLeadTypePermission = await prisma.userLeadTypePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLeadTypePermissions and only return the `id`
     * const userLeadTypePermissionWithIdOnly = await prisma.userLeadTypePermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLeadTypePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLeadTypePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserLeadTypePermission.
     * @param {UserLeadTypePermissionDeleteArgs} args - Arguments to delete one UserLeadTypePermission.
     * @example
     * // Delete one UserLeadTypePermission
     * const UserLeadTypePermission = await prisma.userLeadTypePermission.delete({
     *   where: {
     *     // ... filter to delete one UserLeadTypePermission
     *   }
     * })
     * 
     */
    delete<T extends UserLeadTypePermissionDeleteArgs>(args: SelectSubset<T, UserLeadTypePermissionDeleteArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserLeadTypePermission.
     * @param {UserLeadTypePermissionUpdateArgs} args - Arguments to update one UserLeadTypePermission.
     * @example
     * // Update one UserLeadTypePermission
     * const userLeadTypePermission = await prisma.userLeadTypePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLeadTypePermissionUpdateArgs>(args: SelectSubset<T, UserLeadTypePermissionUpdateArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserLeadTypePermissions.
     * @param {UserLeadTypePermissionDeleteManyArgs} args - Arguments to filter UserLeadTypePermissions to delete.
     * @example
     * // Delete a few UserLeadTypePermissions
     * const { count } = await prisma.userLeadTypePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLeadTypePermissionDeleteManyArgs>(args?: SelectSubset<T, UserLeadTypePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLeadTypePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLeadTypePermissions
     * const userLeadTypePermission = await prisma.userLeadTypePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLeadTypePermissionUpdateManyArgs>(args: SelectSubset<T, UserLeadTypePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLeadTypePermissions and returns the data updated in the database.
     * @param {UserLeadTypePermissionUpdateManyAndReturnArgs} args - Arguments to update many UserLeadTypePermissions.
     * @example
     * // Update many UserLeadTypePermissions
     * const userLeadTypePermission = await prisma.userLeadTypePermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserLeadTypePermissions and only return the `id`
     * const userLeadTypePermissionWithIdOnly = await prisma.userLeadTypePermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserLeadTypePermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserLeadTypePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserLeadTypePermission.
     * @param {UserLeadTypePermissionUpsertArgs} args - Arguments to update or create a UserLeadTypePermission.
     * @example
     * // Update or create a UserLeadTypePermission
     * const userLeadTypePermission = await prisma.userLeadTypePermission.upsert({
     *   create: {
     *     // ... data to create a UserLeadTypePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLeadTypePermission we want to update
     *   }
     * })
     */
    upsert<T extends UserLeadTypePermissionUpsertArgs>(args: SelectSubset<T, UserLeadTypePermissionUpsertArgs<ExtArgs>>): Prisma__UserLeadTypePermissionClient<$Result.GetResult<Prisma.$UserLeadTypePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserLeadTypePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionCountArgs} args - Arguments to filter UserLeadTypePermissions to count.
     * @example
     * // Count the number of UserLeadTypePermissions
     * const count = await prisma.userLeadTypePermission.count({
     *   where: {
     *     // ... the filter for the UserLeadTypePermissions we want to count
     *   }
     * })
    **/
    count<T extends UserLeadTypePermissionCountArgs>(
      args?: Subset<T, UserLeadTypePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLeadTypePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLeadTypePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLeadTypePermissionAggregateArgs>(args: Subset<T, UserLeadTypePermissionAggregateArgs>): Prisma.PrismaPromise<GetUserLeadTypePermissionAggregateType<T>>

    /**
     * Group by UserLeadTypePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLeadTypePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLeadTypePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLeadTypePermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserLeadTypePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLeadTypePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLeadTypePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLeadTypePermission model
   */
  readonly fields: UserLeadTypePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLeadTypePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLeadTypePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLeadTypePermission model
   */
  interface UserLeadTypePermissionFieldRefs {
    readonly id: FieldRef<"UserLeadTypePermission", 'Int'>
    readonly userId: FieldRef<"UserLeadTypePermission", 'String'>
    readonly leadType: FieldRef<"UserLeadTypePermission", 'String'>
    readonly hasAccess: FieldRef<"UserLeadTypePermission", 'Boolean'>
    readonly createdAt: FieldRef<"UserLeadTypePermission", 'DateTime'>
    readonly updatedAt: FieldRef<"UserLeadTypePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserLeadTypePermission findUnique
   */
  export type UserLeadTypePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserLeadTypePermission to fetch.
     */
    where: UserLeadTypePermissionWhereUniqueInput
  }

  /**
   * UserLeadTypePermission findUniqueOrThrow
   */
  export type UserLeadTypePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserLeadTypePermission to fetch.
     */
    where: UserLeadTypePermissionWhereUniqueInput
  }

  /**
   * UserLeadTypePermission findFirst
   */
  export type UserLeadTypePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserLeadTypePermission to fetch.
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeadTypePermissions to fetch.
     */
    orderBy?: UserLeadTypePermissionOrderByWithRelationInput | UserLeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLeadTypePermissions.
     */
    cursor?: UserLeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeadTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLeadTypePermissions.
     */
    distinct?: UserLeadTypePermissionScalarFieldEnum | UserLeadTypePermissionScalarFieldEnum[]
  }

  /**
   * UserLeadTypePermission findFirstOrThrow
   */
  export type UserLeadTypePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserLeadTypePermission to fetch.
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeadTypePermissions to fetch.
     */
    orderBy?: UserLeadTypePermissionOrderByWithRelationInput | UserLeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLeadTypePermissions.
     */
    cursor?: UserLeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeadTypePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLeadTypePermissions.
     */
    distinct?: UserLeadTypePermissionScalarFieldEnum | UserLeadTypePermissionScalarFieldEnum[]
  }

  /**
   * UserLeadTypePermission findMany
   */
  export type UserLeadTypePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserLeadTypePermissions to fetch.
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLeadTypePermissions to fetch.
     */
    orderBy?: UserLeadTypePermissionOrderByWithRelationInput | UserLeadTypePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLeadTypePermissions.
     */
    cursor?: UserLeadTypePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLeadTypePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLeadTypePermissions.
     */
    skip?: number
    distinct?: UserLeadTypePermissionScalarFieldEnum | UserLeadTypePermissionScalarFieldEnum[]
  }

  /**
   * UserLeadTypePermission create
   */
  export type UserLeadTypePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLeadTypePermission.
     */
    data: XOR<UserLeadTypePermissionCreateInput, UserLeadTypePermissionUncheckedCreateInput>
  }

  /**
   * UserLeadTypePermission createMany
   */
  export type UserLeadTypePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLeadTypePermissions.
     */
    data: UserLeadTypePermissionCreateManyInput | UserLeadTypePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLeadTypePermission createManyAndReturn
   */
  export type UserLeadTypePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * The data used to create many UserLeadTypePermissions.
     */
    data: UserLeadTypePermissionCreateManyInput | UserLeadTypePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLeadTypePermission update
   */
  export type UserLeadTypePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLeadTypePermission.
     */
    data: XOR<UserLeadTypePermissionUpdateInput, UserLeadTypePermissionUncheckedUpdateInput>
    /**
     * Choose, which UserLeadTypePermission to update.
     */
    where: UserLeadTypePermissionWhereUniqueInput
  }

  /**
   * UserLeadTypePermission updateMany
   */
  export type UserLeadTypePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLeadTypePermissions.
     */
    data: XOR<UserLeadTypePermissionUpdateManyMutationInput, UserLeadTypePermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserLeadTypePermissions to update
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * Limit how many UserLeadTypePermissions to update.
     */
    limit?: number
  }

  /**
   * UserLeadTypePermission updateManyAndReturn
   */
  export type UserLeadTypePermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * The data used to update UserLeadTypePermissions.
     */
    data: XOR<UserLeadTypePermissionUpdateManyMutationInput, UserLeadTypePermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserLeadTypePermissions to update
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * Limit how many UserLeadTypePermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLeadTypePermission upsert
   */
  export type UserLeadTypePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLeadTypePermission to update in case it exists.
     */
    where: UserLeadTypePermissionWhereUniqueInput
    /**
     * In case the UserLeadTypePermission found by the `where` argument doesn't exist, create a new UserLeadTypePermission with this data.
     */
    create: XOR<UserLeadTypePermissionCreateInput, UserLeadTypePermissionUncheckedCreateInput>
    /**
     * In case the UserLeadTypePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLeadTypePermissionUpdateInput, UserLeadTypePermissionUncheckedUpdateInput>
  }

  /**
   * UserLeadTypePermission delete
   */
  export type UserLeadTypePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
    /**
     * Filter which UserLeadTypePermission to delete.
     */
    where: UserLeadTypePermissionWhereUniqueInput
  }

  /**
   * UserLeadTypePermission deleteMany
   */
  export type UserLeadTypePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLeadTypePermissions to delete
     */
    where?: UserLeadTypePermissionWhereInput
    /**
     * Limit how many UserLeadTypePermissions to delete.
     */
    limit?: number
  }

  /**
   * UserLeadTypePermission without action
   */
  export type UserLeadTypePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLeadTypePermission
     */
    select?: UserLeadTypePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLeadTypePermission
     */
    omit?: UserLeadTypePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLeadTypePermissionInclude<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _avg: FAQAvgAggregateOutputType | null
    _sum: FAQSumAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type FAQSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type FAQMinAggregateOutputType = {
    id: string | null
    question: string | null
    answer: string | null
    category: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FAQMaxAggregateOutputType = {
    id: string | null
    question: string | null
    answer: string | null
    category: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    question: number
    answer: number
    category: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FAQAvgAggregateInputType = {
    sortOrder?: true
  }

  export type FAQSumAggregateInputType = {
    sortOrder?: true
  }

  export type FAQMinAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    category?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    category?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    category?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FAQAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FAQSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _avg?: FAQAvgAggregateInputType
    _sum?: FAQSumAggregateInputType
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: string
    question: string
    answer: string
    category: string
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: FAQCountAggregateOutputType | null
    _avg: FAQAvgAggregateOutputType | null
    _sum: FAQSumAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fAQ"]>

  export type FAQSelectScalar = {
    id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FAQOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question" | "answer" | "category" | "isActive" | "sortOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["fAQ"]>

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      answer: string
      category: string
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FAQS and returns the data saved in the database.
     * @param {FAQCreateManyAndReturnArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FAQCreateManyAndReturnArgs>(args?: SelectSubset<T, FAQCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS and returns the data updated in the database.
     * @param {FAQUpdateManyAndReturnArgs} args - Arguments to update many FAQS.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FAQS and only return the `id`
     * const fAQWithIdOnly = await prisma.fAQ.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FAQUpdateManyAndReturnArgs>(args: SelectSubset<T, FAQUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'String'>
    readonly question: FieldRef<"FAQ", 'String'>
    readonly answer: FieldRef<"FAQ", 'String'>
    readonly category: FieldRef<"FAQ", 'String'>
    readonly isActive: FieldRef<"FAQ", 'Boolean'>
    readonly sortOrder: FieldRef<"FAQ", 'Int'>
    readonly createdAt: FieldRef<"FAQ", 'DateTime'>
    readonly updatedAt: FieldRef<"FAQ", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ createManyAndReturn
   */
  export type FAQCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ updateManyAndReturn
   */
  export type FAQUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to update.
     */
    limit?: number
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
    /**
     * Limit how many FAQS to delete.
     */
    limit?: number
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FAQ
     */
    omit?: FAQOmit<ExtArgs> | null
  }


  /**
   * Model About
   */

  export type AggregateAbout = {
    _count: AboutCountAggregateOutputType | null
    _avg: AboutAvgAggregateOutputType | null
    _sum: AboutSumAggregateOutputType | null
    _min: AboutMinAggregateOutputType | null
    _max: AboutMaxAggregateOutputType | null
  }

  export type AboutAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type AboutSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type AboutMinAggregateOutputType = {
    id: string | null
    section: string | null
    title: string | null
    subtitle: string | null
    content: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AboutMaxAggregateOutputType = {
    id: string | null
    section: string | null
    title: string | null
    subtitle: string | null
    content: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AboutCountAggregateOutputType = {
    id: number
    section: number
    title: number
    subtitle: number
    content: number
    imageUrl: number
    data: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AboutAvgAggregateInputType = {
    sortOrder?: true
  }

  export type AboutSumAggregateInputType = {
    sortOrder?: true
  }

  export type AboutMinAggregateInputType = {
    id?: true
    section?: true
    title?: true
    subtitle?: true
    content?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AboutMaxAggregateInputType = {
    id?: true
    section?: true
    title?: true
    subtitle?: true
    content?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AboutCountAggregateInputType = {
    id?: true
    section?: true
    title?: true
    subtitle?: true
    content?: true
    imageUrl?: true
    data?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AboutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which About to aggregate.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Abouts
    **/
    _count?: true | AboutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutMaxAggregateInputType
  }

  export type GetAboutAggregateType<T extends AboutAggregateArgs> = {
        [P in keyof T & keyof AggregateAbout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbout[P]>
      : GetScalarType<T[P], AggregateAbout[P]>
  }




  export type AboutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutWhereInput
    orderBy?: AboutOrderByWithAggregationInput | AboutOrderByWithAggregationInput[]
    by: AboutScalarFieldEnum[] | AboutScalarFieldEnum
    having?: AboutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutCountAggregateInputType | true
    _avg?: AboutAvgAggregateInputType
    _sum?: AboutSumAggregateInputType
    _min?: AboutMinAggregateInputType
    _max?: AboutMaxAggregateInputType
  }

  export type AboutGroupByOutputType = {
    id: string
    section: string
    title: string | null
    subtitle: string | null
    content: string | null
    imageUrl: string | null
    data: JsonValue | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: AboutCountAggregateOutputType | null
    _avg: AboutAvgAggregateOutputType | null
    _sum: AboutSumAggregateOutputType | null
    _min: AboutMinAggregateOutputType | null
    _max: AboutMaxAggregateOutputType | null
  }

  type GetAboutGroupByPayload<T extends AboutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AboutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutGroupByOutputType[P]>
            : GetScalarType<T[P], AboutGroupByOutputType[P]>
        }
      >
    >


  export type AboutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    section?: boolean
    title?: boolean
    subtitle?: boolean
    content?: boolean
    imageUrl?: boolean
    data?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["about"]>

  export type AboutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    section?: boolean
    title?: boolean
    subtitle?: boolean
    content?: boolean
    imageUrl?: boolean
    data?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["about"]>

  export type AboutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    section?: boolean
    title?: boolean
    subtitle?: boolean
    content?: boolean
    imageUrl?: boolean
    data?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["about"]>

  export type AboutSelectScalar = {
    id?: boolean
    section?: boolean
    title?: boolean
    subtitle?: boolean
    content?: boolean
    imageUrl?: boolean
    data?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AboutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "section" | "title" | "subtitle" | "content" | "imageUrl" | "data" | "isActive" | "sortOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["about"]>

  export type $AboutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "About"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      section: string
      title: string | null
      subtitle: string | null
      content: string | null
      imageUrl: string | null
      data: Prisma.JsonValue | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["about"]>
    composites: {}
  }

  type AboutGetPayload<S extends boolean | null | undefined | AboutDefaultArgs> = $Result.GetResult<Prisma.$AboutPayload, S>

  type AboutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AboutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AboutCountAggregateInputType | true
    }

  export interface AboutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['About'], meta: { name: 'About' } }
    /**
     * Find zero or one About that matches the filter.
     * @param {AboutFindUniqueArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AboutFindUniqueArgs>(args: SelectSubset<T, AboutFindUniqueArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one About that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AboutFindUniqueOrThrowArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AboutFindUniqueOrThrowArgs>(args: SelectSubset<T, AboutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first About that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindFirstArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AboutFindFirstArgs>(args?: SelectSubset<T, AboutFindFirstArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first About that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindFirstOrThrowArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AboutFindFirstOrThrowArgs>(args?: SelectSubset<T, AboutFindFirstOrThrowArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Abouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Abouts
     * const abouts = await prisma.about.findMany()
     * 
     * // Get first 10 Abouts
     * const abouts = await prisma.about.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutWithIdOnly = await prisma.about.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AboutFindManyArgs>(args?: SelectSubset<T, AboutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a About.
     * @param {AboutCreateArgs} args - Arguments to create a About.
     * @example
     * // Create one About
     * const About = await prisma.about.create({
     *   data: {
     *     // ... data to create a About
     *   }
     * })
     * 
     */
    create<T extends AboutCreateArgs>(args: SelectSubset<T, AboutCreateArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Abouts.
     * @param {AboutCreateManyArgs} args - Arguments to create many Abouts.
     * @example
     * // Create many Abouts
     * const about = await prisma.about.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AboutCreateManyArgs>(args?: SelectSubset<T, AboutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Abouts and returns the data saved in the database.
     * @param {AboutCreateManyAndReturnArgs} args - Arguments to create many Abouts.
     * @example
     * // Create many Abouts
     * const about = await prisma.about.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Abouts and only return the `id`
     * const aboutWithIdOnly = await prisma.about.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AboutCreateManyAndReturnArgs>(args?: SelectSubset<T, AboutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a About.
     * @param {AboutDeleteArgs} args - Arguments to delete one About.
     * @example
     * // Delete one About
     * const About = await prisma.about.delete({
     *   where: {
     *     // ... filter to delete one About
     *   }
     * })
     * 
     */
    delete<T extends AboutDeleteArgs>(args: SelectSubset<T, AboutDeleteArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one About.
     * @param {AboutUpdateArgs} args - Arguments to update one About.
     * @example
     * // Update one About
     * const about = await prisma.about.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AboutUpdateArgs>(args: SelectSubset<T, AboutUpdateArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Abouts.
     * @param {AboutDeleteManyArgs} args - Arguments to filter Abouts to delete.
     * @example
     * // Delete a few Abouts
     * const { count } = await prisma.about.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AboutDeleteManyArgs>(args?: SelectSubset<T, AboutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Abouts
     * const about = await prisma.about.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AboutUpdateManyArgs>(args: SelectSubset<T, AboutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abouts and returns the data updated in the database.
     * @param {AboutUpdateManyAndReturnArgs} args - Arguments to update many Abouts.
     * @example
     * // Update many Abouts
     * const about = await prisma.about.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Abouts and only return the `id`
     * const aboutWithIdOnly = await prisma.about.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AboutUpdateManyAndReturnArgs>(args: SelectSubset<T, AboutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one About.
     * @param {AboutUpsertArgs} args - Arguments to update or create a About.
     * @example
     * // Update or create a About
     * const about = await prisma.about.upsert({
     *   create: {
     *     // ... data to create a About
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the About we want to update
     *   }
     * })
     */
    upsert<T extends AboutUpsertArgs>(args: SelectSubset<T, AboutUpsertArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Abouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutCountArgs} args - Arguments to filter Abouts to count.
     * @example
     * // Count the number of Abouts
     * const count = await prisma.about.count({
     *   where: {
     *     // ... the filter for the Abouts we want to count
     *   }
     * })
    **/
    count<T extends AboutCountArgs>(
      args?: Subset<T, AboutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a About.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutAggregateArgs>(args: Subset<T, AboutAggregateArgs>): Prisma.PrismaPromise<GetAboutAggregateType<T>>

    /**
     * Group by About.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutGroupByArgs['orderBy'] }
        : { orderBy?: AboutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the About model
   */
  readonly fields: AboutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for About.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AboutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the About model
   */
  interface AboutFieldRefs {
    readonly id: FieldRef<"About", 'String'>
    readonly section: FieldRef<"About", 'String'>
    readonly title: FieldRef<"About", 'String'>
    readonly subtitle: FieldRef<"About", 'String'>
    readonly content: FieldRef<"About", 'String'>
    readonly imageUrl: FieldRef<"About", 'String'>
    readonly data: FieldRef<"About", 'Json'>
    readonly isActive: FieldRef<"About", 'Boolean'>
    readonly sortOrder: FieldRef<"About", 'Int'>
    readonly createdAt: FieldRef<"About", 'DateTime'>
    readonly updatedAt: FieldRef<"About", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * About findUnique
   */
  export type AboutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where: AboutWhereUniqueInput
  }

  /**
   * About findUniqueOrThrow
   */
  export type AboutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where: AboutWhereUniqueInput
  }

  /**
   * About findFirst
   */
  export type AboutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abouts.
     */
    distinct?: AboutScalarFieldEnum | AboutScalarFieldEnum[]
  }

  /**
   * About findFirstOrThrow
   */
  export type AboutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abouts.
     */
    distinct?: AboutScalarFieldEnum | AboutScalarFieldEnum[]
  }

  /**
   * About findMany
   */
  export type AboutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * Filter, which Abouts to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    distinct?: AboutScalarFieldEnum | AboutScalarFieldEnum[]
  }

  /**
   * About create
   */
  export type AboutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * The data needed to create a About.
     */
    data: XOR<AboutCreateInput, AboutUncheckedCreateInput>
  }

  /**
   * About createMany
   */
  export type AboutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Abouts.
     */
    data: AboutCreateManyInput | AboutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * About createManyAndReturn
   */
  export type AboutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * The data used to create many Abouts.
     */
    data: AboutCreateManyInput | AboutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * About update
   */
  export type AboutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * The data needed to update a About.
     */
    data: XOR<AboutUpdateInput, AboutUncheckedUpdateInput>
    /**
     * Choose, which About to update.
     */
    where: AboutWhereUniqueInput
  }

  /**
   * About updateMany
   */
  export type AboutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Abouts.
     */
    data: XOR<AboutUpdateManyMutationInput, AboutUncheckedUpdateManyInput>
    /**
     * Filter which Abouts to update
     */
    where?: AboutWhereInput
    /**
     * Limit how many Abouts to update.
     */
    limit?: number
  }

  /**
   * About updateManyAndReturn
   */
  export type AboutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * The data used to update Abouts.
     */
    data: XOR<AboutUpdateManyMutationInput, AboutUncheckedUpdateManyInput>
    /**
     * Filter which Abouts to update
     */
    where?: AboutWhereInput
    /**
     * Limit how many Abouts to update.
     */
    limit?: number
  }

  /**
   * About upsert
   */
  export type AboutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * The filter to search for the About to update in case it exists.
     */
    where: AboutWhereUniqueInput
    /**
     * In case the About found by the `where` argument doesn't exist, create a new About with this data.
     */
    create: XOR<AboutCreateInput, AboutUncheckedCreateInput>
    /**
     * In case the About was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutUpdateInput, AboutUncheckedUpdateInput>
  }

  /**
   * About delete
   */
  export type AboutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
    /**
     * Filter which About to delete.
     */
    where: AboutWhereUniqueInput
  }

  /**
   * About deleteMany
   */
  export type AboutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Abouts to delete
     */
    where?: AboutWhereInput
    /**
     * Limit how many Abouts to delete.
     */
    limit?: number
  }

  /**
   * About without action
   */
  export type AboutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the About
     */
    omit?: AboutOmit<ExtArgs> | null
  }


  /**
   * Model DesignSettings
   */

  export type AggregateDesignSettings = {
    _count: DesignSettingsCountAggregateOutputType | null
    _min: DesignSettingsMinAggregateOutputType | null
    _max: DesignSettingsMaxAggregateOutputType | null
  }

  export type DesignSettingsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DesignSettingsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DesignSettingsCountAggregateOutputType = {
    id: number
    colors: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DesignSettingsMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DesignSettingsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DesignSettingsCountAggregateInputType = {
    id?: true
    colors?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DesignSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DesignSettings to aggregate.
     */
    where?: DesignSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DesignSettings to fetch.
     */
    orderBy?: DesignSettingsOrderByWithRelationInput | DesignSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DesignSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DesignSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DesignSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DesignSettings
    **/
    _count?: true | DesignSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DesignSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DesignSettingsMaxAggregateInputType
  }

  export type GetDesignSettingsAggregateType<T extends DesignSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateDesignSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDesignSettings[P]>
      : GetScalarType<T[P], AggregateDesignSettings[P]>
  }




  export type DesignSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DesignSettingsWhereInput
    orderBy?: DesignSettingsOrderByWithAggregationInput | DesignSettingsOrderByWithAggregationInput[]
    by: DesignSettingsScalarFieldEnum[] | DesignSettingsScalarFieldEnum
    having?: DesignSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DesignSettingsCountAggregateInputType | true
    _min?: DesignSettingsMinAggregateInputType
    _max?: DesignSettingsMaxAggregateInputType
  }

  export type DesignSettingsGroupByOutputType = {
    id: string
    colors: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: DesignSettingsCountAggregateOutputType | null
    _min: DesignSettingsMinAggregateOutputType | null
    _max: DesignSettingsMaxAggregateOutputType | null
  }

  type GetDesignSettingsGroupByPayload<T extends DesignSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DesignSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DesignSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DesignSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], DesignSettingsGroupByOutputType[P]>
        }
      >
    >


  export type DesignSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["designSettings"]>

  export type DesignSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["designSettings"]>

  export type DesignSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["designSettings"]>

  export type DesignSettingsSelectScalar = {
    id?: boolean
    colors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DesignSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "colors" | "createdAt" | "updatedAt", ExtArgs["result"]["designSettings"]>

  export type $DesignSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DesignSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      colors: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["designSettings"]>
    composites: {}
  }

  type DesignSettingsGetPayload<S extends boolean | null | undefined | DesignSettingsDefaultArgs> = $Result.GetResult<Prisma.$DesignSettingsPayload, S>

  type DesignSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DesignSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DesignSettingsCountAggregateInputType | true
    }

  export interface DesignSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DesignSettings'], meta: { name: 'DesignSettings' } }
    /**
     * Find zero or one DesignSettings that matches the filter.
     * @param {DesignSettingsFindUniqueArgs} args - Arguments to find a DesignSettings
     * @example
     * // Get one DesignSettings
     * const designSettings = await prisma.designSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DesignSettingsFindUniqueArgs>(args: SelectSubset<T, DesignSettingsFindUniqueArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DesignSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DesignSettingsFindUniqueOrThrowArgs} args - Arguments to find a DesignSettings
     * @example
     * // Get one DesignSettings
     * const designSettings = await prisma.designSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DesignSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, DesignSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DesignSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsFindFirstArgs} args - Arguments to find a DesignSettings
     * @example
     * // Get one DesignSettings
     * const designSettings = await prisma.designSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DesignSettingsFindFirstArgs>(args?: SelectSubset<T, DesignSettingsFindFirstArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DesignSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsFindFirstOrThrowArgs} args - Arguments to find a DesignSettings
     * @example
     * // Get one DesignSettings
     * const designSettings = await prisma.designSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DesignSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, DesignSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DesignSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DesignSettings
     * const designSettings = await prisma.designSettings.findMany()
     * 
     * // Get first 10 DesignSettings
     * const designSettings = await prisma.designSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const designSettingsWithIdOnly = await prisma.designSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DesignSettingsFindManyArgs>(args?: SelectSubset<T, DesignSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DesignSettings.
     * @param {DesignSettingsCreateArgs} args - Arguments to create a DesignSettings.
     * @example
     * // Create one DesignSettings
     * const DesignSettings = await prisma.designSettings.create({
     *   data: {
     *     // ... data to create a DesignSettings
     *   }
     * })
     * 
     */
    create<T extends DesignSettingsCreateArgs>(args: SelectSubset<T, DesignSettingsCreateArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DesignSettings.
     * @param {DesignSettingsCreateManyArgs} args - Arguments to create many DesignSettings.
     * @example
     * // Create many DesignSettings
     * const designSettings = await prisma.designSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DesignSettingsCreateManyArgs>(args?: SelectSubset<T, DesignSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DesignSettings and returns the data saved in the database.
     * @param {DesignSettingsCreateManyAndReturnArgs} args - Arguments to create many DesignSettings.
     * @example
     * // Create many DesignSettings
     * const designSettings = await prisma.designSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DesignSettings and only return the `id`
     * const designSettingsWithIdOnly = await prisma.designSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DesignSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, DesignSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DesignSettings.
     * @param {DesignSettingsDeleteArgs} args - Arguments to delete one DesignSettings.
     * @example
     * // Delete one DesignSettings
     * const DesignSettings = await prisma.designSettings.delete({
     *   where: {
     *     // ... filter to delete one DesignSettings
     *   }
     * })
     * 
     */
    delete<T extends DesignSettingsDeleteArgs>(args: SelectSubset<T, DesignSettingsDeleteArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DesignSettings.
     * @param {DesignSettingsUpdateArgs} args - Arguments to update one DesignSettings.
     * @example
     * // Update one DesignSettings
     * const designSettings = await prisma.designSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DesignSettingsUpdateArgs>(args: SelectSubset<T, DesignSettingsUpdateArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DesignSettings.
     * @param {DesignSettingsDeleteManyArgs} args - Arguments to filter DesignSettings to delete.
     * @example
     * // Delete a few DesignSettings
     * const { count } = await prisma.designSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DesignSettingsDeleteManyArgs>(args?: SelectSubset<T, DesignSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DesignSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DesignSettings
     * const designSettings = await prisma.designSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DesignSettingsUpdateManyArgs>(args: SelectSubset<T, DesignSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DesignSettings and returns the data updated in the database.
     * @param {DesignSettingsUpdateManyAndReturnArgs} args - Arguments to update many DesignSettings.
     * @example
     * // Update many DesignSettings
     * const designSettings = await prisma.designSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DesignSettings and only return the `id`
     * const designSettingsWithIdOnly = await prisma.designSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DesignSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, DesignSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DesignSettings.
     * @param {DesignSettingsUpsertArgs} args - Arguments to update or create a DesignSettings.
     * @example
     * // Update or create a DesignSettings
     * const designSettings = await prisma.designSettings.upsert({
     *   create: {
     *     // ... data to create a DesignSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DesignSettings we want to update
     *   }
     * })
     */
    upsert<T extends DesignSettingsUpsertArgs>(args: SelectSubset<T, DesignSettingsUpsertArgs<ExtArgs>>): Prisma__DesignSettingsClient<$Result.GetResult<Prisma.$DesignSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DesignSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsCountArgs} args - Arguments to filter DesignSettings to count.
     * @example
     * // Count the number of DesignSettings
     * const count = await prisma.designSettings.count({
     *   where: {
     *     // ... the filter for the DesignSettings we want to count
     *   }
     * })
    **/
    count<T extends DesignSettingsCountArgs>(
      args?: Subset<T, DesignSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DesignSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DesignSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DesignSettingsAggregateArgs>(args: Subset<T, DesignSettingsAggregateArgs>): Prisma.PrismaPromise<GetDesignSettingsAggregateType<T>>

    /**
     * Group by DesignSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DesignSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DesignSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DesignSettingsGroupByArgs['orderBy'] }
        : { orderBy?: DesignSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DesignSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDesignSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DesignSettings model
   */
  readonly fields: DesignSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DesignSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DesignSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DesignSettings model
   */
  interface DesignSettingsFieldRefs {
    readonly id: FieldRef<"DesignSettings", 'String'>
    readonly colors: FieldRef<"DesignSettings", 'Json'>
    readonly createdAt: FieldRef<"DesignSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"DesignSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DesignSettings findUnique
   */
  export type DesignSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * Filter, which DesignSettings to fetch.
     */
    where: DesignSettingsWhereUniqueInput
  }

  /**
   * DesignSettings findUniqueOrThrow
   */
  export type DesignSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * Filter, which DesignSettings to fetch.
     */
    where: DesignSettingsWhereUniqueInput
  }

  /**
   * DesignSettings findFirst
   */
  export type DesignSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * Filter, which DesignSettings to fetch.
     */
    where?: DesignSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DesignSettings to fetch.
     */
    orderBy?: DesignSettingsOrderByWithRelationInput | DesignSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DesignSettings.
     */
    cursor?: DesignSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DesignSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DesignSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DesignSettings.
     */
    distinct?: DesignSettingsScalarFieldEnum | DesignSettingsScalarFieldEnum[]
  }

  /**
   * DesignSettings findFirstOrThrow
   */
  export type DesignSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * Filter, which DesignSettings to fetch.
     */
    where?: DesignSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DesignSettings to fetch.
     */
    orderBy?: DesignSettingsOrderByWithRelationInput | DesignSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DesignSettings.
     */
    cursor?: DesignSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DesignSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DesignSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DesignSettings.
     */
    distinct?: DesignSettingsScalarFieldEnum | DesignSettingsScalarFieldEnum[]
  }

  /**
   * DesignSettings findMany
   */
  export type DesignSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * Filter, which DesignSettings to fetch.
     */
    where?: DesignSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DesignSettings to fetch.
     */
    orderBy?: DesignSettingsOrderByWithRelationInput | DesignSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DesignSettings.
     */
    cursor?: DesignSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DesignSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DesignSettings.
     */
    skip?: number
    distinct?: DesignSettingsScalarFieldEnum | DesignSettingsScalarFieldEnum[]
  }

  /**
   * DesignSettings create
   */
  export type DesignSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a DesignSettings.
     */
    data: XOR<DesignSettingsCreateInput, DesignSettingsUncheckedCreateInput>
  }

  /**
   * DesignSettings createMany
   */
  export type DesignSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DesignSettings.
     */
    data: DesignSettingsCreateManyInput | DesignSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DesignSettings createManyAndReturn
   */
  export type DesignSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many DesignSettings.
     */
    data: DesignSettingsCreateManyInput | DesignSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DesignSettings update
   */
  export type DesignSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a DesignSettings.
     */
    data: XOR<DesignSettingsUpdateInput, DesignSettingsUncheckedUpdateInput>
    /**
     * Choose, which DesignSettings to update.
     */
    where: DesignSettingsWhereUniqueInput
  }

  /**
   * DesignSettings updateMany
   */
  export type DesignSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DesignSettings.
     */
    data: XOR<DesignSettingsUpdateManyMutationInput, DesignSettingsUncheckedUpdateManyInput>
    /**
     * Filter which DesignSettings to update
     */
    where?: DesignSettingsWhereInput
    /**
     * Limit how many DesignSettings to update.
     */
    limit?: number
  }

  /**
   * DesignSettings updateManyAndReturn
   */
  export type DesignSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * The data used to update DesignSettings.
     */
    data: XOR<DesignSettingsUpdateManyMutationInput, DesignSettingsUncheckedUpdateManyInput>
    /**
     * Filter which DesignSettings to update
     */
    where?: DesignSettingsWhereInput
    /**
     * Limit how many DesignSettings to update.
     */
    limit?: number
  }

  /**
   * DesignSettings upsert
   */
  export type DesignSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the DesignSettings to update in case it exists.
     */
    where: DesignSettingsWhereUniqueInput
    /**
     * In case the DesignSettings found by the `where` argument doesn't exist, create a new DesignSettings with this data.
     */
    create: XOR<DesignSettingsCreateInput, DesignSettingsUncheckedCreateInput>
    /**
     * In case the DesignSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DesignSettingsUpdateInput, DesignSettingsUncheckedUpdateInput>
  }

  /**
   * DesignSettings delete
   */
  export type DesignSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
    /**
     * Filter which DesignSettings to delete.
     */
    where: DesignSettingsWhereUniqueInput
  }

  /**
   * DesignSettings deleteMany
   */
  export type DesignSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DesignSettings to delete
     */
    where?: DesignSettingsWhereInput
    /**
     * Limit how many DesignSettings to delete.
     */
    limit?: number
  }

  /**
   * DesignSettings without action
   */
  export type DesignSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DesignSettings
     */
    select?: DesignSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DesignSettings
     */
    omit?: DesignSettingsOmit<ExtArgs> | null
  }


  /**
   * Model EmailTemplate
   */

  export type AggregateEmailTemplate = {
    _count: EmailTemplateCountAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  export type EmailTemplateMinAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    description: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateMaxAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    description: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateCountAggregateOutputType = {
    id: number
    type: number
    name: number
    description: number
    subject: number
    htmlContent: number
    textContent: number
    isActive: number
    variables: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailTemplateMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    isActive?: true
    variables?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplate to aggregate.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailTemplates
    **/
    _count?: true | EmailTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type GetEmailTemplateAggregateType<T extends EmailTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailTemplate[P]>
      : GetScalarType<T[P], AggregateEmailTemplate[P]>
  }




  export type EmailTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTemplateWhereInput
    orderBy?: EmailTemplateOrderByWithAggregationInput | EmailTemplateOrderByWithAggregationInput[]
    by: EmailTemplateScalarFieldEnum[] | EmailTemplateScalarFieldEnum
    having?: EmailTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailTemplateCountAggregateInputType | true
    _min?: EmailTemplateMinAggregateInputType
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type EmailTemplateGroupByOutputType = {
    id: string
    type: string
    name: string
    description: string | null
    subject: string
    htmlContent: string
    textContent: string | null
    isActive: boolean
    variables: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: EmailTemplateCountAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  type GetEmailTemplateGroupByPayload<T extends EmailTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
        }
      >
    >


  export type EmailTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "name" | "description" | "subject" | "htmlContent" | "textContent" | "isActive" | "variables" | "createdAt" | "updatedAt", ExtArgs["result"]["emailTemplate"]>

  export type $EmailTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailTemplate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      name: string
      description: string | null
      subject: string
      htmlContent: string
      textContent: string | null
      isActive: boolean
      variables: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailTemplate"]>
    composites: {}
  }

  type EmailTemplateGetPayload<S extends boolean | null | undefined | EmailTemplateDefaultArgs> = $Result.GetResult<Prisma.$EmailTemplatePayload, S>

  type EmailTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailTemplateCountAggregateInputType | true
    }

  export interface EmailTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailTemplate'], meta: { name: 'EmailTemplate' } }
    /**
     * Find zero or one EmailTemplate that matches the filter.
     * @param {EmailTemplateFindUniqueArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailTemplateFindUniqueArgs>(args: SelectSubset<T, EmailTemplateFindUniqueArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailTemplateFindUniqueOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailTemplateFindFirstArgs>(args?: SelectSubset<T, EmailTemplateFindFirstArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany()
     * 
     * // Get first 10 EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailTemplateFindManyArgs>(args?: SelectSubset<T, EmailTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailTemplate.
     * @param {EmailTemplateCreateArgs} args - Arguments to create a EmailTemplate.
     * @example
     * // Create one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.create({
     *   data: {
     *     // ... data to create a EmailTemplate
     *   }
     * })
     * 
     */
    create<T extends EmailTemplateCreateArgs>(args: SelectSubset<T, EmailTemplateCreateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailTemplates.
     * @param {EmailTemplateCreateManyArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailTemplateCreateManyArgs>(args?: SelectSubset<T, EmailTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailTemplates and returns the data saved in the database.
     * @param {EmailTemplateCreateManyAndReturnArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailTemplate.
     * @param {EmailTemplateDeleteArgs} args - Arguments to delete one EmailTemplate.
     * @example
     * // Delete one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.delete({
     *   where: {
     *     // ... filter to delete one EmailTemplate
     *   }
     * })
     * 
     */
    delete<T extends EmailTemplateDeleteArgs>(args: SelectSubset<T, EmailTemplateDeleteArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailTemplate.
     * @param {EmailTemplateUpdateArgs} args - Arguments to update one EmailTemplate.
     * @example
     * // Update one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailTemplateUpdateArgs>(args: SelectSubset<T, EmailTemplateUpdateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailTemplates.
     * @param {EmailTemplateDeleteManyArgs} args - Arguments to filter EmailTemplates to delete.
     * @example
     * // Delete a few EmailTemplates
     * const { count } = await prisma.emailTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailTemplateDeleteManyArgs>(args?: SelectSubset<T, EmailTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailTemplateUpdateManyArgs>(args: SelectSubset<T, EmailTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates and returns the data updated in the database.
     * @param {EmailTemplateUpdateManyAndReturnArgs} args - Arguments to update many EmailTemplates.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailTemplate.
     * @param {EmailTemplateUpsertArgs} args - Arguments to update or create a EmailTemplate.
     * @example
     * // Update or create a EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.upsert({
     *   create: {
     *     // ... data to create a EmailTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailTemplate we want to update
     *   }
     * })
     */
    upsert<T extends EmailTemplateUpsertArgs>(args: SelectSubset<T, EmailTemplateUpsertArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateCountArgs} args - Arguments to filter EmailTemplates to count.
     * @example
     * // Count the number of EmailTemplates
     * const count = await prisma.emailTemplate.count({
     *   where: {
     *     // ... the filter for the EmailTemplates we want to count
     *   }
     * })
    **/
    count<T extends EmailTemplateCountArgs>(
      args?: Subset<T, EmailTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailTemplateAggregateArgs>(args: Subset<T, EmailTemplateAggregateArgs>): Prisma.PrismaPromise<GetEmailTemplateAggregateType<T>>

    /**
     * Group by EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailTemplateGroupByArgs['orderBy'] }
        : { orderBy?: EmailTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailTemplate model
   */
  readonly fields: EmailTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailTemplate model
   */
  interface EmailTemplateFieldRefs {
    readonly id: FieldRef<"EmailTemplate", 'String'>
    readonly type: FieldRef<"EmailTemplate", 'String'>
    readonly name: FieldRef<"EmailTemplate", 'String'>
    readonly description: FieldRef<"EmailTemplate", 'String'>
    readonly subject: FieldRef<"EmailTemplate", 'String'>
    readonly htmlContent: FieldRef<"EmailTemplate", 'String'>
    readonly textContent: FieldRef<"EmailTemplate", 'String'>
    readonly isActive: FieldRef<"EmailTemplate", 'Boolean'>
    readonly variables: FieldRef<"EmailTemplate", 'Json'>
    readonly createdAt: FieldRef<"EmailTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailTemplate findUnique
   */
  export type EmailTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findUniqueOrThrow
   */
  export type EmailTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findFirst
   */
  export type EmailTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findFirstOrThrow
   */
  export type EmailTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findMany
   */
  export type EmailTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter, which EmailTemplates to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate create
   */
  export type EmailTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailTemplate.
     */
    data: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
  }

  /**
   * EmailTemplate createMany
   */
  export type EmailTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailTemplate createManyAndReturn
   */
  export type EmailTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailTemplate update
   */
  export type EmailTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailTemplate.
     */
    data: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
    /**
     * Choose, which EmailTemplate to update.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate updateMany
   */
  export type EmailTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
  }

  /**
   * EmailTemplate updateManyAndReturn
   */
  export type EmailTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
  }

  /**
   * EmailTemplate upsert
   */
  export type EmailTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailTemplate to update in case it exists.
     */
    where: EmailTemplateWhereUniqueInput
    /**
     * In case the EmailTemplate found by the `where` argument doesn't exist, create a new EmailTemplate with this data.
     */
    create: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
    /**
     * In case the EmailTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
  }

  /**
   * EmailTemplate delete
   */
  export type EmailTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Filter which EmailTemplate to delete.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate deleteMany
   */
  export type EmailTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplates to delete
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to delete.
     */
    limit?: number
  }

  /**
   * EmailTemplate without action
   */
  export type EmailTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
  }


  /**
   * Model SMSTemplate
   */

  export type AggregateSMSTemplate = {
    _count: SMSTemplateCountAggregateOutputType | null
    _min: SMSTemplateMinAggregateOutputType | null
    _max: SMSTemplateMaxAggregateOutputType | null
  }

  export type SMSTemplateMinAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    description: string | null
    content: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SMSTemplateMaxAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    description: string | null
    content: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SMSTemplateCountAggregateOutputType = {
    id: number
    type: number
    name: number
    description: number
    content: number
    isActive: number
    variables: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SMSTemplateMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    content?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SMSTemplateMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    content?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SMSTemplateCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    description?: true
    content?: true
    isActive?: true
    variables?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SMSTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SMSTemplate to aggregate.
     */
    where?: SMSTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SMSTemplates to fetch.
     */
    orderBy?: SMSTemplateOrderByWithRelationInput | SMSTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SMSTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SMSTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SMSTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SMSTemplates
    **/
    _count?: true | SMSTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SMSTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SMSTemplateMaxAggregateInputType
  }

  export type GetSMSTemplateAggregateType<T extends SMSTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateSMSTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSMSTemplate[P]>
      : GetScalarType<T[P], AggregateSMSTemplate[P]>
  }




  export type SMSTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SMSTemplateWhereInput
    orderBy?: SMSTemplateOrderByWithAggregationInput | SMSTemplateOrderByWithAggregationInput[]
    by: SMSTemplateScalarFieldEnum[] | SMSTemplateScalarFieldEnum
    having?: SMSTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SMSTemplateCountAggregateInputType | true
    _min?: SMSTemplateMinAggregateInputType
    _max?: SMSTemplateMaxAggregateInputType
  }

  export type SMSTemplateGroupByOutputType = {
    id: string
    type: string
    name: string
    description: string | null
    content: string
    isActive: boolean
    variables: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: SMSTemplateCountAggregateOutputType | null
    _min: SMSTemplateMinAggregateOutputType | null
    _max: SMSTemplateMaxAggregateOutputType | null
  }

  type GetSMSTemplateGroupByPayload<T extends SMSTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SMSTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SMSTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SMSTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], SMSTemplateGroupByOutputType[P]>
        }
      >
    >


  export type SMSTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    content?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sMSTemplate"]>

  export type SMSTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    content?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sMSTemplate"]>

  export type SMSTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    content?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sMSTemplate"]>

  export type SMSTemplateSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    description?: boolean
    content?: boolean
    isActive?: boolean
    variables?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SMSTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "name" | "description" | "content" | "isActive" | "variables" | "createdAt" | "updatedAt", ExtArgs["result"]["sMSTemplate"]>

  export type $SMSTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SMSTemplate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      name: string
      description: string | null
      content: string
      isActive: boolean
      variables: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sMSTemplate"]>
    composites: {}
  }

  type SMSTemplateGetPayload<S extends boolean | null | undefined | SMSTemplateDefaultArgs> = $Result.GetResult<Prisma.$SMSTemplatePayload, S>

  type SMSTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SMSTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SMSTemplateCountAggregateInputType | true
    }

  export interface SMSTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SMSTemplate'], meta: { name: 'SMSTemplate' } }
    /**
     * Find zero or one SMSTemplate that matches the filter.
     * @param {SMSTemplateFindUniqueArgs} args - Arguments to find a SMSTemplate
     * @example
     * // Get one SMSTemplate
     * const sMSTemplate = await prisma.sMSTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SMSTemplateFindUniqueArgs>(args: SelectSubset<T, SMSTemplateFindUniqueArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SMSTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SMSTemplateFindUniqueOrThrowArgs} args - Arguments to find a SMSTemplate
     * @example
     * // Get one SMSTemplate
     * const sMSTemplate = await prisma.sMSTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SMSTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, SMSTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SMSTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateFindFirstArgs} args - Arguments to find a SMSTemplate
     * @example
     * // Get one SMSTemplate
     * const sMSTemplate = await prisma.sMSTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SMSTemplateFindFirstArgs>(args?: SelectSubset<T, SMSTemplateFindFirstArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SMSTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateFindFirstOrThrowArgs} args - Arguments to find a SMSTemplate
     * @example
     * // Get one SMSTemplate
     * const sMSTemplate = await prisma.sMSTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SMSTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, SMSTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SMSTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SMSTemplates
     * const sMSTemplates = await prisma.sMSTemplate.findMany()
     * 
     * // Get first 10 SMSTemplates
     * const sMSTemplates = await prisma.sMSTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sMSTemplateWithIdOnly = await prisma.sMSTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SMSTemplateFindManyArgs>(args?: SelectSubset<T, SMSTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SMSTemplate.
     * @param {SMSTemplateCreateArgs} args - Arguments to create a SMSTemplate.
     * @example
     * // Create one SMSTemplate
     * const SMSTemplate = await prisma.sMSTemplate.create({
     *   data: {
     *     // ... data to create a SMSTemplate
     *   }
     * })
     * 
     */
    create<T extends SMSTemplateCreateArgs>(args: SelectSubset<T, SMSTemplateCreateArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SMSTemplates.
     * @param {SMSTemplateCreateManyArgs} args - Arguments to create many SMSTemplates.
     * @example
     * // Create many SMSTemplates
     * const sMSTemplate = await prisma.sMSTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SMSTemplateCreateManyArgs>(args?: SelectSubset<T, SMSTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SMSTemplates and returns the data saved in the database.
     * @param {SMSTemplateCreateManyAndReturnArgs} args - Arguments to create many SMSTemplates.
     * @example
     * // Create many SMSTemplates
     * const sMSTemplate = await prisma.sMSTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SMSTemplates and only return the `id`
     * const sMSTemplateWithIdOnly = await prisma.sMSTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SMSTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, SMSTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SMSTemplate.
     * @param {SMSTemplateDeleteArgs} args - Arguments to delete one SMSTemplate.
     * @example
     * // Delete one SMSTemplate
     * const SMSTemplate = await prisma.sMSTemplate.delete({
     *   where: {
     *     // ... filter to delete one SMSTemplate
     *   }
     * })
     * 
     */
    delete<T extends SMSTemplateDeleteArgs>(args: SelectSubset<T, SMSTemplateDeleteArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SMSTemplate.
     * @param {SMSTemplateUpdateArgs} args - Arguments to update one SMSTemplate.
     * @example
     * // Update one SMSTemplate
     * const sMSTemplate = await prisma.sMSTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SMSTemplateUpdateArgs>(args: SelectSubset<T, SMSTemplateUpdateArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SMSTemplates.
     * @param {SMSTemplateDeleteManyArgs} args - Arguments to filter SMSTemplates to delete.
     * @example
     * // Delete a few SMSTemplates
     * const { count } = await prisma.sMSTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SMSTemplateDeleteManyArgs>(args?: SelectSubset<T, SMSTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SMSTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SMSTemplates
     * const sMSTemplate = await prisma.sMSTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SMSTemplateUpdateManyArgs>(args: SelectSubset<T, SMSTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SMSTemplates and returns the data updated in the database.
     * @param {SMSTemplateUpdateManyAndReturnArgs} args - Arguments to update many SMSTemplates.
     * @example
     * // Update many SMSTemplates
     * const sMSTemplate = await prisma.sMSTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SMSTemplates and only return the `id`
     * const sMSTemplateWithIdOnly = await prisma.sMSTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SMSTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, SMSTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SMSTemplate.
     * @param {SMSTemplateUpsertArgs} args - Arguments to update or create a SMSTemplate.
     * @example
     * // Update or create a SMSTemplate
     * const sMSTemplate = await prisma.sMSTemplate.upsert({
     *   create: {
     *     // ... data to create a SMSTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SMSTemplate we want to update
     *   }
     * })
     */
    upsert<T extends SMSTemplateUpsertArgs>(args: SelectSubset<T, SMSTemplateUpsertArgs<ExtArgs>>): Prisma__SMSTemplateClient<$Result.GetResult<Prisma.$SMSTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SMSTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateCountArgs} args - Arguments to filter SMSTemplates to count.
     * @example
     * // Count the number of SMSTemplates
     * const count = await prisma.sMSTemplate.count({
     *   where: {
     *     // ... the filter for the SMSTemplates we want to count
     *   }
     * })
    **/
    count<T extends SMSTemplateCountArgs>(
      args?: Subset<T, SMSTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SMSTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SMSTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SMSTemplateAggregateArgs>(args: Subset<T, SMSTemplateAggregateArgs>): Prisma.PrismaPromise<GetSMSTemplateAggregateType<T>>

    /**
     * Group by SMSTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SMSTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SMSTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SMSTemplateGroupByArgs['orderBy'] }
        : { orderBy?: SMSTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SMSTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSMSTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SMSTemplate model
   */
  readonly fields: SMSTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SMSTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SMSTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SMSTemplate model
   */
  interface SMSTemplateFieldRefs {
    readonly id: FieldRef<"SMSTemplate", 'String'>
    readonly type: FieldRef<"SMSTemplate", 'String'>
    readonly name: FieldRef<"SMSTemplate", 'String'>
    readonly description: FieldRef<"SMSTemplate", 'String'>
    readonly content: FieldRef<"SMSTemplate", 'String'>
    readonly isActive: FieldRef<"SMSTemplate", 'Boolean'>
    readonly variables: FieldRef<"SMSTemplate", 'Json'>
    readonly createdAt: FieldRef<"SMSTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"SMSTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SMSTemplate findUnique
   */
  export type SMSTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * Filter, which SMSTemplate to fetch.
     */
    where: SMSTemplateWhereUniqueInput
  }

  /**
   * SMSTemplate findUniqueOrThrow
   */
  export type SMSTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * Filter, which SMSTemplate to fetch.
     */
    where: SMSTemplateWhereUniqueInput
  }

  /**
   * SMSTemplate findFirst
   */
  export type SMSTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * Filter, which SMSTemplate to fetch.
     */
    where?: SMSTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SMSTemplates to fetch.
     */
    orderBy?: SMSTemplateOrderByWithRelationInput | SMSTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SMSTemplates.
     */
    cursor?: SMSTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SMSTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SMSTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SMSTemplates.
     */
    distinct?: SMSTemplateScalarFieldEnum | SMSTemplateScalarFieldEnum[]
  }

  /**
   * SMSTemplate findFirstOrThrow
   */
  export type SMSTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * Filter, which SMSTemplate to fetch.
     */
    where?: SMSTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SMSTemplates to fetch.
     */
    orderBy?: SMSTemplateOrderByWithRelationInput | SMSTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SMSTemplates.
     */
    cursor?: SMSTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SMSTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SMSTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SMSTemplates.
     */
    distinct?: SMSTemplateScalarFieldEnum | SMSTemplateScalarFieldEnum[]
  }

  /**
   * SMSTemplate findMany
   */
  export type SMSTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * Filter, which SMSTemplates to fetch.
     */
    where?: SMSTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SMSTemplates to fetch.
     */
    orderBy?: SMSTemplateOrderByWithRelationInput | SMSTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SMSTemplates.
     */
    cursor?: SMSTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SMSTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SMSTemplates.
     */
    skip?: number
    distinct?: SMSTemplateScalarFieldEnum | SMSTemplateScalarFieldEnum[]
  }

  /**
   * SMSTemplate create
   */
  export type SMSTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * The data needed to create a SMSTemplate.
     */
    data: XOR<SMSTemplateCreateInput, SMSTemplateUncheckedCreateInput>
  }

  /**
   * SMSTemplate createMany
   */
  export type SMSTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SMSTemplates.
     */
    data: SMSTemplateCreateManyInput | SMSTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SMSTemplate createManyAndReturn
   */
  export type SMSTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many SMSTemplates.
     */
    data: SMSTemplateCreateManyInput | SMSTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SMSTemplate update
   */
  export type SMSTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * The data needed to update a SMSTemplate.
     */
    data: XOR<SMSTemplateUpdateInput, SMSTemplateUncheckedUpdateInput>
    /**
     * Choose, which SMSTemplate to update.
     */
    where: SMSTemplateWhereUniqueInput
  }

  /**
   * SMSTemplate updateMany
   */
  export type SMSTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SMSTemplates.
     */
    data: XOR<SMSTemplateUpdateManyMutationInput, SMSTemplateUncheckedUpdateManyInput>
    /**
     * Filter which SMSTemplates to update
     */
    where?: SMSTemplateWhereInput
    /**
     * Limit how many SMSTemplates to update.
     */
    limit?: number
  }

  /**
   * SMSTemplate updateManyAndReturn
   */
  export type SMSTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * The data used to update SMSTemplates.
     */
    data: XOR<SMSTemplateUpdateManyMutationInput, SMSTemplateUncheckedUpdateManyInput>
    /**
     * Filter which SMSTemplates to update
     */
    where?: SMSTemplateWhereInput
    /**
     * Limit how many SMSTemplates to update.
     */
    limit?: number
  }

  /**
   * SMSTemplate upsert
   */
  export type SMSTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * The filter to search for the SMSTemplate to update in case it exists.
     */
    where: SMSTemplateWhereUniqueInput
    /**
     * In case the SMSTemplate found by the `where` argument doesn't exist, create a new SMSTemplate with this data.
     */
    create: XOR<SMSTemplateCreateInput, SMSTemplateUncheckedCreateInput>
    /**
     * In case the SMSTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SMSTemplateUpdateInput, SMSTemplateUncheckedUpdateInput>
  }

  /**
   * SMSTemplate delete
   */
  export type SMSTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
    /**
     * Filter which SMSTemplate to delete.
     */
    where: SMSTemplateWhereUniqueInput
  }

  /**
   * SMSTemplate deleteMany
   */
  export type SMSTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SMSTemplates to delete
     */
    where?: SMSTemplateWhereInput
    /**
     * Limit how many SMSTemplates to delete.
     */
    limit?: number
  }

  /**
   * SMSTemplate without action
   */
  export type SMSTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SMSTemplate
     */
    select?: SMSTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SMSTemplate
     */
    omit?: SMSTemplateOmit<ExtArgs> | null
  }


  /**
   * Model ActivityLog
   */

  export type AggregateActivityLog = {
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  export type ActivityLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    details: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type ActivityLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    details: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type ActivityLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    details: number
    entityType: number
    entityId: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type ActivityLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type ActivityLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type ActivityLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLog to aggregate.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLogs
    **/
    _count?: true | ActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLogMaxAggregateInputType
  }

  export type GetActivityLogAggregateType<T extends ActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLog[P]>
      : GetScalarType<T[P], AggregateActivityLog[P]>
  }




  export type ActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithAggregationInput | ActivityLogOrderByWithAggregationInput[]
    by: ActivityLogScalarFieldEnum[] | ActivityLogScalarFieldEnum
    having?: ActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLogCountAggregateInputType | true
    _min?: ActivityLogMinAggregateInputType
    _max?: ActivityLogMaxAggregateInputType
  }

  export type ActivityLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    details: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  type GetActivityLogGroupByPayload<T extends ActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    entityType?: boolean
    entityId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    entityType?: boolean
    entityId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    entityType?: boolean
    entityId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    entityType?: boolean
    entityId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type ActivityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "details" | "entityType" | "entityId" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["activityLog"]>
  export type ActivityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      details: string | null
      entityType: string | null
      entityId: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["activityLog"]>
    composites: {}
  }

  type ActivityLogGetPayload<S extends boolean | null | undefined | ActivityLogDefaultArgs> = $Result.GetResult<Prisma.$ActivityLogPayload, S>

  type ActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityLogCountAggregateInputType | true
    }

  export interface ActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLog'], meta: { name: 'ActivityLog' } }
    /**
     * Find zero or one ActivityLog that matches the filter.
     * @param {ActivityLogFindUniqueArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLogFindUniqueArgs>(args: SelectSubset<T, ActivityLogFindUniqueArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityLogFindUniqueOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLogFindFirstArgs>(args?: SelectSubset<T, ActivityLogFindFirstArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany()
     * 
     * // Get first 10 ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLogFindManyArgs>(args?: SelectSubset<T, ActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityLog.
     * @param {ActivityLogCreateArgs} args - Arguments to create a ActivityLog.
     * @example
     * // Create one ActivityLog
     * const ActivityLog = await prisma.activityLog.create({
     *   data: {
     *     // ... data to create a ActivityLog
     *   }
     * })
     * 
     */
    create<T extends ActivityLogCreateArgs>(args: SelectSubset<T, ActivityLogCreateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityLogs.
     * @param {ActivityLogCreateManyArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLogCreateManyArgs>(args?: SelectSubset<T, ActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLogs and returns the data saved in the database.
     * @param {ActivityLogCreateManyAndReturnArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityLog.
     * @param {ActivityLogDeleteArgs} args - Arguments to delete one ActivityLog.
     * @example
     * // Delete one ActivityLog
     * const ActivityLog = await prisma.activityLog.delete({
     *   where: {
     *     // ... filter to delete one ActivityLog
     *   }
     * })
     * 
     */
    delete<T extends ActivityLogDeleteArgs>(args: SelectSubset<T, ActivityLogDeleteArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityLog.
     * @param {ActivityLogUpdateArgs} args - Arguments to update one ActivityLog.
     * @example
     * // Update one ActivityLog
     * const activityLog = await prisma.activityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLogUpdateArgs>(args: SelectSubset<T, ActivityLogUpdateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityLogs.
     * @param {ActivityLogDeleteManyArgs} args - Arguments to filter ActivityLogs to delete.
     * @example
     * // Delete a few ActivityLogs
     * const { count } = await prisma.activityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLogDeleteManyArgs>(args?: SelectSubset<T, ActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLogUpdateManyArgs>(args: SelectSubset<T, ActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs and returns the data updated in the database.
     * @param {ActivityLogUpdateManyAndReturnArgs} args - Arguments to update many ActivityLogs.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityLog.
     * @param {ActivityLogUpsertArgs} args - Arguments to update or create a ActivityLog.
     * @example
     * // Update or create a ActivityLog
     * const activityLog = await prisma.activityLog.upsert({
     *   create: {
     *     // ... data to create a ActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLogUpsertArgs>(args: SelectSubset<T, ActivityLogUpsertArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogCountArgs} args - Arguments to filter ActivityLogs to count.
     * @example
     * // Count the number of ActivityLogs
     * const count = await prisma.activityLog.count({
     *   where: {
     *     // ... the filter for the ActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends ActivityLogCountArgs>(
      args?: Subset<T, ActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLogAggregateArgs>(args: Subset<T, ActivityLogAggregateArgs>): Prisma.PrismaPromise<GetActivityLogAggregateType<T>>

    /**
     * Group by ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLog model
   */
  readonly fields: ActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLog model
   */
  interface ActivityLogFieldRefs {
    readonly id: FieldRef<"ActivityLog", 'String'>
    readonly userId: FieldRef<"ActivityLog", 'String'>
    readonly action: FieldRef<"ActivityLog", 'String'>
    readonly details: FieldRef<"ActivityLog", 'String'>
    readonly entityType: FieldRef<"ActivityLog", 'String'>
    readonly entityId: FieldRef<"ActivityLog", 'String'>
    readonly ipAddress: FieldRef<"ActivityLog", 'String'>
    readonly userAgent: FieldRef<"ActivityLog", 'String'>
    readonly createdAt: FieldRef<"ActivityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLog findUnique
   */
  export type ActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findUniqueOrThrow
   */
  export type ActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findFirst
   */
  export type ActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findFirstOrThrow
   */
  export type ActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findMany
   */
  export type ActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog create
   */
  export type ActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLog.
     */
    data: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
  }

  /**
   * ActivityLog createMany
   */
  export type ActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLog createManyAndReturn
   */
  export type ActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog update
   */
  export type ActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLog.
     */
    data: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
    /**
     * Choose, which ActivityLog to update.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog updateMany
   */
  export type ActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
  }

  /**
   * ActivityLog updateManyAndReturn
   */
  export type ActivityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog upsert
   */
  export type ActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLog to update in case it exists.
     */
    where: ActivityLogWhereUniqueInput
    /**
     * In case the ActivityLog found by the `where` argument doesn't exist, create a new ActivityLog with this data.
     */
    create: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
    /**
     * In case the ActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
  }

  /**
   * ActivityLog delete
   */
  export type ActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter which ActivityLog to delete.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog deleteMany
   */
  export type ActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to delete
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * ActivityLog without action
   */
  export type ActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    used: boolean | null
    createdAt: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    used: number
    createdAt: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    used?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    used: boolean
    createdAt: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    used?: boolean
    createdAt?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "expiresAt" | "used" | "createdAt", ExtArgs["result"]["passwordResetToken"]>
  export type PasswordResetTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      used: boolean
      createdAt: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly userId: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly expiresAt: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly used: FieldRef<"PasswordResetToken", 'Boolean'>
    readonly createdAt: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
  }


  /**
   * Model BalanceTransaction
   */

  export type AggregateBalanceTransaction = {
    _count: BalanceTransactionCountAggregateOutputType | null
    _avg: BalanceTransactionAvgAggregateOutputType | null
    _sum: BalanceTransactionSumAggregateOutputType | null
    _min: BalanceTransactionMinAggregateOutputType | null
    _max: BalanceTransactionMaxAggregateOutputType | null
  }

  export type BalanceTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type BalanceTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type BalanceTransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: number | null
    type: string | null
    description: string | null
    relatedId: string | null
    adminId: string | null
    createdAt: Date | null
  }

  export type BalanceTransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: number | null
    type: string | null
    description: string | null
    relatedId: string | null
    adminId: string | null
    createdAt: Date | null
  }

  export type BalanceTransactionCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    type: number
    description: number
    relatedId: number
    adminId: number
    createdAt: number
    _all: number
  }


  export type BalanceTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type BalanceTransactionSumAggregateInputType = {
    amount?: true
  }

  export type BalanceTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    description?: true
    relatedId?: true
    adminId?: true
    createdAt?: true
  }

  export type BalanceTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    description?: true
    relatedId?: true
    adminId?: true
    createdAt?: true
  }

  export type BalanceTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    description?: true
    relatedId?: true
    adminId?: true
    createdAt?: true
    _all?: true
  }

  export type BalanceTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BalanceTransaction to aggregate.
     */
    where?: BalanceTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalanceTransactions to fetch.
     */
    orderBy?: BalanceTransactionOrderByWithRelationInput | BalanceTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BalanceTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalanceTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalanceTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BalanceTransactions
    **/
    _count?: true | BalanceTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BalanceTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BalanceTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BalanceTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BalanceTransactionMaxAggregateInputType
  }

  export type GetBalanceTransactionAggregateType<T extends BalanceTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateBalanceTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalanceTransaction[P]>
      : GetScalarType<T[P], AggregateBalanceTransaction[P]>
  }




  export type BalanceTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BalanceTransactionWhereInput
    orderBy?: BalanceTransactionOrderByWithAggregationInput | BalanceTransactionOrderByWithAggregationInput[]
    by: BalanceTransactionScalarFieldEnum[] | BalanceTransactionScalarFieldEnum
    having?: BalanceTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BalanceTransactionCountAggregateInputType | true
    _avg?: BalanceTransactionAvgAggregateInputType
    _sum?: BalanceTransactionSumAggregateInputType
    _min?: BalanceTransactionMinAggregateInputType
    _max?: BalanceTransactionMaxAggregateInputType
  }

  export type BalanceTransactionGroupByOutputType = {
    id: string
    userId: string
    amount: number
    type: string
    description: string | null
    relatedId: string | null
    adminId: string | null
    createdAt: Date
    _count: BalanceTransactionCountAggregateOutputType | null
    _avg: BalanceTransactionAvgAggregateOutputType | null
    _sum: BalanceTransactionSumAggregateOutputType | null
    _min: BalanceTransactionMinAggregateOutputType | null
    _max: BalanceTransactionMaxAggregateOutputType | null
  }

  type GetBalanceTransactionGroupByPayload<T extends BalanceTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BalanceTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BalanceTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BalanceTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], BalanceTransactionGroupByOutputType[P]>
        }
      >
    >


  export type BalanceTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    relatedId?: boolean
    adminId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balanceTransaction"]>

  export type BalanceTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    relatedId?: boolean
    adminId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balanceTransaction"]>

  export type BalanceTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    relatedId?: boolean
    adminId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["balanceTransaction"]>

  export type BalanceTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    relatedId?: boolean
    adminId?: boolean
    createdAt?: boolean
  }

  export type BalanceTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "amount" | "type" | "description" | "relatedId" | "adminId" | "createdAt", ExtArgs["result"]["balanceTransaction"]>
  export type BalanceTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BalanceTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BalanceTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BalanceTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BalanceTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      amount: number
      type: string
      description: string | null
      relatedId: string | null
      adminId: string | null
      createdAt: Date
    }, ExtArgs["result"]["balanceTransaction"]>
    composites: {}
  }

  type BalanceTransactionGetPayload<S extends boolean | null | undefined | BalanceTransactionDefaultArgs> = $Result.GetResult<Prisma.$BalanceTransactionPayload, S>

  type BalanceTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BalanceTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BalanceTransactionCountAggregateInputType | true
    }

  export interface BalanceTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BalanceTransaction'], meta: { name: 'BalanceTransaction' } }
    /**
     * Find zero or one BalanceTransaction that matches the filter.
     * @param {BalanceTransactionFindUniqueArgs} args - Arguments to find a BalanceTransaction
     * @example
     * // Get one BalanceTransaction
     * const balanceTransaction = await prisma.balanceTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BalanceTransactionFindUniqueArgs>(args: SelectSubset<T, BalanceTransactionFindUniqueArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BalanceTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BalanceTransactionFindUniqueOrThrowArgs} args - Arguments to find a BalanceTransaction
     * @example
     * // Get one BalanceTransaction
     * const balanceTransaction = await prisma.balanceTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BalanceTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, BalanceTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BalanceTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionFindFirstArgs} args - Arguments to find a BalanceTransaction
     * @example
     * // Get one BalanceTransaction
     * const balanceTransaction = await prisma.balanceTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BalanceTransactionFindFirstArgs>(args?: SelectSubset<T, BalanceTransactionFindFirstArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BalanceTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionFindFirstOrThrowArgs} args - Arguments to find a BalanceTransaction
     * @example
     * // Get one BalanceTransaction
     * const balanceTransaction = await prisma.balanceTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BalanceTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, BalanceTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BalanceTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BalanceTransactions
     * const balanceTransactions = await prisma.balanceTransaction.findMany()
     * 
     * // Get first 10 BalanceTransactions
     * const balanceTransactions = await prisma.balanceTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balanceTransactionWithIdOnly = await prisma.balanceTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BalanceTransactionFindManyArgs>(args?: SelectSubset<T, BalanceTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BalanceTransaction.
     * @param {BalanceTransactionCreateArgs} args - Arguments to create a BalanceTransaction.
     * @example
     * // Create one BalanceTransaction
     * const BalanceTransaction = await prisma.balanceTransaction.create({
     *   data: {
     *     // ... data to create a BalanceTransaction
     *   }
     * })
     * 
     */
    create<T extends BalanceTransactionCreateArgs>(args: SelectSubset<T, BalanceTransactionCreateArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BalanceTransactions.
     * @param {BalanceTransactionCreateManyArgs} args - Arguments to create many BalanceTransactions.
     * @example
     * // Create many BalanceTransactions
     * const balanceTransaction = await prisma.balanceTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BalanceTransactionCreateManyArgs>(args?: SelectSubset<T, BalanceTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BalanceTransactions and returns the data saved in the database.
     * @param {BalanceTransactionCreateManyAndReturnArgs} args - Arguments to create many BalanceTransactions.
     * @example
     * // Create many BalanceTransactions
     * const balanceTransaction = await prisma.balanceTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BalanceTransactions and only return the `id`
     * const balanceTransactionWithIdOnly = await prisma.balanceTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BalanceTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, BalanceTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BalanceTransaction.
     * @param {BalanceTransactionDeleteArgs} args - Arguments to delete one BalanceTransaction.
     * @example
     * // Delete one BalanceTransaction
     * const BalanceTransaction = await prisma.balanceTransaction.delete({
     *   where: {
     *     // ... filter to delete one BalanceTransaction
     *   }
     * })
     * 
     */
    delete<T extends BalanceTransactionDeleteArgs>(args: SelectSubset<T, BalanceTransactionDeleteArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BalanceTransaction.
     * @param {BalanceTransactionUpdateArgs} args - Arguments to update one BalanceTransaction.
     * @example
     * // Update one BalanceTransaction
     * const balanceTransaction = await prisma.balanceTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BalanceTransactionUpdateArgs>(args: SelectSubset<T, BalanceTransactionUpdateArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BalanceTransactions.
     * @param {BalanceTransactionDeleteManyArgs} args - Arguments to filter BalanceTransactions to delete.
     * @example
     * // Delete a few BalanceTransactions
     * const { count } = await prisma.balanceTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BalanceTransactionDeleteManyArgs>(args?: SelectSubset<T, BalanceTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BalanceTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BalanceTransactions
     * const balanceTransaction = await prisma.balanceTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BalanceTransactionUpdateManyArgs>(args: SelectSubset<T, BalanceTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BalanceTransactions and returns the data updated in the database.
     * @param {BalanceTransactionUpdateManyAndReturnArgs} args - Arguments to update many BalanceTransactions.
     * @example
     * // Update many BalanceTransactions
     * const balanceTransaction = await prisma.balanceTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BalanceTransactions and only return the `id`
     * const balanceTransactionWithIdOnly = await prisma.balanceTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BalanceTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, BalanceTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BalanceTransaction.
     * @param {BalanceTransactionUpsertArgs} args - Arguments to update or create a BalanceTransaction.
     * @example
     * // Update or create a BalanceTransaction
     * const balanceTransaction = await prisma.balanceTransaction.upsert({
     *   create: {
     *     // ... data to create a BalanceTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BalanceTransaction we want to update
     *   }
     * })
     */
    upsert<T extends BalanceTransactionUpsertArgs>(args: SelectSubset<T, BalanceTransactionUpsertArgs<ExtArgs>>): Prisma__BalanceTransactionClient<$Result.GetResult<Prisma.$BalanceTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BalanceTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionCountArgs} args - Arguments to filter BalanceTransactions to count.
     * @example
     * // Count the number of BalanceTransactions
     * const count = await prisma.balanceTransaction.count({
     *   where: {
     *     // ... the filter for the BalanceTransactions we want to count
     *   }
     * })
    **/
    count<T extends BalanceTransactionCountArgs>(
      args?: Subset<T, BalanceTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BalanceTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BalanceTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BalanceTransactionAggregateArgs>(args: Subset<T, BalanceTransactionAggregateArgs>): Prisma.PrismaPromise<GetBalanceTransactionAggregateType<T>>

    /**
     * Group by BalanceTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BalanceTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BalanceTransactionGroupByArgs['orderBy'] }
        : { orderBy?: BalanceTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BalanceTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BalanceTransaction model
   */
  readonly fields: BalanceTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BalanceTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BalanceTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BalanceTransaction model
   */
  interface BalanceTransactionFieldRefs {
    readonly id: FieldRef<"BalanceTransaction", 'String'>
    readonly userId: FieldRef<"BalanceTransaction", 'String'>
    readonly amount: FieldRef<"BalanceTransaction", 'Float'>
    readonly type: FieldRef<"BalanceTransaction", 'String'>
    readonly description: FieldRef<"BalanceTransaction", 'String'>
    readonly relatedId: FieldRef<"BalanceTransaction", 'String'>
    readonly adminId: FieldRef<"BalanceTransaction", 'String'>
    readonly createdAt: FieldRef<"BalanceTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BalanceTransaction findUnique
   */
  export type BalanceTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BalanceTransaction to fetch.
     */
    where: BalanceTransactionWhereUniqueInput
  }

  /**
   * BalanceTransaction findUniqueOrThrow
   */
  export type BalanceTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BalanceTransaction to fetch.
     */
    where: BalanceTransactionWhereUniqueInput
  }

  /**
   * BalanceTransaction findFirst
   */
  export type BalanceTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BalanceTransaction to fetch.
     */
    where?: BalanceTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalanceTransactions to fetch.
     */
    orderBy?: BalanceTransactionOrderByWithRelationInput | BalanceTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BalanceTransactions.
     */
    cursor?: BalanceTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalanceTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalanceTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BalanceTransactions.
     */
    distinct?: BalanceTransactionScalarFieldEnum | BalanceTransactionScalarFieldEnum[]
  }

  /**
   * BalanceTransaction findFirstOrThrow
   */
  export type BalanceTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BalanceTransaction to fetch.
     */
    where?: BalanceTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalanceTransactions to fetch.
     */
    orderBy?: BalanceTransactionOrderByWithRelationInput | BalanceTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BalanceTransactions.
     */
    cursor?: BalanceTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalanceTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalanceTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BalanceTransactions.
     */
    distinct?: BalanceTransactionScalarFieldEnum | BalanceTransactionScalarFieldEnum[]
  }

  /**
   * BalanceTransaction findMany
   */
  export type BalanceTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * Filter, which BalanceTransactions to fetch.
     */
    where?: BalanceTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BalanceTransactions to fetch.
     */
    orderBy?: BalanceTransactionOrderByWithRelationInput | BalanceTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BalanceTransactions.
     */
    cursor?: BalanceTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BalanceTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BalanceTransactions.
     */
    skip?: number
    distinct?: BalanceTransactionScalarFieldEnum | BalanceTransactionScalarFieldEnum[]
  }

  /**
   * BalanceTransaction create
   */
  export type BalanceTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a BalanceTransaction.
     */
    data: XOR<BalanceTransactionCreateInput, BalanceTransactionUncheckedCreateInput>
  }

  /**
   * BalanceTransaction createMany
   */
  export type BalanceTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BalanceTransactions.
     */
    data: BalanceTransactionCreateManyInput | BalanceTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BalanceTransaction createManyAndReturn
   */
  export type BalanceTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many BalanceTransactions.
     */
    data: BalanceTransactionCreateManyInput | BalanceTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BalanceTransaction update
   */
  export type BalanceTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a BalanceTransaction.
     */
    data: XOR<BalanceTransactionUpdateInput, BalanceTransactionUncheckedUpdateInput>
    /**
     * Choose, which BalanceTransaction to update.
     */
    where: BalanceTransactionWhereUniqueInput
  }

  /**
   * BalanceTransaction updateMany
   */
  export type BalanceTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BalanceTransactions.
     */
    data: XOR<BalanceTransactionUpdateManyMutationInput, BalanceTransactionUncheckedUpdateManyInput>
    /**
     * Filter which BalanceTransactions to update
     */
    where?: BalanceTransactionWhereInput
    /**
     * Limit how many BalanceTransactions to update.
     */
    limit?: number
  }

  /**
   * BalanceTransaction updateManyAndReturn
   */
  export type BalanceTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * The data used to update BalanceTransactions.
     */
    data: XOR<BalanceTransactionUpdateManyMutationInput, BalanceTransactionUncheckedUpdateManyInput>
    /**
     * Filter which BalanceTransactions to update
     */
    where?: BalanceTransactionWhereInput
    /**
     * Limit how many BalanceTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BalanceTransaction upsert
   */
  export type BalanceTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the BalanceTransaction to update in case it exists.
     */
    where: BalanceTransactionWhereUniqueInput
    /**
     * In case the BalanceTransaction found by the `where` argument doesn't exist, create a new BalanceTransaction with this data.
     */
    create: XOR<BalanceTransactionCreateInput, BalanceTransactionUncheckedCreateInput>
    /**
     * In case the BalanceTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BalanceTransactionUpdateInput, BalanceTransactionUncheckedUpdateInput>
  }

  /**
   * BalanceTransaction delete
   */
  export type BalanceTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
    /**
     * Filter which BalanceTransaction to delete.
     */
    where: BalanceTransactionWhereUniqueInput
  }

  /**
   * BalanceTransaction deleteMany
   */
  export type BalanceTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BalanceTransactions to delete
     */
    where?: BalanceTransactionWhereInput
    /**
     * Limit how many BalanceTransactions to delete.
     */
    limit?: number
  }

  /**
   * BalanceTransaction without action
   */
  export type BalanceTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BalanceTransaction
     */
    select?: BalanceTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BalanceTransaction
     */
    omit?: BalanceTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BalanceTransactionInclude<ExtArgs> | null
  }


  /**
   * Model NotificationType
   */

  export type AggregateNotificationType = {
    _count: NotificationTypeCountAggregateOutputType | null
    _min: NotificationTypeMinAggregateOutputType | null
    _max: NotificationTypeMaxAggregateOutputType | null
  }

  export type NotificationTypeMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    defaultEnabled: boolean | null
    emailEnabled: boolean | null
    inAppEnabled: boolean | null
    icon: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationTypeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    defaultEnabled: boolean | null
    emailEnabled: boolean | null
    inAppEnabled: boolean | null
    icon: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationTypeCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    category: number
    defaultEnabled: number
    emailEnabled: number
    inAppEnabled: number
    icon: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationTypeMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    defaultEnabled?: true
    emailEnabled?: true
    inAppEnabled?: true
    icon?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationTypeMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    defaultEnabled?: true
    emailEnabled?: true
    inAppEnabled?: true
    icon?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationTypeCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    defaultEnabled?: true
    emailEnabled?: true
    inAppEnabled?: true
    icon?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationType to aggregate.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationTypes
    **/
    _count?: true | NotificationTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationTypeMaxAggregateInputType
  }

  export type GetNotificationTypeAggregateType<T extends NotificationTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationType[P]>
      : GetScalarType<T[P], AggregateNotificationType[P]>
  }




  export type NotificationTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTypeWhereInput
    orderBy?: NotificationTypeOrderByWithAggregationInput | NotificationTypeOrderByWithAggregationInput[]
    by: NotificationTypeScalarFieldEnum[] | NotificationTypeScalarFieldEnum
    having?: NotificationTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationTypeCountAggregateInputType | true
    _min?: NotificationTypeMinAggregateInputType
    _max?: NotificationTypeMaxAggregateInputType
  }

  export type NotificationTypeGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    category: string
    defaultEnabled: boolean
    emailEnabled: boolean
    inAppEnabled: boolean
    icon: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationTypeCountAggregateOutputType | null
    _min: NotificationTypeMinAggregateOutputType | null
    _max: NotificationTypeMaxAggregateOutputType | null
  }

  type GetNotificationTypeGroupByPayload<T extends NotificationTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationTypeGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationTypeGroupByOutputType[P]>
        }
      >
    >


  export type NotificationTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notifications?: boolean | NotificationType$notificationsArgs<ExtArgs>
    userPreferences?: boolean | NotificationType$userPreferencesArgs<ExtArgs>
    roleTypePermissions?: boolean | NotificationType$roleTypePermissionsArgs<ExtArgs>
    _count?: boolean | NotificationTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationType"]>

  export type NotificationTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["notificationType"]>

  export type NotificationTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["notificationType"]>

  export type NotificationTypeSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "description" | "category" | "defaultEnabled" | "emailEnabled" | "inAppEnabled" | "icon" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationType"]>
  export type NotificationTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | NotificationType$notificationsArgs<ExtArgs>
    userPreferences?: boolean | NotificationType$userPreferencesArgs<ExtArgs>
    roleTypePermissions?: boolean | NotificationType$roleTypePermissionsArgs<ExtArgs>
    _count?: boolean | NotificationTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type NotificationTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NotificationTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationType"
    objects: {
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      userPreferences: Prisma.$NotificationPreferencePayload<ExtArgs>[]
      roleTypePermissions: Prisma.$NotificationRolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      category: string
      defaultEnabled: boolean
      emailEnabled: boolean
      inAppEnabled: boolean
      icon: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationType"]>
    composites: {}
  }

  type NotificationTypeGetPayload<S extends boolean | null | undefined | NotificationTypeDefaultArgs> = $Result.GetResult<Prisma.$NotificationTypePayload, S>

  type NotificationTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationTypeCountAggregateInputType | true
    }

  export interface NotificationTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationType'], meta: { name: 'NotificationType' } }
    /**
     * Find zero or one NotificationType that matches the filter.
     * @param {NotificationTypeFindUniqueArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationTypeFindUniqueArgs>(args: SelectSubset<T, NotificationTypeFindUniqueArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationTypeFindUniqueOrThrowArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeFindFirstArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationTypeFindFirstArgs>(args?: SelectSubset<T, NotificationTypeFindFirstArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeFindFirstOrThrowArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationTypes
     * const notificationTypes = await prisma.notificationType.findMany()
     * 
     * // Get first 10 NotificationTypes
     * const notificationTypes = await prisma.notificationType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationTypeWithIdOnly = await prisma.notificationType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationTypeFindManyArgs>(args?: SelectSubset<T, NotificationTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationType.
     * @param {NotificationTypeCreateArgs} args - Arguments to create a NotificationType.
     * @example
     * // Create one NotificationType
     * const NotificationType = await prisma.notificationType.create({
     *   data: {
     *     // ... data to create a NotificationType
     *   }
     * })
     * 
     */
    create<T extends NotificationTypeCreateArgs>(args: SelectSubset<T, NotificationTypeCreateArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationTypes.
     * @param {NotificationTypeCreateManyArgs} args - Arguments to create many NotificationTypes.
     * @example
     * // Create many NotificationTypes
     * const notificationType = await prisma.notificationType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationTypeCreateManyArgs>(args?: SelectSubset<T, NotificationTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationTypes and returns the data saved in the database.
     * @param {NotificationTypeCreateManyAndReturnArgs} args - Arguments to create many NotificationTypes.
     * @example
     * // Create many NotificationTypes
     * const notificationType = await prisma.notificationType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationTypes and only return the `id`
     * const notificationTypeWithIdOnly = await prisma.notificationType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationType.
     * @param {NotificationTypeDeleteArgs} args - Arguments to delete one NotificationType.
     * @example
     * // Delete one NotificationType
     * const NotificationType = await prisma.notificationType.delete({
     *   where: {
     *     // ... filter to delete one NotificationType
     *   }
     * })
     * 
     */
    delete<T extends NotificationTypeDeleteArgs>(args: SelectSubset<T, NotificationTypeDeleteArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationType.
     * @param {NotificationTypeUpdateArgs} args - Arguments to update one NotificationType.
     * @example
     * // Update one NotificationType
     * const notificationType = await prisma.notificationType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationTypeUpdateArgs>(args: SelectSubset<T, NotificationTypeUpdateArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationTypes.
     * @param {NotificationTypeDeleteManyArgs} args - Arguments to filter NotificationTypes to delete.
     * @example
     * // Delete a few NotificationTypes
     * const { count } = await prisma.notificationType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationTypeDeleteManyArgs>(args?: SelectSubset<T, NotificationTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationTypes
     * const notificationType = await prisma.notificationType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationTypeUpdateManyArgs>(args: SelectSubset<T, NotificationTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTypes and returns the data updated in the database.
     * @param {NotificationTypeUpdateManyAndReturnArgs} args - Arguments to update many NotificationTypes.
     * @example
     * // Update many NotificationTypes
     * const notificationType = await prisma.notificationType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationTypes and only return the `id`
     * const notificationTypeWithIdOnly = await prisma.notificationType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationType.
     * @param {NotificationTypeUpsertArgs} args - Arguments to update or create a NotificationType.
     * @example
     * // Update or create a NotificationType
     * const notificationType = await prisma.notificationType.upsert({
     *   create: {
     *     // ... data to create a NotificationType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationType we want to update
     *   }
     * })
     */
    upsert<T extends NotificationTypeUpsertArgs>(args: SelectSubset<T, NotificationTypeUpsertArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeCountArgs} args - Arguments to filter NotificationTypes to count.
     * @example
     * // Count the number of NotificationTypes
     * const count = await prisma.notificationType.count({
     *   where: {
     *     // ... the filter for the NotificationTypes we want to count
     *   }
     * })
    **/
    count<T extends NotificationTypeCountArgs>(
      args?: Subset<T, NotificationTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationTypeAggregateArgs>(args: Subset<T, NotificationTypeAggregateArgs>): Prisma.PrismaPromise<GetNotificationTypeAggregateType<T>>

    /**
     * Group by NotificationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationTypeGroupByArgs['orderBy'] }
        : { orderBy?: NotificationTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationType model
   */
  readonly fields: NotificationTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notifications<T extends NotificationType$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, NotificationType$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userPreferences<T extends NotificationType$userPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, NotificationType$userPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roleTypePermissions<T extends NotificationType$roleTypePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, NotificationType$roleTypePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationType model
   */
  interface NotificationTypeFieldRefs {
    readonly id: FieldRef<"NotificationType", 'String'>
    readonly code: FieldRef<"NotificationType", 'String'>
    readonly name: FieldRef<"NotificationType", 'String'>
    readonly description: FieldRef<"NotificationType", 'String'>
    readonly category: FieldRef<"NotificationType", 'String'>
    readonly defaultEnabled: FieldRef<"NotificationType", 'Boolean'>
    readonly emailEnabled: FieldRef<"NotificationType", 'Boolean'>
    readonly inAppEnabled: FieldRef<"NotificationType", 'Boolean'>
    readonly icon: FieldRef<"NotificationType", 'String'>
    readonly isActive: FieldRef<"NotificationType", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationType", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationType findUnique
   */
  export type NotificationTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType findUniqueOrThrow
   */
  export type NotificationTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType findFirst
   */
  export type NotificationTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTypes.
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTypes.
     */
    distinct?: NotificationTypeScalarFieldEnum | NotificationTypeScalarFieldEnum[]
  }

  /**
   * NotificationType findFirstOrThrow
   */
  export type NotificationTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTypes.
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTypes.
     */
    distinct?: NotificationTypeScalarFieldEnum | NotificationTypeScalarFieldEnum[]
  }

  /**
   * NotificationType findMany
   */
  export type NotificationTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTypes to fetch.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationTypes.
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    distinct?: NotificationTypeScalarFieldEnum | NotificationTypeScalarFieldEnum[]
  }

  /**
   * NotificationType create
   */
  export type NotificationTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationType.
     */
    data: XOR<NotificationTypeCreateInput, NotificationTypeUncheckedCreateInput>
  }

  /**
   * NotificationType createMany
   */
  export type NotificationTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationTypes.
     */
    data: NotificationTypeCreateManyInput | NotificationTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationType createManyAndReturn
   */
  export type NotificationTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationTypes.
     */
    data: NotificationTypeCreateManyInput | NotificationTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationType update
   */
  export type NotificationTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationType.
     */
    data: XOR<NotificationTypeUpdateInput, NotificationTypeUncheckedUpdateInput>
    /**
     * Choose, which NotificationType to update.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType updateMany
   */
  export type NotificationTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationTypes.
     */
    data: XOR<NotificationTypeUpdateManyMutationInput, NotificationTypeUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTypes to update
     */
    where?: NotificationTypeWhereInput
    /**
     * Limit how many NotificationTypes to update.
     */
    limit?: number
  }

  /**
   * NotificationType updateManyAndReturn
   */
  export type NotificationTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * The data used to update NotificationTypes.
     */
    data: XOR<NotificationTypeUpdateManyMutationInput, NotificationTypeUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTypes to update
     */
    where?: NotificationTypeWhereInput
    /**
     * Limit how many NotificationTypes to update.
     */
    limit?: number
  }

  /**
   * NotificationType upsert
   */
  export type NotificationTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationType to update in case it exists.
     */
    where: NotificationTypeWhereUniqueInput
    /**
     * In case the NotificationType found by the `where` argument doesn't exist, create a new NotificationType with this data.
     */
    create: XOR<NotificationTypeCreateInput, NotificationTypeUncheckedCreateInput>
    /**
     * In case the NotificationType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationTypeUpdateInput, NotificationTypeUncheckedUpdateInput>
  }

  /**
   * NotificationType delete
   */
  export type NotificationTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter which NotificationType to delete.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType deleteMany
   */
  export type NotificationTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationTypes to delete
     */
    where?: NotificationTypeWhereInput
    /**
     * Limit how many NotificationTypes to delete.
     */
    limit?: number
  }

  /**
   * NotificationType.notifications
   */
  export type NotificationType$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * NotificationType.userPreferences
   */
  export type NotificationType$userPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    where?: NotificationPreferenceWhereInput
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    cursor?: NotificationPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationType.roleTypePermissions
   */
  export type NotificationType$roleTypePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    where?: NotificationRolePermissionWhereInput
    orderBy?: NotificationRolePermissionOrderByWithRelationInput | NotificationRolePermissionOrderByWithRelationInput[]
    cursor?: NotificationRolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationRolePermissionScalarFieldEnum | NotificationRolePermissionScalarFieldEnum[]
  }

  /**
   * NotificationType without action
   */
  export type NotificationTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
  }


  /**
   * Model NotificationPreference
   */

  export type AggregateNotificationPreference = {
    _count: NotificationPreferenceCountAggregateOutputType | null
    _min: NotificationPreferenceMinAggregateOutputType | null
    _max: NotificationPreferenceMaxAggregateOutputType | null
  }

  export type NotificationPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationTypeId: string | null
    emailEnabled: boolean | null
    inAppEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationTypeId: string | null
    emailEnabled: boolean | null
    inAppEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    notificationTypeId: number
    emailEnabled: number
    inAppEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    notificationTypeId?: true
    emailEnabled?: true
    inAppEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    notificationTypeId?: true
    emailEnabled?: true
    inAppEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    notificationTypeId?: true
    emailEnabled?: true
    inAppEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPreference to aggregate.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationPreferences
    **/
    _count?: true | NotificationPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationPreferenceMaxAggregateInputType
  }

  export type GetNotificationPreferenceAggregateType<T extends NotificationPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationPreference[P]>
      : GetScalarType<T[P], AggregateNotificationPreference[P]>
  }




  export type NotificationPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPreferenceWhereInput
    orderBy?: NotificationPreferenceOrderByWithAggregationInput | NotificationPreferenceOrderByWithAggregationInput[]
    by: NotificationPreferenceScalarFieldEnum[] | NotificationPreferenceScalarFieldEnum
    having?: NotificationPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationPreferenceCountAggregateInputType | true
    _min?: NotificationPreferenceMinAggregateInputType
    _max?: NotificationPreferenceMaxAggregateInputType
  }

  export type NotificationPreferenceGroupByOutputType = {
    id: string
    userId: string
    notificationTypeId: string
    emailEnabled: boolean
    inAppEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationPreferenceCountAggregateOutputType | null
    _min: NotificationPreferenceMinAggregateOutputType | null
    _max: NotificationPreferenceMaxAggregateOutputType | null
  }

  type GetNotificationPreferenceGroupByPayload<T extends NotificationPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type NotificationPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreference"]>

  export type NotificationPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreference"]>

  export type NotificationPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPreference"]>

  export type NotificationPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "notificationTypeId" | "emailEnabled" | "inAppEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationPreference"]>
  export type NotificationPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }

  export type $NotificationPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      notificationType: Prisma.$NotificationTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      notificationTypeId: string
      emailEnabled: boolean
      inAppEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationPreference"]>
    composites: {}
  }

  type NotificationPreferenceGetPayload<S extends boolean | null | undefined | NotificationPreferenceDefaultArgs> = $Result.GetResult<Prisma.$NotificationPreferencePayload, S>

  type NotificationPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationPreferenceCountAggregateInputType | true
    }

  export interface NotificationPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationPreference'], meta: { name: 'NotificationPreference' } }
    /**
     * Find zero or one NotificationPreference that matches the filter.
     * @param {NotificationPreferenceFindUniqueArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationPreferenceFindUniqueArgs>(args: SelectSubset<T, NotificationPreferenceFindUniqueArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationPreferenceFindUniqueOrThrowArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceFindFirstArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationPreferenceFindFirstArgs>(args?: SelectSubset<T, NotificationPreferenceFindFirstArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceFindFirstOrThrowArgs} args - Arguments to find a NotificationPreference
     * @example
     * // Get one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreference.findMany()
     * 
     * // Get first 10 NotificationPreferences
     * const notificationPreferences = await prisma.notificationPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationPreferenceFindManyArgs>(args?: SelectSubset<T, NotificationPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationPreference.
     * @param {NotificationPreferenceCreateArgs} args - Arguments to create a NotificationPreference.
     * @example
     * // Create one NotificationPreference
     * const NotificationPreference = await prisma.notificationPreference.create({
     *   data: {
     *     // ... data to create a NotificationPreference
     *   }
     * })
     * 
     */
    create<T extends NotificationPreferenceCreateArgs>(args: SelectSubset<T, NotificationPreferenceCreateArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationPreferences.
     * @param {NotificationPreferenceCreateManyArgs} args - Arguments to create many NotificationPreferences.
     * @example
     * // Create many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationPreferenceCreateManyArgs>(args?: SelectSubset<T, NotificationPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationPreferences and returns the data saved in the database.
     * @param {NotificationPreferenceCreateManyAndReturnArgs} args - Arguments to create many NotificationPreferences.
     * @example
     * // Create many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationPreferences and only return the `id`
     * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationPreference.
     * @param {NotificationPreferenceDeleteArgs} args - Arguments to delete one NotificationPreference.
     * @example
     * // Delete one NotificationPreference
     * const NotificationPreference = await prisma.notificationPreference.delete({
     *   where: {
     *     // ... filter to delete one NotificationPreference
     *   }
     * })
     * 
     */
    delete<T extends NotificationPreferenceDeleteArgs>(args: SelectSubset<T, NotificationPreferenceDeleteArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationPreference.
     * @param {NotificationPreferenceUpdateArgs} args - Arguments to update one NotificationPreference.
     * @example
     * // Update one NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationPreferenceUpdateArgs>(args: SelectSubset<T, NotificationPreferenceUpdateArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationPreferences.
     * @param {NotificationPreferenceDeleteManyArgs} args - Arguments to filter NotificationPreferences to delete.
     * @example
     * // Delete a few NotificationPreferences
     * const { count } = await prisma.notificationPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationPreferenceDeleteManyArgs>(args?: SelectSubset<T, NotificationPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationPreferenceUpdateManyArgs>(args: SelectSubset<T, NotificationPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPreferences and returns the data updated in the database.
     * @param {NotificationPreferenceUpdateManyAndReturnArgs} args - Arguments to update many NotificationPreferences.
     * @example
     * // Update many NotificationPreferences
     * const notificationPreference = await prisma.notificationPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationPreferences and only return the `id`
     * const notificationPreferenceWithIdOnly = await prisma.notificationPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationPreference.
     * @param {NotificationPreferenceUpsertArgs} args - Arguments to update or create a NotificationPreference.
     * @example
     * // Update or create a NotificationPreference
     * const notificationPreference = await prisma.notificationPreference.upsert({
     *   create: {
     *     // ... data to create a NotificationPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationPreference we want to update
     *   }
     * })
     */
    upsert<T extends NotificationPreferenceUpsertArgs>(args: SelectSubset<T, NotificationPreferenceUpsertArgs<ExtArgs>>): Prisma__NotificationPreferenceClient<$Result.GetResult<Prisma.$NotificationPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceCountArgs} args - Arguments to filter NotificationPreferences to count.
     * @example
     * // Count the number of NotificationPreferences
     * const count = await prisma.notificationPreference.count({
     *   where: {
     *     // ... the filter for the NotificationPreferences we want to count
     *   }
     * })
    **/
    count<T extends NotificationPreferenceCountArgs>(
      args?: Subset<T, NotificationPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationPreferenceAggregateArgs>(args: Subset<T, NotificationPreferenceAggregateArgs>): Prisma.PrismaPromise<GetNotificationPreferenceAggregateType<T>>

    /**
     * Group by NotificationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: NotificationPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationPreference model
   */
  readonly fields: NotificationPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notificationType<T extends NotificationTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTypeDefaultArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationPreference model
   */
  interface NotificationPreferenceFieldRefs {
    readonly id: FieldRef<"NotificationPreference", 'String'>
    readonly userId: FieldRef<"NotificationPreference", 'String'>
    readonly notificationTypeId: FieldRef<"NotificationPreference", 'String'>
    readonly emailEnabled: FieldRef<"NotificationPreference", 'Boolean'>
    readonly inAppEnabled: FieldRef<"NotificationPreference", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationPreference findUnique
   */
  export type NotificationPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference findUniqueOrThrow
   */
  export type NotificationPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference findFirst
   */
  export type NotificationPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPreferences.
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPreferences.
     */
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationPreference findFirstOrThrow
   */
  export type NotificationPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreference to fetch.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPreferences.
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPreferences.
     */
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationPreference findMany
   */
  export type NotificationPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPreferences to fetch.
     */
    where?: NotificationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPreferences to fetch.
     */
    orderBy?: NotificationPreferenceOrderByWithRelationInput | NotificationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationPreferences.
     */
    cursor?: NotificationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPreferences.
     */
    skip?: number
    distinct?: NotificationPreferenceScalarFieldEnum | NotificationPreferenceScalarFieldEnum[]
  }

  /**
   * NotificationPreference create
   */
  export type NotificationPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationPreference.
     */
    data: XOR<NotificationPreferenceCreateInput, NotificationPreferenceUncheckedCreateInput>
  }

  /**
   * NotificationPreference createMany
   */
  export type NotificationPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationPreferences.
     */
    data: NotificationPreferenceCreateManyInput | NotificationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationPreference createManyAndReturn
   */
  export type NotificationPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationPreferences.
     */
    data: NotificationPreferenceCreateManyInput | NotificationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationPreference update
   */
  export type NotificationPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationPreference.
     */
    data: XOR<NotificationPreferenceUpdateInput, NotificationPreferenceUncheckedUpdateInput>
    /**
     * Choose, which NotificationPreference to update.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference updateMany
   */
  export type NotificationPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationPreferences.
     */
    data: XOR<NotificationPreferenceUpdateManyMutationInput, NotificationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPreferences to update
     */
    where?: NotificationPreferenceWhereInput
    /**
     * Limit how many NotificationPreferences to update.
     */
    limit?: number
  }

  /**
   * NotificationPreference updateManyAndReturn
   */
  export type NotificationPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update NotificationPreferences.
     */
    data: XOR<NotificationPreferenceUpdateManyMutationInput, NotificationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPreferences to update
     */
    where?: NotificationPreferenceWhereInput
    /**
     * Limit how many NotificationPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationPreference upsert
   */
  export type NotificationPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationPreference to update in case it exists.
     */
    where: NotificationPreferenceWhereUniqueInput
    /**
     * In case the NotificationPreference found by the `where` argument doesn't exist, create a new NotificationPreference with this data.
     */
    create: XOR<NotificationPreferenceCreateInput, NotificationPreferenceUncheckedCreateInput>
    /**
     * In case the NotificationPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationPreferenceUpdateInput, NotificationPreferenceUncheckedUpdateInput>
  }

  /**
   * NotificationPreference delete
   */
  export type NotificationPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
    /**
     * Filter which NotificationPreference to delete.
     */
    where: NotificationPreferenceWhereUniqueInput
  }

  /**
   * NotificationPreference deleteMany
   */
  export type NotificationPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPreferences to delete
     */
    where?: NotificationPreferenceWhereInput
    /**
     * Limit how many NotificationPreferences to delete.
     */
    limit?: number
  }

  /**
   * NotificationPreference without action
   */
  export type NotificationPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPreference
     */
    select?: NotificationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationPreference
     */
    omit?: NotificationPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationTypeId: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    emailSent: boolean | null
    emailSentAt: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationTypeId: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    emailSent: boolean | null
    emailSentAt: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    notificationTypeId: number
    title: number
    message: number
    data: number
    isRead: number
    readAt: number
    emailSent: number
    emailSentAt: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    notificationTypeId?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    emailSent?: true
    emailSentAt?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    notificationTypeId?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    emailSent?: true
    emailSentAt?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    notificationTypeId?: true
    title?: true
    message?: true
    data?: true
    isRead?: true
    readAt?: true
    emailSent?: true
    emailSentAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    notificationTypeId: string
    title: string
    message: string
    data: JsonValue | null
    isRead: boolean
    readAt: Date | null
    emailSent: boolean
    emailSentAt: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    readAt?: boolean
    emailSent?: boolean
    emailSentAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    readAt?: boolean
    emailSent?: boolean
    emailSentAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    readAt?: boolean
    emailSent?: boolean
    emailSentAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    notificationTypeId?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    readAt?: boolean
    emailSent?: boolean
    emailSentAt?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "notificationTypeId" | "title" | "message" | "data" | "isRead" | "readAt" | "emailSent" | "emailSentAt" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      notificationType: Prisma.$NotificationTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      notificationTypeId: string
      title: string
      message: string
      data: Prisma.JsonValue | null
      isRead: boolean
      readAt: Date | null
      emailSent: boolean
      emailSentAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notificationType<T extends NotificationTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTypeDefaultArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly notificationTypeId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly emailSent: FieldRef<"Notification", 'Boolean'>
    readonly emailSentAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model NotificationRolePermission
   */

  export type AggregateNotificationRolePermission = {
    _count: NotificationRolePermissionCountAggregateOutputType | null
    _avg: NotificationRolePermissionAvgAggregateOutputType | null
    _sum: NotificationRolePermissionSumAggregateOutputType | null
    _min: NotificationRolePermissionMinAggregateOutputType | null
    _max: NotificationRolePermissionMaxAggregateOutputType | null
  }

  export type NotificationRolePermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationRolePermissionSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationRolePermissionMinAggregateOutputType = {
    id: number | null
    userTypeId: string | null
    notificationTypeId: string | null
    canReceive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationRolePermissionMaxAggregateOutputType = {
    id: number | null
    userTypeId: string | null
    notificationTypeId: string | null
    canReceive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationRolePermissionCountAggregateOutputType = {
    id: number
    userTypeId: number
    notificationTypeId: number
    canReceive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationRolePermissionAvgAggregateInputType = {
    id?: true
  }

  export type NotificationRolePermissionSumAggregateInputType = {
    id?: true
  }

  export type NotificationRolePermissionMinAggregateInputType = {
    id?: true
    userTypeId?: true
    notificationTypeId?: true
    canReceive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationRolePermissionMaxAggregateInputType = {
    id?: true
    userTypeId?: true
    notificationTypeId?: true
    canReceive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationRolePermissionCountAggregateInputType = {
    id?: true
    userTypeId?: true
    notificationTypeId?: true
    canReceive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationRolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationRolePermission to aggregate.
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRolePermissions to fetch.
     */
    orderBy?: NotificationRolePermissionOrderByWithRelationInput | NotificationRolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationRolePermissions
    **/
    _count?: true | NotificationRolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationRolePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationRolePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationRolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationRolePermissionMaxAggregateInputType
  }

  export type GetNotificationRolePermissionAggregateType<T extends NotificationRolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationRolePermission[P]>
      : GetScalarType<T[P], AggregateNotificationRolePermission[P]>
  }




  export type NotificationRolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationRolePermissionWhereInput
    orderBy?: NotificationRolePermissionOrderByWithAggregationInput | NotificationRolePermissionOrderByWithAggregationInput[]
    by: NotificationRolePermissionScalarFieldEnum[] | NotificationRolePermissionScalarFieldEnum
    having?: NotificationRolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationRolePermissionCountAggregateInputType | true
    _avg?: NotificationRolePermissionAvgAggregateInputType
    _sum?: NotificationRolePermissionSumAggregateInputType
    _min?: NotificationRolePermissionMinAggregateInputType
    _max?: NotificationRolePermissionMaxAggregateInputType
  }

  export type NotificationRolePermissionGroupByOutputType = {
    id: number
    userTypeId: string
    notificationTypeId: string
    canReceive: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationRolePermissionCountAggregateOutputType | null
    _avg: NotificationRolePermissionAvgAggregateOutputType | null
    _sum: NotificationRolePermissionSumAggregateOutputType | null
    _min: NotificationRolePermissionMinAggregateOutputType | null
    _max: NotificationRolePermissionMaxAggregateOutputType | null
  }

  type GetNotificationRolePermissionGroupByPayload<T extends NotificationRolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationRolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationRolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationRolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationRolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type NotificationRolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    notificationTypeId?: boolean
    canReceive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRolePermission"]>

  export type NotificationRolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    notificationTypeId?: boolean
    canReceive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRolePermission"]>

  export type NotificationRolePermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userTypeId?: boolean
    notificationTypeId?: boolean
    canReceive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRolePermission"]>

  export type NotificationRolePermissionSelectScalar = {
    id?: boolean
    userTypeId?: boolean
    notificationTypeId?: boolean
    canReceive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationRolePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userTypeId" | "notificationTypeId" | "canReceive" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationRolePermission"]>
  export type NotificationRolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationRolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationRolePermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userType?: boolean | UserTypeDefaultArgs<ExtArgs>
    notificationType?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }

  export type $NotificationRolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationRolePermission"
    objects: {
      userType: Prisma.$UserTypePayload<ExtArgs>
      notificationType: Prisma.$NotificationTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userTypeId: string
      notificationTypeId: string
      canReceive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationRolePermission"]>
    composites: {}
  }

  type NotificationRolePermissionGetPayload<S extends boolean | null | undefined | NotificationRolePermissionDefaultArgs> = $Result.GetResult<Prisma.$NotificationRolePermissionPayload, S>

  type NotificationRolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationRolePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationRolePermissionCountAggregateInputType | true
    }

  export interface NotificationRolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationRolePermission'], meta: { name: 'NotificationRolePermission' } }
    /**
     * Find zero or one NotificationRolePermission that matches the filter.
     * @param {NotificationRolePermissionFindUniqueArgs} args - Arguments to find a NotificationRolePermission
     * @example
     * // Get one NotificationRolePermission
     * const notificationRolePermission = await prisma.notificationRolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationRolePermissionFindUniqueArgs>(args: SelectSubset<T, NotificationRolePermissionFindUniqueArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationRolePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationRolePermissionFindUniqueOrThrowArgs} args - Arguments to find a NotificationRolePermission
     * @example
     * // Get one NotificationRolePermission
     * const notificationRolePermission = await prisma.notificationRolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationRolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationRolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationRolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionFindFirstArgs} args - Arguments to find a NotificationRolePermission
     * @example
     * // Get one NotificationRolePermission
     * const notificationRolePermission = await prisma.notificationRolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationRolePermissionFindFirstArgs>(args?: SelectSubset<T, NotificationRolePermissionFindFirstArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationRolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionFindFirstOrThrowArgs} args - Arguments to find a NotificationRolePermission
     * @example
     * // Get one NotificationRolePermission
     * const notificationRolePermission = await prisma.notificationRolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationRolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationRolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationRolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationRolePermissions
     * const notificationRolePermissions = await prisma.notificationRolePermission.findMany()
     * 
     * // Get first 10 NotificationRolePermissions
     * const notificationRolePermissions = await prisma.notificationRolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationRolePermissionWithIdOnly = await prisma.notificationRolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationRolePermissionFindManyArgs>(args?: SelectSubset<T, NotificationRolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationRolePermission.
     * @param {NotificationRolePermissionCreateArgs} args - Arguments to create a NotificationRolePermission.
     * @example
     * // Create one NotificationRolePermission
     * const NotificationRolePermission = await prisma.notificationRolePermission.create({
     *   data: {
     *     // ... data to create a NotificationRolePermission
     *   }
     * })
     * 
     */
    create<T extends NotificationRolePermissionCreateArgs>(args: SelectSubset<T, NotificationRolePermissionCreateArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationRolePermissions.
     * @param {NotificationRolePermissionCreateManyArgs} args - Arguments to create many NotificationRolePermissions.
     * @example
     * // Create many NotificationRolePermissions
     * const notificationRolePermission = await prisma.notificationRolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationRolePermissionCreateManyArgs>(args?: SelectSubset<T, NotificationRolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationRolePermissions and returns the data saved in the database.
     * @param {NotificationRolePermissionCreateManyAndReturnArgs} args - Arguments to create many NotificationRolePermissions.
     * @example
     * // Create many NotificationRolePermissions
     * const notificationRolePermission = await prisma.notificationRolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationRolePermissions and only return the `id`
     * const notificationRolePermissionWithIdOnly = await prisma.notificationRolePermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationRolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationRolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationRolePermission.
     * @param {NotificationRolePermissionDeleteArgs} args - Arguments to delete one NotificationRolePermission.
     * @example
     * // Delete one NotificationRolePermission
     * const NotificationRolePermission = await prisma.notificationRolePermission.delete({
     *   where: {
     *     // ... filter to delete one NotificationRolePermission
     *   }
     * })
     * 
     */
    delete<T extends NotificationRolePermissionDeleteArgs>(args: SelectSubset<T, NotificationRolePermissionDeleteArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationRolePermission.
     * @param {NotificationRolePermissionUpdateArgs} args - Arguments to update one NotificationRolePermission.
     * @example
     * // Update one NotificationRolePermission
     * const notificationRolePermission = await prisma.notificationRolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationRolePermissionUpdateArgs>(args: SelectSubset<T, NotificationRolePermissionUpdateArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationRolePermissions.
     * @param {NotificationRolePermissionDeleteManyArgs} args - Arguments to filter NotificationRolePermissions to delete.
     * @example
     * // Delete a few NotificationRolePermissions
     * const { count } = await prisma.notificationRolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationRolePermissionDeleteManyArgs>(args?: SelectSubset<T, NotificationRolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationRolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationRolePermissions
     * const notificationRolePermission = await prisma.notificationRolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationRolePermissionUpdateManyArgs>(args: SelectSubset<T, NotificationRolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationRolePermissions and returns the data updated in the database.
     * @param {NotificationRolePermissionUpdateManyAndReturnArgs} args - Arguments to update many NotificationRolePermissions.
     * @example
     * // Update many NotificationRolePermissions
     * const notificationRolePermission = await prisma.notificationRolePermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationRolePermissions and only return the `id`
     * const notificationRolePermissionWithIdOnly = await prisma.notificationRolePermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationRolePermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationRolePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationRolePermission.
     * @param {NotificationRolePermissionUpsertArgs} args - Arguments to update or create a NotificationRolePermission.
     * @example
     * // Update or create a NotificationRolePermission
     * const notificationRolePermission = await prisma.notificationRolePermission.upsert({
     *   create: {
     *     // ... data to create a NotificationRolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationRolePermission we want to update
     *   }
     * })
     */
    upsert<T extends NotificationRolePermissionUpsertArgs>(args: SelectSubset<T, NotificationRolePermissionUpsertArgs<ExtArgs>>): Prisma__NotificationRolePermissionClient<$Result.GetResult<Prisma.$NotificationRolePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationRolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionCountArgs} args - Arguments to filter NotificationRolePermissions to count.
     * @example
     * // Count the number of NotificationRolePermissions
     * const count = await prisma.notificationRolePermission.count({
     *   where: {
     *     // ... the filter for the NotificationRolePermissions we want to count
     *   }
     * })
    **/
    count<T extends NotificationRolePermissionCountArgs>(
      args?: Subset<T, NotificationRolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationRolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationRolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationRolePermissionAggregateArgs>(args: Subset<T, NotificationRolePermissionAggregateArgs>): Prisma.PrismaPromise<GetNotificationRolePermissionAggregateType<T>>

    /**
     * Group by NotificationRolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationRolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationRolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: NotificationRolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationRolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationRolePermission model
   */
  readonly fields: NotificationRolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationRolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationRolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userType<T extends UserTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserTypeDefaultArgs<ExtArgs>>): Prisma__UserTypeClient<$Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notificationType<T extends NotificationTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTypeDefaultArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationRolePermission model
   */
  interface NotificationRolePermissionFieldRefs {
    readonly id: FieldRef<"NotificationRolePermission", 'Int'>
    readonly userTypeId: FieldRef<"NotificationRolePermission", 'String'>
    readonly notificationTypeId: FieldRef<"NotificationRolePermission", 'String'>
    readonly canReceive: FieldRef<"NotificationRolePermission", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationRolePermission", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationRolePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationRolePermission findUnique
   */
  export type NotificationRolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRolePermission to fetch.
     */
    where: NotificationRolePermissionWhereUniqueInput
  }

  /**
   * NotificationRolePermission findUniqueOrThrow
   */
  export type NotificationRolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRolePermission to fetch.
     */
    where: NotificationRolePermissionWhereUniqueInput
  }

  /**
   * NotificationRolePermission findFirst
   */
  export type NotificationRolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRolePermission to fetch.
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRolePermissions to fetch.
     */
    orderBy?: NotificationRolePermissionOrderByWithRelationInput | NotificationRolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationRolePermissions.
     */
    cursor?: NotificationRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationRolePermissions.
     */
    distinct?: NotificationRolePermissionScalarFieldEnum | NotificationRolePermissionScalarFieldEnum[]
  }

  /**
   * NotificationRolePermission findFirstOrThrow
   */
  export type NotificationRolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRolePermission to fetch.
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRolePermissions to fetch.
     */
    orderBy?: NotificationRolePermissionOrderByWithRelationInput | NotificationRolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationRolePermissions.
     */
    cursor?: NotificationRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationRolePermissions.
     */
    distinct?: NotificationRolePermissionScalarFieldEnum | NotificationRolePermissionScalarFieldEnum[]
  }

  /**
   * NotificationRolePermission findMany
   */
  export type NotificationRolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRolePermissions to fetch.
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRolePermissions to fetch.
     */
    orderBy?: NotificationRolePermissionOrderByWithRelationInput | NotificationRolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationRolePermissions.
     */
    cursor?: NotificationRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRolePermissions.
     */
    skip?: number
    distinct?: NotificationRolePermissionScalarFieldEnum | NotificationRolePermissionScalarFieldEnum[]
  }

  /**
   * NotificationRolePermission create
   */
  export type NotificationRolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationRolePermission.
     */
    data: XOR<NotificationRolePermissionCreateInput, NotificationRolePermissionUncheckedCreateInput>
  }

  /**
   * NotificationRolePermission createMany
   */
  export type NotificationRolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationRolePermissions.
     */
    data: NotificationRolePermissionCreateManyInput | NotificationRolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationRolePermission createManyAndReturn
   */
  export type NotificationRolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationRolePermissions.
     */
    data: NotificationRolePermissionCreateManyInput | NotificationRolePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationRolePermission update
   */
  export type NotificationRolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationRolePermission.
     */
    data: XOR<NotificationRolePermissionUpdateInput, NotificationRolePermissionUncheckedUpdateInput>
    /**
     * Choose, which NotificationRolePermission to update.
     */
    where: NotificationRolePermissionWhereUniqueInput
  }

  /**
   * NotificationRolePermission updateMany
   */
  export type NotificationRolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationRolePermissions.
     */
    data: XOR<NotificationRolePermissionUpdateManyMutationInput, NotificationRolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which NotificationRolePermissions to update
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * Limit how many NotificationRolePermissions to update.
     */
    limit?: number
  }

  /**
   * NotificationRolePermission updateManyAndReturn
   */
  export type NotificationRolePermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * The data used to update NotificationRolePermissions.
     */
    data: XOR<NotificationRolePermissionUpdateManyMutationInput, NotificationRolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which NotificationRolePermissions to update
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * Limit how many NotificationRolePermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationRolePermission upsert
   */
  export type NotificationRolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationRolePermission to update in case it exists.
     */
    where: NotificationRolePermissionWhereUniqueInput
    /**
     * In case the NotificationRolePermission found by the `where` argument doesn't exist, create a new NotificationRolePermission with this data.
     */
    create: XOR<NotificationRolePermissionCreateInput, NotificationRolePermissionUncheckedCreateInput>
    /**
     * In case the NotificationRolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationRolePermissionUpdateInput, NotificationRolePermissionUncheckedUpdateInput>
  }

  /**
   * NotificationRolePermission delete
   */
  export type NotificationRolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
    /**
     * Filter which NotificationRolePermission to delete.
     */
    where: NotificationRolePermissionWhereUniqueInput
  }

  /**
   * NotificationRolePermission deleteMany
   */
  export type NotificationRolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationRolePermissions to delete
     */
    where?: NotificationRolePermissionWhereInput
    /**
     * Limit how many NotificationRolePermissions to delete.
     */
    limit?: number
  }

  /**
   * NotificationRolePermission without action
   */
  export type NotificationRolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRolePermission
     */
    select?: NotificationRolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRolePermission
     */
    omit?: NotificationRolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRolePermissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    userTypeId: 'userTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    profileImage: 'profileImage',
    lastActivity: 'lastActivity',
    lastIP: 'lastIP',
    lastUserAgent: 'lastUserAgent',
    twoFactorEnabled: 'twoFactorEnabled',
    twoFactorSecret: 'twoFactorSecret',
    isActive: 'isActive',
    balance: 'balance',
    balanceEnabled: 'balanceEnabled',
    paymentMethod: 'paymentMethod',
    ibanAccountHolder: 'ibanAccountHolder',
    ibanNumber: 'ibanNumber',
    ibanBic: 'ibanBic',
    ibanAddress: 'ibanAddress',
    ibanPostalCode: 'ibanPostalCode',
    ibanCity: 'ibanCity'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LeadScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    privateDetails: 'privateDetails',
    postalCode: 'postalCode',
    startPrice: 'startPrice',
    minIncrement: 'minIncrement',
    instantBuyPrice: 'instantBuyPrice',
    reservePrice: 'reservePrice',
    antiSnipeSeconds: 'antiSnipeSeconds',
    insuranceType: 'insuranceType',
    isActive: 'isActive',
    isShowcase: 'isShowcase',
    isSold: 'isSold',
    featured: 'featured',
    startsAt: 'startsAt',
    endsAt: 'endsAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId'
  };

  export type LeadScalarFieldEnum = (typeof LeadScalarFieldEnum)[keyof typeof LeadScalarFieldEnum]


  export const BidScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    maxBid: 'maxBid',
    isAutoBid: 'isAutoBid',
    createdAt: 'createdAt',
    leadId: 'leadId',
    userId: 'userId'
  };

  export type BidScalarFieldEnum = (typeof BidScalarFieldEnum)[keyof typeof BidScalarFieldEnum]


  export const LeadWatchScalarFieldEnum: {
    id: 'id',
    leadId: 'leadId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type LeadWatchScalarFieldEnum = (typeof LeadWatchScalarFieldEnum)[keyof typeof LeadWatchScalarFieldEnum]


  export const LeadSaleScalarFieldEnum: {
    id: 'id',
    leadId: 'leadId',
    buyerId: 'buyerId',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    balanceBefore: 'balanceBefore',
    balanceAfter: 'balanceAfter',
    soldAt: 'soldAt',
    createdAt: 'createdAt'
  };

  export type LeadSaleScalarFieldEnum = (typeof LeadSaleScalarFieldEnum)[keyof typeof LeadSaleScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    id: 'id',
    leadIdFormat: 'leadIdFormat',
    customFormat: 'customFormat',
    leadPrefix: 'leadPrefix',
    startingNumber: 'startingNumber',
    numberType: 'numberType',
    defaultCurrency: 'defaultCurrency',
    defaultAuctionDays: 'defaultAuctionDays',
    defaultMinIncrement: 'defaultMinIncrement',
    homepageHeroEyebrow: 'homepageHeroEyebrow',
    homepageHeroTitle: 'homepageHeroTitle',
    homepageHeroHighlight: 'homepageHeroHighlight',
    homepageHeroTitleSuffix: 'homepageHeroTitleSuffix',
    homepageHeroSubtitle: 'homepageHeroSubtitle',
    homepageHeroPrimaryCtaText: 'homepageHeroPrimaryCtaText',
    homepageHeroPrimaryCtaLink: 'homepageHeroPrimaryCtaLink',
    homepageHeroSecondaryCtaText: 'homepageHeroSecondaryCtaText',
    homepageHeroSecondaryCtaLink: 'homepageHeroSecondaryCtaLink',
    homepageFeatureHeading: 'homepageFeatureHeading',
    homepageFeatures: 'homepageFeatures',
    homepageShowcaseEyebrow: 'homepageShowcaseEyebrow',
    homepageShowcaseTitle: 'homepageShowcaseTitle',
    homepageShowcaseCtaText: 'homepageShowcaseCtaText',
    homepageShowcaseCtaLink: 'homepageShowcaseCtaLink',
    homepageStatsEyebrow: 'homepageStatsEyebrow',
    homepageStatsTitle: 'homepageStatsTitle',
    homepageStats: 'homepageStats',
    homepageCtaTitle: 'homepageCtaTitle',
    homepageCtaSubtitle: 'homepageCtaSubtitle',
    homepageCtaPrimaryText: 'homepageCtaPrimaryText',
    homepageCtaPrimaryLink: 'homepageCtaPrimaryLink',
    homepageCtaSecondaryText: 'homepageCtaSecondaryText',
    homepageCtaSecondaryLink: 'homepageCtaSecondaryLink',
    maintenanceMode: 'maintenanceMode',
    maintenanceMessage: 'maintenanceMessage',
    smtpHost: 'smtpHost',
    smtpPort: 'smtpPort',
    smtpUser: 'smtpUser',
    smtpPass: 'smtpPass',
    smtpFromName: 'smtpFromName',
    smtpUseTLS: 'smtpUseTLS',
    smtpUseSSL: 'smtpUseSSL',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyLogoUrl: 'companyLogoUrl',
    companyName: 'companyName',
    faviconUrl: 'faviconUrl',
    footerDescription: 'footerDescription',
    footerEmail: 'footerEmail',
    footerNote: 'footerNote',
    footerPhone: 'footerPhone',
    insuranceTypes: 'insuranceTypes',
    legalLinks: 'legalLinks',
    servicesLinks: 'servicesLinks',
    socialMedia: 'socialMedia',
    supportLinks: 'supportLinks',
    tradeRegisterNumber: 'tradeRegisterNumber'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const UserTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTypeScalarFieldEnum = (typeof UserTypeScalarFieldEnum)[keyof typeof UserTypeScalarFieldEnum]


  export const PageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PageScalarFieldEnum = (typeof PageScalarFieldEnum)[keyof typeof PageScalarFieldEnum]


  export const UserTypePermissionScalarFieldEnum: {
    id: 'id',
    userTypeId: 'userTypeId',
    pageId: 'pageId',
    hasAccess: 'hasAccess',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTypePermissionScalarFieldEnum = (typeof UserTypePermissionScalarFieldEnum)[keyof typeof UserTypePermissionScalarFieldEnum]


  export const LeadTypePermissionScalarFieldEnum: {
    id: 'id',
    userTypeId: 'userTypeId',
    leadType: 'leadType',
    hasAccess: 'hasAccess',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LeadTypePermissionScalarFieldEnum = (typeof LeadTypePermissionScalarFieldEnum)[keyof typeof LeadTypePermissionScalarFieldEnum]


  export const UserLeadTypePermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    leadType: 'leadType',
    hasAccess: 'hasAccess',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserLeadTypePermissionScalarFieldEnum = (typeof UserLeadTypePermissionScalarFieldEnum)[keyof typeof UserLeadTypePermissionScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answer: 'answer',
    category: 'category',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const AboutScalarFieldEnum: {
    id: 'id',
    section: 'section',
    title: 'title',
    subtitle: 'subtitle',
    content: 'content',
    imageUrl: 'imageUrl',
    data: 'data',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AboutScalarFieldEnum = (typeof AboutScalarFieldEnum)[keyof typeof AboutScalarFieldEnum]


  export const DesignSettingsScalarFieldEnum: {
    id: 'id',
    colors: 'colors',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DesignSettingsScalarFieldEnum = (typeof DesignSettingsScalarFieldEnum)[keyof typeof DesignSettingsScalarFieldEnum]


  export const EmailTemplateScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    description: 'description',
    subject: 'subject',
    htmlContent: 'htmlContent',
    textContent: 'textContent',
    isActive: 'isActive',
    variables: 'variables',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailTemplateScalarFieldEnum = (typeof EmailTemplateScalarFieldEnum)[keyof typeof EmailTemplateScalarFieldEnum]


  export const SMSTemplateScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    description: 'description',
    content: 'content',
    isActive: 'isActive',
    variables: 'variables',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SMSTemplateScalarFieldEnum = (typeof SMSTemplateScalarFieldEnum)[keyof typeof SMSTemplateScalarFieldEnum]


  export const ActivityLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    details: 'details',
    entityType: 'entityType',
    entityId: 'entityId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type ActivityLogScalarFieldEnum = (typeof ActivityLogScalarFieldEnum)[keyof typeof ActivityLogScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    used: 'used',
    createdAt: 'createdAt'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const BalanceTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    type: 'type',
    description: 'description',
    relatedId: 'relatedId',
    adminId: 'adminId',
    createdAt: 'createdAt'
  };

  export type BalanceTransactionScalarFieldEnum = (typeof BalanceTransactionScalarFieldEnum)[keyof typeof BalanceTransactionScalarFieldEnum]


  export const NotificationTypeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    category: 'category',
    defaultEnabled: 'defaultEnabled',
    emailEnabled: 'emailEnabled',
    inAppEnabled: 'inAppEnabled',
    icon: 'icon',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationTypeScalarFieldEnum = (typeof NotificationTypeScalarFieldEnum)[keyof typeof NotificationTypeScalarFieldEnum]


  export const NotificationPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    notificationTypeId: 'notificationTypeId',
    emailEnabled: 'emailEnabled',
    inAppEnabled: 'inAppEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationPreferenceScalarFieldEnum = (typeof NotificationPreferenceScalarFieldEnum)[keyof typeof NotificationPreferenceScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    notificationTypeId: 'notificationTypeId',
    title: 'title',
    message: 'message',
    data: 'data',
    isRead: 'isRead',
    readAt: 'readAt',
    emailSent: 'emailSent',
    emailSentAt: 'emailSentAt',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const NotificationRolePermissionScalarFieldEnum: {
    id: 'id',
    userTypeId: 'userTypeId',
    notificationTypeId: 'notificationTypeId',
    canReceive: 'canReceive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationRolePermissionScalarFieldEnum = (typeof NotificationRolePermissionScalarFieldEnum)[keyof typeof NotificationRolePermissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    userTypeId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    lastActivity?: DateTimeNullableFilter<"User"> | Date | string | null
    lastIP?: StringNullableFilter<"User"> | string | null
    lastUserAgent?: StringNullableFilter<"User"> | string | null
    twoFactorEnabled?: BoolFilter<"User"> | boolean
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    balance?: FloatFilter<"User"> | number
    balanceEnabled?: BoolFilter<"User"> | boolean
    paymentMethod?: StringFilter<"User"> | string
    ibanAccountHolder?: StringNullableFilter<"User"> | string | null
    ibanNumber?: StringNullableFilter<"User"> | string | null
    ibanBic?: StringNullableFilter<"User"> | string | null
    ibanAddress?: StringNullableFilter<"User"> | string | null
    ibanPostalCode?: StringNullableFilter<"User"> | string | null
    ibanCity?: StringNullableFilter<"User"> | string | null
    bids?: BidListRelationFilter
    leads?: LeadListRelationFilter
    purchasedLeads?: LeadSaleListRelationFilter
    watching?: LeadWatchListRelationFilter
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
    leadTypePermissions?: UserLeadTypePermissionListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    passwordResetTokens?: PasswordResetTokenListRelationFilter
    balanceTransactions?: BalanceTransactionListRelationFilter
    notifications?: NotificationListRelationFilter
    notificationPreferences?: NotificationPreferenceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    userTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    lastActivity?: SortOrderInput | SortOrder
    lastIP?: SortOrderInput | SortOrder
    lastUserAgent?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    isActive?: SortOrder
    balance?: SortOrder
    balanceEnabled?: SortOrder
    paymentMethod?: SortOrder
    ibanAccountHolder?: SortOrderInput | SortOrder
    ibanNumber?: SortOrderInput | SortOrder
    ibanBic?: SortOrderInput | SortOrder
    ibanAddress?: SortOrderInput | SortOrder
    ibanPostalCode?: SortOrderInput | SortOrder
    ibanCity?: SortOrderInput | SortOrder
    bids?: BidOrderByRelationAggregateInput
    leads?: LeadOrderByRelationAggregateInput
    purchasedLeads?: LeadSaleOrderByRelationAggregateInput
    watching?: LeadWatchOrderByRelationAggregateInput
    userType?: UserTypeOrderByWithRelationInput
    leadTypePermissions?: UserLeadTypePermissionOrderByRelationAggregateInput
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    passwordResetTokens?: PasswordResetTokenOrderByRelationAggregateInput
    balanceTransactions?: BalanceTransactionOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    notificationPreferences?: NotificationPreferenceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    userTypeId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    lastActivity?: DateTimeNullableFilter<"User"> | Date | string | null
    lastIP?: StringNullableFilter<"User"> | string | null
    lastUserAgent?: StringNullableFilter<"User"> | string | null
    twoFactorEnabled?: BoolFilter<"User"> | boolean
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    balance?: FloatFilter<"User"> | number
    balanceEnabled?: BoolFilter<"User"> | boolean
    paymentMethod?: StringFilter<"User"> | string
    ibanAccountHolder?: StringNullableFilter<"User"> | string | null
    ibanNumber?: StringNullableFilter<"User"> | string | null
    ibanBic?: StringNullableFilter<"User"> | string | null
    ibanAddress?: StringNullableFilter<"User"> | string | null
    ibanPostalCode?: StringNullableFilter<"User"> | string | null
    ibanCity?: StringNullableFilter<"User"> | string | null
    bids?: BidListRelationFilter
    leads?: LeadListRelationFilter
    purchasedLeads?: LeadSaleListRelationFilter
    watching?: LeadWatchListRelationFilter
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
    leadTypePermissions?: UserLeadTypePermissionListRelationFilter
    activityLogs?: ActivityLogListRelationFilter
    passwordResetTokens?: PasswordResetTokenListRelationFilter
    balanceTransactions?: BalanceTransactionListRelationFilter
    notifications?: NotificationListRelationFilter
    notificationPreferences?: NotificationPreferenceListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    userTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    lastActivity?: SortOrderInput | SortOrder
    lastIP?: SortOrderInput | SortOrder
    lastUserAgent?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    isActive?: SortOrder
    balance?: SortOrder
    balanceEnabled?: SortOrder
    paymentMethod?: SortOrder
    ibanAccountHolder?: SortOrderInput | SortOrder
    ibanNumber?: SortOrderInput | SortOrder
    ibanBic?: SortOrderInput | SortOrder
    ibanAddress?: SortOrderInput | SortOrder
    ibanPostalCode?: SortOrderInput | SortOrder
    ibanCity?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    userTypeId?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastActivity?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastIP?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastUserAgent?: StringNullableWithAggregatesFilter<"User"> | string | null
    twoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    twoFactorSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    balance?: FloatWithAggregatesFilter<"User"> | number
    balanceEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    paymentMethod?: StringWithAggregatesFilter<"User"> | string
    ibanAccountHolder?: StringNullableWithAggregatesFilter<"User"> | string | null
    ibanNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    ibanBic?: StringNullableWithAggregatesFilter<"User"> | string | null
    ibanAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    ibanPostalCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    ibanCity?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type LeadWhereInput = {
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    id?: StringFilter<"Lead"> | string
    title?: StringFilter<"Lead"> | string
    description?: StringFilter<"Lead"> | string
    privateDetails?: StringNullableFilter<"Lead"> | string | null
    postalCode?: StringNullableFilter<"Lead"> | string | null
    startPrice?: IntFilter<"Lead"> | number
    minIncrement?: IntFilter<"Lead"> | number
    instantBuyPrice?: IntNullableFilter<"Lead"> | number | null
    reservePrice?: IntNullableFilter<"Lead"> | number | null
    antiSnipeSeconds?: IntFilter<"Lead"> | number
    insuranceType?: StringNullableFilter<"Lead"> | string | null
    isActive?: BoolFilter<"Lead"> | boolean
    isShowcase?: BoolFilter<"Lead"> | boolean
    isSold?: BoolFilter<"Lead"> | boolean
    featured?: BoolFilter<"Lead"> | boolean
    startsAt?: DateTimeNullableFilter<"Lead"> | Date | string | null
    endsAt?: DateTimeFilter<"Lead"> | Date | string
    createdAt?: DateTimeFilter<"Lead"> | Date | string
    updatedAt?: DateTimeFilter<"Lead"> | Date | string
    ownerId?: StringFilter<"Lead"> | string
    bids?: BidListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    sale?: XOR<LeadSaleNullableScalarRelationFilter, LeadSaleWhereInput> | null
    watchers?: LeadWatchListRelationFilter
  }

  export type LeadOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    privateDetails?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrderInput | SortOrder
    reservePrice?: SortOrderInput | SortOrder
    antiSnipeSeconds?: SortOrder
    insuranceType?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isShowcase?: SortOrder
    isSold?: SortOrder
    featured?: SortOrder
    startsAt?: SortOrderInput | SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    bids?: BidOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    sale?: LeadSaleOrderByWithRelationInput
    watchers?: LeadWatchOrderByRelationAggregateInput
  }

  export type LeadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    title?: StringFilter<"Lead"> | string
    description?: StringFilter<"Lead"> | string
    privateDetails?: StringNullableFilter<"Lead"> | string | null
    postalCode?: StringNullableFilter<"Lead"> | string | null
    startPrice?: IntFilter<"Lead"> | number
    minIncrement?: IntFilter<"Lead"> | number
    instantBuyPrice?: IntNullableFilter<"Lead"> | number | null
    reservePrice?: IntNullableFilter<"Lead"> | number | null
    antiSnipeSeconds?: IntFilter<"Lead"> | number
    insuranceType?: StringNullableFilter<"Lead"> | string | null
    isActive?: BoolFilter<"Lead"> | boolean
    isShowcase?: BoolFilter<"Lead"> | boolean
    isSold?: BoolFilter<"Lead"> | boolean
    featured?: BoolFilter<"Lead"> | boolean
    startsAt?: DateTimeNullableFilter<"Lead"> | Date | string | null
    endsAt?: DateTimeFilter<"Lead"> | Date | string
    createdAt?: DateTimeFilter<"Lead"> | Date | string
    updatedAt?: DateTimeFilter<"Lead"> | Date | string
    ownerId?: StringFilter<"Lead"> | string
    bids?: BidListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    sale?: XOR<LeadSaleNullableScalarRelationFilter, LeadSaleWhereInput> | null
    watchers?: LeadWatchListRelationFilter
  }, "id">

  export type LeadOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    privateDetails?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrderInput | SortOrder
    reservePrice?: SortOrderInput | SortOrder
    antiSnipeSeconds?: SortOrder
    insuranceType?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isShowcase?: SortOrder
    isSold?: SortOrder
    featured?: SortOrder
    startsAt?: SortOrderInput | SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    _count?: LeadCountOrderByAggregateInput
    _avg?: LeadAvgOrderByAggregateInput
    _max?: LeadMaxOrderByAggregateInput
    _min?: LeadMinOrderByAggregateInput
    _sum?: LeadSumOrderByAggregateInput
  }

  export type LeadScalarWhereWithAggregatesInput = {
    AND?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    OR?: LeadScalarWhereWithAggregatesInput[]
    NOT?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lead"> | string
    title?: StringWithAggregatesFilter<"Lead"> | string
    description?: StringWithAggregatesFilter<"Lead"> | string
    privateDetails?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    startPrice?: IntWithAggregatesFilter<"Lead"> | number
    minIncrement?: IntWithAggregatesFilter<"Lead"> | number
    instantBuyPrice?: IntNullableWithAggregatesFilter<"Lead"> | number | null
    reservePrice?: IntNullableWithAggregatesFilter<"Lead"> | number | null
    antiSnipeSeconds?: IntWithAggregatesFilter<"Lead"> | number
    insuranceType?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    isActive?: BoolWithAggregatesFilter<"Lead"> | boolean
    isShowcase?: BoolWithAggregatesFilter<"Lead"> | boolean
    isSold?: BoolWithAggregatesFilter<"Lead"> | boolean
    featured?: BoolWithAggregatesFilter<"Lead"> | boolean
    startsAt?: DateTimeNullableWithAggregatesFilter<"Lead"> | Date | string | null
    endsAt?: DateTimeWithAggregatesFilter<"Lead"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Lead"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Lead"> | Date | string
    ownerId?: StringWithAggregatesFilter<"Lead"> | string
  }

  export type BidWhereInput = {
    AND?: BidWhereInput | BidWhereInput[]
    OR?: BidWhereInput[]
    NOT?: BidWhereInput | BidWhereInput[]
    id?: StringFilter<"Bid"> | string
    amount?: IntFilter<"Bid"> | number
    maxBid?: IntFilter<"Bid"> | number
    isAutoBid?: BoolFilter<"Bid"> | boolean
    createdAt?: DateTimeFilter<"Bid"> | Date | string
    leadId?: StringFilter<"Bid"> | string
    userId?: StringFilter<"Bid"> | string
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BidOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    maxBid?: SortOrder
    isAutoBid?: SortOrder
    createdAt?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    lead?: LeadOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type BidWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BidWhereInput | BidWhereInput[]
    OR?: BidWhereInput[]
    NOT?: BidWhereInput | BidWhereInput[]
    amount?: IntFilter<"Bid"> | number
    maxBid?: IntFilter<"Bid"> | number
    isAutoBid?: BoolFilter<"Bid"> | boolean
    createdAt?: DateTimeFilter<"Bid"> | Date | string
    leadId?: StringFilter<"Bid"> | string
    userId?: StringFilter<"Bid"> | string
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BidOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    maxBid?: SortOrder
    isAutoBid?: SortOrder
    createdAt?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    _count?: BidCountOrderByAggregateInput
    _avg?: BidAvgOrderByAggregateInput
    _max?: BidMaxOrderByAggregateInput
    _min?: BidMinOrderByAggregateInput
    _sum?: BidSumOrderByAggregateInput
  }

  export type BidScalarWhereWithAggregatesInput = {
    AND?: BidScalarWhereWithAggregatesInput | BidScalarWhereWithAggregatesInput[]
    OR?: BidScalarWhereWithAggregatesInput[]
    NOT?: BidScalarWhereWithAggregatesInput | BidScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bid"> | string
    amount?: IntWithAggregatesFilter<"Bid"> | number
    maxBid?: IntWithAggregatesFilter<"Bid"> | number
    isAutoBid?: BoolWithAggregatesFilter<"Bid"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Bid"> | Date | string
    leadId?: StringWithAggregatesFilter<"Bid"> | string
    userId?: StringWithAggregatesFilter<"Bid"> | string
  }

  export type LeadWatchWhereInput = {
    AND?: LeadWatchWhereInput | LeadWatchWhereInput[]
    OR?: LeadWatchWhereInput[]
    NOT?: LeadWatchWhereInput | LeadWatchWhereInput[]
    id?: StringFilter<"LeadWatch"> | string
    leadId?: StringFilter<"LeadWatch"> | string
    userId?: StringFilter<"LeadWatch"> | string
    createdAt?: DateTimeFilter<"LeadWatch"> | Date | string
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LeadWatchOrderByWithRelationInput = {
    id?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    lead?: LeadOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type LeadWatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    leadId_userId?: LeadWatchLeadIdUserIdCompoundUniqueInput
    AND?: LeadWatchWhereInput | LeadWatchWhereInput[]
    OR?: LeadWatchWhereInput[]
    NOT?: LeadWatchWhereInput | LeadWatchWhereInput[]
    leadId?: StringFilter<"LeadWatch"> | string
    userId?: StringFilter<"LeadWatch"> | string
    createdAt?: DateTimeFilter<"LeadWatch"> | Date | string
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "leadId_userId">

  export type LeadWatchOrderByWithAggregationInput = {
    id?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: LeadWatchCountOrderByAggregateInput
    _max?: LeadWatchMaxOrderByAggregateInput
    _min?: LeadWatchMinOrderByAggregateInput
  }

  export type LeadWatchScalarWhereWithAggregatesInput = {
    AND?: LeadWatchScalarWhereWithAggregatesInput | LeadWatchScalarWhereWithAggregatesInput[]
    OR?: LeadWatchScalarWhereWithAggregatesInput[]
    NOT?: LeadWatchScalarWhereWithAggregatesInput | LeadWatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeadWatch"> | string
    leadId?: StringWithAggregatesFilter<"LeadWatch"> | string
    userId?: StringWithAggregatesFilter<"LeadWatch"> | string
    createdAt?: DateTimeWithAggregatesFilter<"LeadWatch"> | Date | string
  }

  export type LeadSaleWhereInput = {
    AND?: LeadSaleWhereInput | LeadSaleWhereInput[]
    OR?: LeadSaleWhereInput[]
    NOT?: LeadSaleWhereInput | LeadSaleWhereInput[]
    id?: StringFilter<"LeadSale"> | string
    leadId?: StringFilter<"LeadSale"> | string
    buyerId?: StringFilter<"LeadSale"> | string
    amount?: IntFilter<"LeadSale"> | number
    paymentMethod?: StringFilter<"LeadSale"> | string
    balanceBefore?: IntNullableFilter<"LeadSale"> | number | null
    balanceAfter?: IntNullableFilter<"LeadSale"> | number | null
    soldAt?: DateTimeFilter<"LeadSale"> | Date | string
    createdAt?: DateTimeFilter<"LeadSale"> | Date | string
    buyer?: XOR<UserScalarRelationFilter, UserWhereInput>
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
  }

  export type LeadSaleOrderByWithRelationInput = {
    id?: SortOrder
    leadId?: SortOrder
    buyerId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    balanceBefore?: SortOrderInput | SortOrder
    balanceAfter?: SortOrderInput | SortOrder
    soldAt?: SortOrder
    createdAt?: SortOrder
    buyer?: UserOrderByWithRelationInput
    lead?: LeadOrderByWithRelationInput
  }

  export type LeadSaleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    leadId?: string
    AND?: LeadSaleWhereInput | LeadSaleWhereInput[]
    OR?: LeadSaleWhereInput[]
    NOT?: LeadSaleWhereInput | LeadSaleWhereInput[]
    buyerId?: StringFilter<"LeadSale"> | string
    amount?: IntFilter<"LeadSale"> | number
    paymentMethod?: StringFilter<"LeadSale"> | string
    balanceBefore?: IntNullableFilter<"LeadSale"> | number | null
    balanceAfter?: IntNullableFilter<"LeadSale"> | number | null
    soldAt?: DateTimeFilter<"LeadSale"> | Date | string
    createdAt?: DateTimeFilter<"LeadSale"> | Date | string
    buyer?: XOR<UserScalarRelationFilter, UserWhereInput>
    lead?: XOR<LeadScalarRelationFilter, LeadWhereInput>
  }, "id" | "leadId">

  export type LeadSaleOrderByWithAggregationInput = {
    id?: SortOrder
    leadId?: SortOrder
    buyerId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    balanceBefore?: SortOrderInput | SortOrder
    balanceAfter?: SortOrderInput | SortOrder
    soldAt?: SortOrder
    createdAt?: SortOrder
    _count?: LeadSaleCountOrderByAggregateInput
    _avg?: LeadSaleAvgOrderByAggregateInput
    _max?: LeadSaleMaxOrderByAggregateInput
    _min?: LeadSaleMinOrderByAggregateInput
    _sum?: LeadSaleSumOrderByAggregateInput
  }

  export type LeadSaleScalarWhereWithAggregatesInput = {
    AND?: LeadSaleScalarWhereWithAggregatesInput | LeadSaleScalarWhereWithAggregatesInput[]
    OR?: LeadSaleScalarWhereWithAggregatesInput[]
    NOT?: LeadSaleScalarWhereWithAggregatesInput | LeadSaleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeadSale"> | string
    leadId?: StringWithAggregatesFilter<"LeadSale"> | string
    buyerId?: StringWithAggregatesFilter<"LeadSale"> | string
    amount?: IntWithAggregatesFilter<"LeadSale"> | number
    paymentMethod?: StringWithAggregatesFilter<"LeadSale"> | string
    balanceBefore?: IntNullableWithAggregatesFilter<"LeadSale"> | number | null
    balanceAfter?: IntNullableWithAggregatesFilter<"LeadSale"> | number | null
    soldAt?: DateTimeWithAggregatesFilter<"LeadSale"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LeadSale"> | Date | string
  }

  export type SettingsWhereInput = {
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    id?: StringFilter<"Settings"> | string
    leadIdFormat?: StringFilter<"Settings"> | string
    customFormat?: StringFilter<"Settings"> | string
    leadPrefix?: StringFilter<"Settings"> | string
    startingNumber?: IntFilter<"Settings"> | number
    numberType?: StringFilter<"Settings"> | string
    defaultCurrency?: StringFilter<"Settings"> | string
    defaultAuctionDays?: IntFilter<"Settings"> | number
    defaultMinIncrement?: IntFilter<"Settings"> | number
    homepageHeroEyebrow?: StringFilter<"Settings"> | string
    homepageHeroTitle?: StringFilter<"Settings"> | string
    homepageHeroHighlight?: StringFilter<"Settings"> | string
    homepageHeroTitleSuffix?: StringFilter<"Settings"> | string
    homepageHeroSubtitle?: StringFilter<"Settings"> | string
    homepageHeroPrimaryCtaText?: StringFilter<"Settings"> | string
    homepageHeroPrimaryCtaLink?: StringFilter<"Settings"> | string
    homepageHeroSecondaryCtaText?: StringFilter<"Settings"> | string
    homepageHeroSecondaryCtaLink?: StringFilter<"Settings"> | string
    homepageFeatureHeading?: StringFilter<"Settings"> | string
    homepageFeatures?: JsonFilter<"Settings">
    homepageShowcaseEyebrow?: StringFilter<"Settings"> | string
    homepageShowcaseTitle?: StringFilter<"Settings"> | string
    homepageShowcaseCtaText?: StringFilter<"Settings"> | string
    homepageShowcaseCtaLink?: StringFilter<"Settings"> | string
    homepageStatsEyebrow?: StringFilter<"Settings"> | string
    homepageStatsTitle?: StringFilter<"Settings"> | string
    homepageStats?: JsonFilter<"Settings">
    homepageCtaTitle?: StringFilter<"Settings"> | string
    homepageCtaSubtitle?: StringFilter<"Settings"> | string
    homepageCtaPrimaryText?: StringFilter<"Settings"> | string
    homepageCtaPrimaryLink?: StringFilter<"Settings"> | string
    homepageCtaSecondaryText?: StringFilter<"Settings"> | string
    homepageCtaSecondaryLink?: StringFilter<"Settings"> | string
    maintenanceMode?: BoolFilter<"Settings"> | boolean
    maintenanceMessage?: StringFilter<"Settings"> | string
    smtpHost?: StringFilter<"Settings"> | string
    smtpPort?: IntFilter<"Settings"> | number
    smtpUser?: StringFilter<"Settings"> | string
    smtpPass?: StringFilter<"Settings"> | string
    smtpFromName?: StringFilter<"Settings"> | string
    smtpUseTLS?: BoolFilter<"Settings"> | boolean
    smtpUseSSL?: BoolFilter<"Settings"> | boolean
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
    companyLogoUrl?: StringFilter<"Settings"> | string
    companyName?: StringFilter<"Settings"> | string
    faviconUrl?: StringFilter<"Settings"> | string
    footerDescription?: StringFilter<"Settings"> | string
    footerEmail?: StringFilter<"Settings"> | string
    footerNote?: StringFilter<"Settings"> | string
    footerPhone?: StringFilter<"Settings"> | string
    insuranceTypes?: JsonFilter<"Settings">
    legalLinks?: JsonNullableFilter<"Settings">
    servicesLinks?: JsonNullableFilter<"Settings">
    socialMedia?: JsonNullableFilter<"Settings">
    supportLinks?: JsonNullableFilter<"Settings">
    tradeRegisterNumber?: StringFilter<"Settings"> | string
  }

  export type SettingsOrderByWithRelationInput = {
    id?: SortOrder
    leadIdFormat?: SortOrder
    customFormat?: SortOrder
    leadPrefix?: SortOrder
    startingNumber?: SortOrder
    numberType?: SortOrder
    defaultCurrency?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    homepageHeroEyebrow?: SortOrder
    homepageHeroTitle?: SortOrder
    homepageHeroHighlight?: SortOrder
    homepageHeroTitleSuffix?: SortOrder
    homepageHeroSubtitle?: SortOrder
    homepageHeroPrimaryCtaText?: SortOrder
    homepageHeroPrimaryCtaLink?: SortOrder
    homepageHeroSecondaryCtaText?: SortOrder
    homepageHeroSecondaryCtaLink?: SortOrder
    homepageFeatureHeading?: SortOrder
    homepageFeatures?: SortOrder
    homepageShowcaseEyebrow?: SortOrder
    homepageShowcaseTitle?: SortOrder
    homepageShowcaseCtaText?: SortOrder
    homepageShowcaseCtaLink?: SortOrder
    homepageStatsEyebrow?: SortOrder
    homepageStatsTitle?: SortOrder
    homepageStats?: SortOrder
    homepageCtaTitle?: SortOrder
    homepageCtaSubtitle?: SortOrder
    homepageCtaPrimaryText?: SortOrder
    homepageCtaPrimaryLink?: SortOrder
    homepageCtaSecondaryText?: SortOrder
    homepageCtaSecondaryLink?: SortOrder
    maintenanceMode?: SortOrder
    maintenanceMessage?: SortOrder
    smtpHost?: SortOrder
    smtpPort?: SortOrder
    smtpUser?: SortOrder
    smtpPass?: SortOrder
    smtpFromName?: SortOrder
    smtpUseTLS?: SortOrder
    smtpUseSSL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyLogoUrl?: SortOrder
    companyName?: SortOrder
    faviconUrl?: SortOrder
    footerDescription?: SortOrder
    footerEmail?: SortOrder
    footerNote?: SortOrder
    footerPhone?: SortOrder
    insuranceTypes?: SortOrder
    legalLinks?: SortOrderInput | SortOrder
    servicesLinks?: SortOrderInput | SortOrder
    socialMedia?: SortOrderInput | SortOrder
    supportLinks?: SortOrderInput | SortOrder
    tradeRegisterNumber?: SortOrder
  }

  export type SettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    leadIdFormat?: StringFilter<"Settings"> | string
    customFormat?: StringFilter<"Settings"> | string
    leadPrefix?: StringFilter<"Settings"> | string
    startingNumber?: IntFilter<"Settings"> | number
    numberType?: StringFilter<"Settings"> | string
    defaultCurrency?: StringFilter<"Settings"> | string
    defaultAuctionDays?: IntFilter<"Settings"> | number
    defaultMinIncrement?: IntFilter<"Settings"> | number
    homepageHeroEyebrow?: StringFilter<"Settings"> | string
    homepageHeroTitle?: StringFilter<"Settings"> | string
    homepageHeroHighlight?: StringFilter<"Settings"> | string
    homepageHeroTitleSuffix?: StringFilter<"Settings"> | string
    homepageHeroSubtitle?: StringFilter<"Settings"> | string
    homepageHeroPrimaryCtaText?: StringFilter<"Settings"> | string
    homepageHeroPrimaryCtaLink?: StringFilter<"Settings"> | string
    homepageHeroSecondaryCtaText?: StringFilter<"Settings"> | string
    homepageHeroSecondaryCtaLink?: StringFilter<"Settings"> | string
    homepageFeatureHeading?: StringFilter<"Settings"> | string
    homepageFeatures?: JsonFilter<"Settings">
    homepageShowcaseEyebrow?: StringFilter<"Settings"> | string
    homepageShowcaseTitle?: StringFilter<"Settings"> | string
    homepageShowcaseCtaText?: StringFilter<"Settings"> | string
    homepageShowcaseCtaLink?: StringFilter<"Settings"> | string
    homepageStatsEyebrow?: StringFilter<"Settings"> | string
    homepageStatsTitle?: StringFilter<"Settings"> | string
    homepageStats?: JsonFilter<"Settings">
    homepageCtaTitle?: StringFilter<"Settings"> | string
    homepageCtaSubtitle?: StringFilter<"Settings"> | string
    homepageCtaPrimaryText?: StringFilter<"Settings"> | string
    homepageCtaPrimaryLink?: StringFilter<"Settings"> | string
    homepageCtaSecondaryText?: StringFilter<"Settings"> | string
    homepageCtaSecondaryLink?: StringFilter<"Settings"> | string
    maintenanceMode?: BoolFilter<"Settings"> | boolean
    maintenanceMessage?: StringFilter<"Settings"> | string
    smtpHost?: StringFilter<"Settings"> | string
    smtpPort?: IntFilter<"Settings"> | number
    smtpUser?: StringFilter<"Settings"> | string
    smtpPass?: StringFilter<"Settings"> | string
    smtpFromName?: StringFilter<"Settings"> | string
    smtpUseTLS?: BoolFilter<"Settings"> | boolean
    smtpUseSSL?: BoolFilter<"Settings"> | boolean
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
    companyLogoUrl?: StringFilter<"Settings"> | string
    companyName?: StringFilter<"Settings"> | string
    faviconUrl?: StringFilter<"Settings"> | string
    footerDescription?: StringFilter<"Settings"> | string
    footerEmail?: StringFilter<"Settings"> | string
    footerNote?: StringFilter<"Settings"> | string
    footerPhone?: StringFilter<"Settings"> | string
    insuranceTypes?: JsonFilter<"Settings">
    legalLinks?: JsonNullableFilter<"Settings">
    servicesLinks?: JsonNullableFilter<"Settings">
    socialMedia?: JsonNullableFilter<"Settings">
    supportLinks?: JsonNullableFilter<"Settings">
    tradeRegisterNumber?: StringFilter<"Settings"> | string
  }, "id">

  export type SettingsOrderByWithAggregationInput = {
    id?: SortOrder
    leadIdFormat?: SortOrder
    customFormat?: SortOrder
    leadPrefix?: SortOrder
    startingNumber?: SortOrder
    numberType?: SortOrder
    defaultCurrency?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    homepageHeroEyebrow?: SortOrder
    homepageHeroTitle?: SortOrder
    homepageHeroHighlight?: SortOrder
    homepageHeroTitleSuffix?: SortOrder
    homepageHeroSubtitle?: SortOrder
    homepageHeroPrimaryCtaText?: SortOrder
    homepageHeroPrimaryCtaLink?: SortOrder
    homepageHeroSecondaryCtaText?: SortOrder
    homepageHeroSecondaryCtaLink?: SortOrder
    homepageFeatureHeading?: SortOrder
    homepageFeatures?: SortOrder
    homepageShowcaseEyebrow?: SortOrder
    homepageShowcaseTitle?: SortOrder
    homepageShowcaseCtaText?: SortOrder
    homepageShowcaseCtaLink?: SortOrder
    homepageStatsEyebrow?: SortOrder
    homepageStatsTitle?: SortOrder
    homepageStats?: SortOrder
    homepageCtaTitle?: SortOrder
    homepageCtaSubtitle?: SortOrder
    homepageCtaPrimaryText?: SortOrder
    homepageCtaPrimaryLink?: SortOrder
    homepageCtaSecondaryText?: SortOrder
    homepageCtaSecondaryLink?: SortOrder
    maintenanceMode?: SortOrder
    maintenanceMessage?: SortOrder
    smtpHost?: SortOrder
    smtpPort?: SortOrder
    smtpUser?: SortOrder
    smtpPass?: SortOrder
    smtpFromName?: SortOrder
    smtpUseTLS?: SortOrder
    smtpUseSSL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyLogoUrl?: SortOrder
    companyName?: SortOrder
    faviconUrl?: SortOrder
    footerDescription?: SortOrder
    footerEmail?: SortOrder
    footerNote?: SortOrder
    footerPhone?: SortOrder
    insuranceTypes?: SortOrder
    legalLinks?: SortOrderInput | SortOrder
    servicesLinks?: SortOrderInput | SortOrder
    socialMedia?: SortOrderInput | SortOrder
    supportLinks?: SortOrderInput | SortOrder
    tradeRegisterNumber?: SortOrder
    _count?: SettingsCountOrderByAggregateInput
    _avg?: SettingsAvgOrderByAggregateInput
    _max?: SettingsMaxOrderByAggregateInput
    _min?: SettingsMinOrderByAggregateInput
    _sum?: SettingsSumOrderByAggregateInput
  }

  export type SettingsScalarWhereWithAggregatesInput = {
    AND?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    OR?: SettingsScalarWhereWithAggregatesInput[]
    NOT?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Settings"> | string
    leadIdFormat?: StringWithAggregatesFilter<"Settings"> | string
    customFormat?: StringWithAggregatesFilter<"Settings"> | string
    leadPrefix?: StringWithAggregatesFilter<"Settings"> | string
    startingNumber?: IntWithAggregatesFilter<"Settings"> | number
    numberType?: StringWithAggregatesFilter<"Settings"> | string
    defaultCurrency?: StringWithAggregatesFilter<"Settings"> | string
    defaultAuctionDays?: IntWithAggregatesFilter<"Settings"> | number
    defaultMinIncrement?: IntWithAggregatesFilter<"Settings"> | number
    homepageHeroEyebrow?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroTitle?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroHighlight?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroTitleSuffix?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroSubtitle?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroPrimaryCtaText?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroPrimaryCtaLink?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroSecondaryCtaText?: StringWithAggregatesFilter<"Settings"> | string
    homepageHeroSecondaryCtaLink?: StringWithAggregatesFilter<"Settings"> | string
    homepageFeatureHeading?: StringWithAggregatesFilter<"Settings"> | string
    homepageFeatures?: JsonWithAggregatesFilter<"Settings">
    homepageShowcaseEyebrow?: StringWithAggregatesFilter<"Settings"> | string
    homepageShowcaseTitle?: StringWithAggregatesFilter<"Settings"> | string
    homepageShowcaseCtaText?: StringWithAggregatesFilter<"Settings"> | string
    homepageShowcaseCtaLink?: StringWithAggregatesFilter<"Settings"> | string
    homepageStatsEyebrow?: StringWithAggregatesFilter<"Settings"> | string
    homepageStatsTitle?: StringWithAggregatesFilter<"Settings"> | string
    homepageStats?: JsonWithAggregatesFilter<"Settings">
    homepageCtaTitle?: StringWithAggregatesFilter<"Settings"> | string
    homepageCtaSubtitle?: StringWithAggregatesFilter<"Settings"> | string
    homepageCtaPrimaryText?: StringWithAggregatesFilter<"Settings"> | string
    homepageCtaPrimaryLink?: StringWithAggregatesFilter<"Settings"> | string
    homepageCtaSecondaryText?: StringWithAggregatesFilter<"Settings"> | string
    homepageCtaSecondaryLink?: StringWithAggregatesFilter<"Settings"> | string
    maintenanceMode?: BoolWithAggregatesFilter<"Settings"> | boolean
    maintenanceMessage?: StringWithAggregatesFilter<"Settings"> | string
    smtpHost?: StringWithAggregatesFilter<"Settings"> | string
    smtpPort?: IntWithAggregatesFilter<"Settings"> | number
    smtpUser?: StringWithAggregatesFilter<"Settings"> | string
    smtpPass?: StringWithAggregatesFilter<"Settings"> | string
    smtpFromName?: StringWithAggregatesFilter<"Settings"> | string
    smtpUseTLS?: BoolWithAggregatesFilter<"Settings"> | boolean
    smtpUseSSL?: BoolWithAggregatesFilter<"Settings"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    companyLogoUrl?: StringWithAggregatesFilter<"Settings"> | string
    companyName?: StringWithAggregatesFilter<"Settings"> | string
    faviconUrl?: StringWithAggregatesFilter<"Settings"> | string
    footerDescription?: StringWithAggregatesFilter<"Settings"> | string
    footerEmail?: StringWithAggregatesFilter<"Settings"> | string
    footerNote?: StringWithAggregatesFilter<"Settings"> | string
    footerPhone?: StringWithAggregatesFilter<"Settings"> | string
    insuranceTypes?: JsonWithAggregatesFilter<"Settings">
    legalLinks?: JsonNullableWithAggregatesFilter<"Settings">
    servicesLinks?: JsonNullableWithAggregatesFilter<"Settings">
    socialMedia?: JsonNullableWithAggregatesFilter<"Settings">
    supportLinks?: JsonNullableWithAggregatesFilter<"Settings">
    tradeRegisterNumber?: StringWithAggregatesFilter<"Settings"> | string
  }

  export type UserTypeWhereInput = {
    AND?: UserTypeWhereInput | UserTypeWhereInput[]
    OR?: UserTypeWhereInput[]
    NOT?: UserTypeWhereInput | UserTypeWhereInput[]
    id?: StringFilter<"UserType"> | string
    name?: StringFilter<"UserType"> | string
    description?: StringNullableFilter<"UserType"> | string | null
    isActive?: BoolFilter<"UserType"> | boolean
    createdAt?: DateTimeFilter<"UserType"> | Date | string
    updatedAt?: DateTimeFilter<"UserType"> | Date | string
    leadTypePermissions?: LeadTypePermissionListRelationFilter
    users?: UserListRelationFilter
    permissions?: UserTypePermissionListRelationFilter
    notificationRolePermissions?: NotificationRolePermissionListRelationFilter
  }

  export type UserTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    leadTypePermissions?: LeadTypePermissionOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    permissions?: UserTypePermissionOrderByRelationAggregateInput
    notificationRolePermissions?: NotificationRolePermissionOrderByRelationAggregateInput
  }

  export type UserTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserTypeWhereInput | UserTypeWhereInput[]
    OR?: UserTypeWhereInput[]
    NOT?: UserTypeWhereInput | UserTypeWhereInput[]
    name?: StringFilter<"UserType"> | string
    description?: StringNullableFilter<"UserType"> | string | null
    isActive?: BoolFilter<"UserType"> | boolean
    createdAt?: DateTimeFilter<"UserType"> | Date | string
    updatedAt?: DateTimeFilter<"UserType"> | Date | string
    leadTypePermissions?: LeadTypePermissionListRelationFilter
    users?: UserListRelationFilter
    permissions?: UserTypePermissionListRelationFilter
    notificationRolePermissions?: NotificationRolePermissionListRelationFilter
  }, "id">

  export type UserTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTypeCountOrderByAggregateInput
    _max?: UserTypeMaxOrderByAggregateInput
    _min?: UserTypeMinOrderByAggregateInput
  }

  export type UserTypeScalarWhereWithAggregatesInput = {
    AND?: UserTypeScalarWhereWithAggregatesInput | UserTypeScalarWhereWithAggregatesInput[]
    OR?: UserTypeScalarWhereWithAggregatesInput[]
    NOT?: UserTypeScalarWhereWithAggregatesInput | UserTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserType"> | string
    name?: StringWithAggregatesFilter<"UserType"> | string
    description?: StringNullableWithAggregatesFilter<"UserType"> | string | null
    isActive?: BoolWithAggregatesFilter<"UserType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserType"> | Date | string
  }

  export type PageWhereInput = {
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    id?: StringFilter<"Page"> | string
    name?: StringFilter<"Page"> | string
    description?: StringNullableFilter<"Page"> | string | null
    isActive?: BoolFilter<"Page"> | boolean
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
    permissions?: UserTypePermissionListRelationFilter
  }

  export type PageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    permissions?: UserTypePermissionOrderByRelationAggregateInput
  }

  export type PageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    name?: StringFilter<"Page"> | string
    description?: StringNullableFilter<"Page"> | string | null
    isActive?: BoolFilter<"Page"> | boolean
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
    permissions?: UserTypePermissionListRelationFilter
  }, "id">

  export type PageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PageCountOrderByAggregateInput
    _max?: PageMaxOrderByAggregateInput
    _min?: PageMinOrderByAggregateInput
  }

  export type PageScalarWhereWithAggregatesInput = {
    AND?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    OR?: PageScalarWhereWithAggregatesInput[]
    NOT?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Page"> | string
    name?: StringWithAggregatesFilter<"Page"> | string
    description?: StringNullableWithAggregatesFilter<"Page"> | string | null
    isActive?: BoolWithAggregatesFilter<"Page"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Page"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Page"> | Date | string
  }

  export type UserTypePermissionWhereInput = {
    AND?: UserTypePermissionWhereInput | UserTypePermissionWhereInput[]
    OR?: UserTypePermissionWhereInput[]
    NOT?: UserTypePermissionWhereInput | UserTypePermissionWhereInput[]
    id?: IntFilter<"UserTypePermission"> | number
    userTypeId?: StringFilter<"UserTypePermission"> | string
    pageId?: StringFilter<"UserTypePermission"> | string
    hasAccess?: BoolFilter<"UserTypePermission"> | boolean
    createdAt?: DateTimeFilter<"UserTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserTypePermission"> | Date | string
    page?: XOR<PageScalarRelationFilter, PageWhereInput>
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
  }

  export type UserTypePermissionOrderByWithRelationInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    pageId?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    page?: PageOrderByWithRelationInput
    userType?: UserTypeOrderByWithRelationInput
  }

  export type UserTypePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userTypeId_pageId?: UserTypePermissionUserTypeIdPageIdCompoundUniqueInput
    AND?: UserTypePermissionWhereInput | UserTypePermissionWhereInput[]
    OR?: UserTypePermissionWhereInput[]
    NOT?: UserTypePermissionWhereInput | UserTypePermissionWhereInput[]
    userTypeId?: StringFilter<"UserTypePermission"> | string
    pageId?: StringFilter<"UserTypePermission"> | string
    hasAccess?: BoolFilter<"UserTypePermission"> | boolean
    createdAt?: DateTimeFilter<"UserTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserTypePermission"> | Date | string
    page?: XOR<PageScalarRelationFilter, PageWhereInput>
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
  }, "id" | "userTypeId_pageId">

  export type UserTypePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    pageId?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTypePermissionCountOrderByAggregateInput
    _avg?: UserTypePermissionAvgOrderByAggregateInput
    _max?: UserTypePermissionMaxOrderByAggregateInput
    _min?: UserTypePermissionMinOrderByAggregateInput
    _sum?: UserTypePermissionSumOrderByAggregateInput
  }

  export type UserTypePermissionScalarWhereWithAggregatesInput = {
    AND?: UserTypePermissionScalarWhereWithAggregatesInput | UserTypePermissionScalarWhereWithAggregatesInput[]
    OR?: UserTypePermissionScalarWhereWithAggregatesInput[]
    NOT?: UserTypePermissionScalarWhereWithAggregatesInput | UserTypePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserTypePermission"> | number
    userTypeId?: StringWithAggregatesFilter<"UserTypePermission"> | string
    pageId?: StringWithAggregatesFilter<"UserTypePermission"> | string
    hasAccess?: BoolWithAggregatesFilter<"UserTypePermission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserTypePermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserTypePermission"> | Date | string
  }

  export type LeadTypePermissionWhereInput = {
    AND?: LeadTypePermissionWhereInput | LeadTypePermissionWhereInput[]
    OR?: LeadTypePermissionWhereInput[]
    NOT?: LeadTypePermissionWhereInput | LeadTypePermissionWhereInput[]
    id?: IntFilter<"LeadTypePermission"> | number
    userTypeId?: StringFilter<"LeadTypePermission"> | string
    leadType?: StringFilter<"LeadTypePermission"> | string
    hasAccess?: BoolFilter<"LeadTypePermission"> | boolean
    createdAt?: DateTimeFilter<"LeadTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"LeadTypePermission"> | Date | string
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
  }

  export type LeadTypePermissionOrderByWithRelationInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userType?: UserTypeOrderByWithRelationInput
  }

  export type LeadTypePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userTypeId_leadType?: LeadTypePermissionUserTypeIdLeadTypeCompoundUniqueInput
    AND?: LeadTypePermissionWhereInput | LeadTypePermissionWhereInput[]
    OR?: LeadTypePermissionWhereInput[]
    NOT?: LeadTypePermissionWhereInput | LeadTypePermissionWhereInput[]
    userTypeId?: StringFilter<"LeadTypePermission"> | string
    leadType?: StringFilter<"LeadTypePermission"> | string
    hasAccess?: BoolFilter<"LeadTypePermission"> | boolean
    createdAt?: DateTimeFilter<"LeadTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"LeadTypePermission"> | Date | string
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
  }, "id" | "userTypeId_leadType">

  export type LeadTypePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LeadTypePermissionCountOrderByAggregateInput
    _avg?: LeadTypePermissionAvgOrderByAggregateInput
    _max?: LeadTypePermissionMaxOrderByAggregateInput
    _min?: LeadTypePermissionMinOrderByAggregateInput
    _sum?: LeadTypePermissionSumOrderByAggregateInput
  }

  export type LeadTypePermissionScalarWhereWithAggregatesInput = {
    AND?: LeadTypePermissionScalarWhereWithAggregatesInput | LeadTypePermissionScalarWhereWithAggregatesInput[]
    OR?: LeadTypePermissionScalarWhereWithAggregatesInput[]
    NOT?: LeadTypePermissionScalarWhereWithAggregatesInput | LeadTypePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeadTypePermission"> | number
    userTypeId?: StringWithAggregatesFilter<"LeadTypePermission"> | string
    leadType?: StringWithAggregatesFilter<"LeadTypePermission"> | string
    hasAccess?: BoolWithAggregatesFilter<"LeadTypePermission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"LeadTypePermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LeadTypePermission"> | Date | string
  }

  export type UserLeadTypePermissionWhereInput = {
    AND?: UserLeadTypePermissionWhereInput | UserLeadTypePermissionWhereInput[]
    OR?: UserLeadTypePermissionWhereInput[]
    NOT?: UserLeadTypePermissionWhereInput | UserLeadTypePermissionWhereInput[]
    id?: IntFilter<"UserLeadTypePermission"> | number
    userId?: StringFilter<"UserLeadTypePermission"> | string
    leadType?: StringFilter<"UserLeadTypePermission"> | string
    hasAccess?: BoolFilter<"UserLeadTypePermission"> | boolean
    createdAt?: DateTimeFilter<"UserLeadTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserLeadTypePermission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserLeadTypePermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserLeadTypePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_leadType?: UserLeadTypePermissionUserIdLeadTypeCompoundUniqueInput
    AND?: UserLeadTypePermissionWhereInput | UserLeadTypePermissionWhereInput[]
    OR?: UserLeadTypePermissionWhereInput[]
    NOT?: UserLeadTypePermissionWhereInput | UserLeadTypePermissionWhereInput[]
    userId?: StringFilter<"UserLeadTypePermission"> | string
    leadType?: StringFilter<"UserLeadTypePermission"> | string
    hasAccess?: BoolFilter<"UserLeadTypePermission"> | boolean
    createdAt?: DateTimeFilter<"UserLeadTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserLeadTypePermission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_leadType">

  export type UserLeadTypePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserLeadTypePermissionCountOrderByAggregateInput
    _avg?: UserLeadTypePermissionAvgOrderByAggregateInput
    _max?: UserLeadTypePermissionMaxOrderByAggregateInput
    _min?: UserLeadTypePermissionMinOrderByAggregateInput
    _sum?: UserLeadTypePermissionSumOrderByAggregateInput
  }

  export type UserLeadTypePermissionScalarWhereWithAggregatesInput = {
    AND?: UserLeadTypePermissionScalarWhereWithAggregatesInput | UserLeadTypePermissionScalarWhereWithAggregatesInput[]
    OR?: UserLeadTypePermissionScalarWhereWithAggregatesInput[]
    NOT?: UserLeadTypePermissionScalarWhereWithAggregatesInput | UserLeadTypePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserLeadTypePermission"> | number
    userId?: StringWithAggregatesFilter<"UserLeadTypePermission"> | string
    leadType?: StringWithAggregatesFilter<"UserLeadTypePermission"> | string
    hasAccess?: BoolWithAggregatesFilter<"UserLeadTypePermission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserLeadTypePermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserLeadTypePermission"> | Date | string
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: StringFilter<"FAQ"> | string
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    category?: StringFilter<"FAQ"> | string
    isActive?: BoolFilter<"FAQ"> | boolean
    sortOrder?: IntFilter<"FAQ"> | number
    createdAt?: DateTimeFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeFilter<"FAQ"> | Date | string
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    category?: StringFilter<"FAQ"> | string
    isActive?: BoolFilter<"FAQ"> | boolean
    sortOrder?: IntFilter<"FAQ"> | number
    createdAt?: DateTimeFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeFilter<"FAQ"> | Date | string
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _avg?: FAQAvgOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
    _sum?: FAQSumOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FAQ"> | string
    question?: StringWithAggregatesFilter<"FAQ"> | string
    answer?: StringWithAggregatesFilter<"FAQ"> | string
    category?: StringWithAggregatesFilter<"FAQ"> | string
    isActive?: BoolWithAggregatesFilter<"FAQ"> | boolean
    sortOrder?: IntWithAggregatesFilter<"FAQ"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FAQ"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FAQ"> | Date | string
  }

  export type AboutWhereInput = {
    AND?: AboutWhereInput | AboutWhereInput[]
    OR?: AboutWhereInput[]
    NOT?: AboutWhereInput | AboutWhereInput[]
    id?: StringFilter<"About"> | string
    section?: StringFilter<"About"> | string
    title?: StringNullableFilter<"About"> | string | null
    subtitle?: StringNullableFilter<"About"> | string | null
    content?: StringNullableFilter<"About"> | string | null
    imageUrl?: StringNullableFilter<"About"> | string | null
    data?: JsonNullableFilter<"About">
    isActive?: BoolFilter<"About"> | boolean
    sortOrder?: IntFilter<"About"> | number
    createdAt?: DateTimeFilter<"About"> | Date | string
    updatedAt?: DateTimeFilter<"About"> | Date | string
  }

  export type AboutOrderByWithRelationInput = {
    id?: SortOrder
    section?: SortOrder
    title?: SortOrderInput | SortOrder
    subtitle?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AboutWhereInput | AboutWhereInput[]
    OR?: AboutWhereInput[]
    NOT?: AboutWhereInput | AboutWhereInput[]
    section?: StringFilter<"About"> | string
    title?: StringNullableFilter<"About"> | string | null
    subtitle?: StringNullableFilter<"About"> | string | null
    content?: StringNullableFilter<"About"> | string | null
    imageUrl?: StringNullableFilter<"About"> | string | null
    data?: JsonNullableFilter<"About">
    isActive?: BoolFilter<"About"> | boolean
    sortOrder?: IntFilter<"About"> | number
    createdAt?: DateTimeFilter<"About"> | Date | string
    updatedAt?: DateTimeFilter<"About"> | Date | string
  }, "id">

  export type AboutOrderByWithAggregationInput = {
    id?: SortOrder
    section?: SortOrder
    title?: SortOrderInput | SortOrder
    subtitle?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AboutCountOrderByAggregateInput
    _avg?: AboutAvgOrderByAggregateInput
    _max?: AboutMaxOrderByAggregateInput
    _min?: AboutMinOrderByAggregateInput
    _sum?: AboutSumOrderByAggregateInput
  }

  export type AboutScalarWhereWithAggregatesInput = {
    AND?: AboutScalarWhereWithAggregatesInput | AboutScalarWhereWithAggregatesInput[]
    OR?: AboutScalarWhereWithAggregatesInput[]
    NOT?: AboutScalarWhereWithAggregatesInput | AboutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"About"> | string
    section?: StringWithAggregatesFilter<"About"> | string
    title?: StringNullableWithAggregatesFilter<"About"> | string | null
    subtitle?: StringNullableWithAggregatesFilter<"About"> | string | null
    content?: StringNullableWithAggregatesFilter<"About"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"About"> | string | null
    data?: JsonNullableWithAggregatesFilter<"About">
    isActive?: BoolWithAggregatesFilter<"About"> | boolean
    sortOrder?: IntWithAggregatesFilter<"About"> | number
    createdAt?: DateTimeWithAggregatesFilter<"About"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"About"> | Date | string
  }

  export type DesignSettingsWhereInput = {
    AND?: DesignSettingsWhereInput | DesignSettingsWhereInput[]
    OR?: DesignSettingsWhereInput[]
    NOT?: DesignSettingsWhereInput | DesignSettingsWhereInput[]
    id?: StringFilter<"DesignSettings"> | string
    colors?: JsonFilter<"DesignSettings">
    createdAt?: DateTimeFilter<"DesignSettings"> | Date | string
    updatedAt?: DateTimeFilter<"DesignSettings"> | Date | string
  }

  export type DesignSettingsOrderByWithRelationInput = {
    id?: SortOrder
    colors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DesignSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DesignSettingsWhereInput | DesignSettingsWhereInput[]
    OR?: DesignSettingsWhereInput[]
    NOT?: DesignSettingsWhereInput | DesignSettingsWhereInput[]
    colors?: JsonFilter<"DesignSettings">
    createdAt?: DateTimeFilter<"DesignSettings"> | Date | string
    updatedAt?: DateTimeFilter<"DesignSettings"> | Date | string
  }, "id">

  export type DesignSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    colors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DesignSettingsCountOrderByAggregateInput
    _max?: DesignSettingsMaxOrderByAggregateInput
    _min?: DesignSettingsMinOrderByAggregateInput
  }

  export type DesignSettingsScalarWhereWithAggregatesInput = {
    AND?: DesignSettingsScalarWhereWithAggregatesInput | DesignSettingsScalarWhereWithAggregatesInput[]
    OR?: DesignSettingsScalarWhereWithAggregatesInput[]
    NOT?: DesignSettingsScalarWhereWithAggregatesInput | DesignSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DesignSettings"> | string
    colors?: JsonWithAggregatesFilter<"DesignSettings">
    createdAt?: DateTimeWithAggregatesFilter<"DesignSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DesignSettings"> | Date | string
  }

  export type EmailTemplateWhereInput = {
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    id?: StringFilter<"EmailTemplate"> | string
    type?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    subject?: StringFilter<"EmailTemplate"> | string
    htmlContent?: StringFilter<"EmailTemplate"> | string
    textContent?: StringNullableFilter<"EmailTemplate"> | string | null
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    variables?: JsonNullableFilter<"EmailTemplate">
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
  }

  export type EmailTemplateOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    variables?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type?: string
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    name?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    subject?: StringFilter<"EmailTemplate"> | string
    htmlContent?: StringFilter<"EmailTemplate"> | string
    textContent?: StringNullableFilter<"EmailTemplate"> | string | null
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    variables?: JsonNullableFilter<"EmailTemplate">
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
  }, "id" | "type">

  export type EmailTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    variables?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailTemplateCountOrderByAggregateInput
    _max?: EmailTemplateMaxOrderByAggregateInput
    _min?: EmailTemplateMinOrderByAggregateInput
  }

  export type EmailTemplateScalarWhereWithAggregatesInput = {
    AND?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    OR?: EmailTemplateScalarWhereWithAggregatesInput[]
    NOT?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailTemplate"> | string
    type?: StringWithAggregatesFilter<"EmailTemplate"> | string
    name?: StringWithAggregatesFilter<"EmailTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    subject?: StringWithAggregatesFilter<"EmailTemplate"> | string
    htmlContent?: StringWithAggregatesFilter<"EmailTemplate"> | string
    textContent?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    isActive?: BoolWithAggregatesFilter<"EmailTemplate"> | boolean
    variables?: JsonNullableWithAggregatesFilter<"EmailTemplate">
    createdAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
  }

  export type SMSTemplateWhereInput = {
    AND?: SMSTemplateWhereInput | SMSTemplateWhereInput[]
    OR?: SMSTemplateWhereInput[]
    NOT?: SMSTemplateWhereInput | SMSTemplateWhereInput[]
    id?: StringFilter<"SMSTemplate"> | string
    type?: StringFilter<"SMSTemplate"> | string
    name?: StringFilter<"SMSTemplate"> | string
    description?: StringNullableFilter<"SMSTemplate"> | string | null
    content?: StringFilter<"SMSTemplate"> | string
    isActive?: BoolFilter<"SMSTemplate"> | boolean
    variables?: JsonNullableFilter<"SMSTemplate">
    createdAt?: DateTimeFilter<"SMSTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"SMSTemplate"> | Date | string
  }

  export type SMSTemplateOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrder
    isActive?: SortOrder
    variables?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SMSTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type?: string
    AND?: SMSTemplateWhereInput | SMSTemplateWhereInput[]
    OR?: SMSTemplateWhereInput[]
    NOT?: SMSTemplateWhereInput | SMSTemplateWhereInput[]
    name?: StringFilter<"SMSTemplate"> | string
    description?: StringNullableFilter<"SMSTemplate"> | string | null
    content?: StringFilter<"SMSTemplate"> | string
    isActive?: BoolFilter<"SMSTemplate"> | boolean
    variables?: JsonNullableFilter<"SMSTemplate">
    createdAt?: DateTimeFilter<"SMSTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"SMSTemplate"> | Date | string
  }, "id" | "type">

  export type SMSTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrder
    isActive?: SortOrder
    variables?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SMSTemplateCountOrderByAggregateInput
    _max?: SMSTemplateMaxOrderByAggregateInput
    _min?: SMSTemplateMinOrderByAggregateInput
  }

  export type SMSTemplateScalarWhereWithAggregatesInput = {
    AND?: SMSTemplateScalarWhereWithAggregatesInput | SMSTemplateScalarWhereWithAggregatesInput[]
    OR?: SMSTemplateScalarWhereWithAggregatesInput[]
    NOT?: SMSTemplateScalarWhereWithAggregatesInput | SMSTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SMSTemplate"> | string
    type?: StringWithAggregatesFilter<"SMSTemplate"> | string
    name?: StringWithAggregatesFilter<"SMSTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"SMSTemplate"> | string | null
    content?: StringWithAggregatesFilter<"SMSTemplate"> | string
    isActive?: BoolWithAggregatesFilter<"SMSTemplate"> | boolean
    variables?: JsonNullableWithAggregatesFilter<"SMSTemplate">
    createdAt?: DateTimeWithAggregatesFilter<"SMSTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SMSTemplate"> | Date | string
  }

  export type ActivityLogWhereInput = {
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    id?: StringFilter<"ActivityLog"> | string
    userId?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    details?: StringNullableFilter<"ActivityLog"> | string | null
    entityType?: StringNullableFilter<"ActivityLog"> | string | null
    entityId?: StringNullableFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    userId?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    details?: StringNullableFilter<"ActivityLog"> | string | null
    entityType?: StringNullableFilter<"ActivityLog"> | string | null
    entityId?: StringNullableFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ActivityLogCountOrderByAggregateInput
    _max?: ActivityLogMaxOrderByAggregateInput
    _min?: ActivityLogMinOrderByAggregateInput
  }

  export type ActivityLogScalarWhereWithAggregatesInput = {
    AND?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    OR?: ActivityLogScalarWhereWithAggregatesInput[]
    NOT?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityLog"> | string
    userId?: StringWithAggregatesFilter<"ActivityLog"> | string
    action?: StringWithAggregatesFilter<"ActivityLog"> | string
    details?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    entityType?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ActivityLog"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    userId?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    userId?: StringFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    userId?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    used?: BoolWithAggregatesFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type BalanceTransactionWhereInput = {
    AND?: BalanceTransactionWhereInput | BalanceTransactionWhereInput[]
    OR?: BalanceTransactionWhereInput[]
    NOT?: BalanceTransactionWhereInput | BalanceTransactionWhereInput[]
    id?: StringFilter<"BalanceTransaction"> | string
    userId?: StringFilter<"BalanceTransaction"> | string
    amount?: FloatFilter<"BalanceTransaction"> | number
    type?: StringFilter<"BalanceTransaction"> | string
    description?: StringNullableFilter<"BalanceTransaction"> | string | null
    relatedId?: StringNullableFilter<"BalanceTransaction"> | string | null
    adminId?: StringNullableFilter<"BalanceTransaction"> | string | null
    createdAt?: DateTimeFilter<"BalanceTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BalanceTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    adminId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BalanceTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BalanceTransactionWhereInput | BalanceTransactionWhereInput[]
    OR?: BalanceTransactionWhereInput[]
    NOT?: BalanceTransactionWhereInput | BalanceTransactionWhereInput[]
    userId?: StringFilter<"BalanceTransaction"> | string
    amount?: FloatFilter<"BalanceTransaction"> | number
    type?: StringFilter<"BalanceTransaction"> | string
    description?: StringNullableFilter<"BalanceTransaction"> | string | null
    relatedId?: StringNullableFilter<"BalanceTransaction"> | string | null
    adminId?: StringNullableFilter<"BalanceTransaction"> | string | null
    createdAt?: DateTimeFilter<"BalanceTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BalanceTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    relatedId?: SortOrderInput | SortOrder
    adminId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BalanceTransactionCountOrderByAggregateInput
    _avg?: BalanceTransactionAvgOrderByAggregateInput
    _max?: BalanceTransactionMaxOrderByAggregateInput
    _min?: BalanceTransactionMinOrderByAggregateInput
    _sum?: BalanceTransactionSumOrderByAggregateInput
  }

  export type BalanceTransactionScalarWhereWithAggregatesInput = {
    AND?: BalanceTransactionScalarWhereWithAggregatesInput | BalanceTransactionScalarWhereWithAggregatesInput[]
    OR?: BalanceTransactionScalarWhereWithAggregatesInput[]
    NOT?: BalanceTransactionScalarWhereWithAggregatesInput | BalanceTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BalanceTransaction"> | string
    userId?: StringWithAggregatesFilter<"BalanceTransaction"> | string
    amount?: FloatWithAggregatesFilter<"BalanceTransaction"> | number
    type?: StringWithAggregatesFilter<"BalanceTransaction"> | string
    description?: StringNullableWithAggregatesFilter<"BalanceTransaction"> | string | null
    relatedId?: StringNullableWithAggregatesFilter<"BalanceTransaction"> | string | null
    adminId?: StringNullableWithAggregatesFilter<"BalanceTransaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BalanceTransaction"> | Date | string
  }

  export type NotificationTypeWhereInput = {
    AND?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    OR?: NotificationTypeWhereInput[]
    NOT?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    id?: StringFilter<"NotificationType"> | string
    code?: StringFilter<"NotificationType"> | string
    name?: StringFilter<"NotificationType"> | string
    description?: StringNullableFilter<"NotificationType"> | string | null
    category?: StringFilter<"NotificationType"> | string
    defaultEnabled?: BoolFilter<"NotificationType"> | boolean
    emailEnabled?: BoolFilter<"NotificationType"> | boolean
    inAppEnabled?: BoolFilter<"NotificationType"> | boolean
    icon?: StringNullableFilter<"NotificationType"> | string | null
    isActive?: BoolFilter<"NotificationType"> | boolean
    createdAt?: DateTimeFilter<"NotificationType"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationType"> | Date | string
    notifications?: NotificationListRelationFilter
    userPreferences?: NotificationPreferenceListRelationFilter
    roleTypePermissions?: NotificationRolePermissionListRelationFilter
  }

  export type NotificationTypeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    defaultEnabled?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    icon?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notifications?: NotificationOrderByRelationAggregateInput
    userPreferences?: NotificationPreferenceOrderByRelationAggregateInput
    roleTypePermissions?: NotificationRolePermissionOrderByRelationAggregateInput
  }

  export type NotificationTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    OR?: NotificationTypeWhereInput[]
    NOT?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    name?: StringFilter<"NotificationType"> | string
    description?: StringNullableFilter<"NotificationType"> | string | null
    category?: StringFilter<"NotificationType"> | string
    defaultEnabled?: BoolFilter<"NotificationType"> | boolean
    emailEnabled?: BoolFilter<"NotificationType"> | boolean
    inAppEnabled?: BoolFilter<"NotificationType"> | boolean
    icon?: StringNullableFilter<"NotificationType"> | string | null
    isActive?: BoolFilter<"NotificationType"> | boolean
    createdAt?: DateTimeFilter<"NotificationType"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationType"> | Date | string
    notifications?: NotificationListRelationFilter
    userPreferences?: NotificationPreferenceListRelationFilter
    roleTypePermissions?: NotificationRolePermissionListRelationFilter
  }, "id" | "code">

  export type NotificationTypeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    defaultEnabled?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    icon?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationTypeCountOrderByAggregateInput
    _max?: NotificationTypeMaxOrderByAggregateInput
    _min?: NotificationTypeMinOrderByAggregateInput
  }

  export type NotificationTypeScalarWhereWithAggregatesInput = {
    AND?: NotificationTypeScalarWhereWithAggregatesInput | NotificationTypeScalarWhereWithAggregatesInput[]
    OR?: NotificationTypeScalarWhereWithAggregatesInput[]
    NOT?: NotificationTypeScalarWhereWithAggregatesInput | NotificationTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationType"> | string
    code?: StringWithAggregatesFilter<"NotificationType"> | string
    name?: StringWithAggregatesFilter<"NotificationType"> | string
    description?: StringNullableWithAggregatesFilter<"NotificationType"> | string | null
    category?: StringWithAggregatesFilter<"NotificationType"> | string
    defaultEnabled?: BoolWithAggregatesFilter<"NotificationType"> | boolean
    emailEnabled?: BoolWithAggregatesFilter<"NotificationType"> | boolean
    inAppEnabled?: BoolWithAggregatesFilter<"NotificationType"> | boolean
    icon?: StringNullableWithAggregatesFilter<"NotificationType"> | string | null
    isActive?: BoolWithAggregatesFilter<"NotificationType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationType"> | Date | string
  }

  export type NotificationPreferenceWhereInput = {
    AND?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    OR?: NotificationPreferenceWhereInput[]
    NOT?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    id?: StringFilter<"NotificationPreference"> | string
    userId?: StringFilter<"NotificationPreference"> | string
    notificationTypeId?: StringFilter<"NotificationPreference"> | string
    emailEnabled?: BoolFilter<"NotificationPreference"> | boolean
    inAppEnabled?: BoolFilter<"NotificationPreference"> | boolean
    createdAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notificationType?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }

  export type NotificationPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    notificationType?: NotificationTypeOrderByWithRelationInput
  }

  export type NotificationPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_notificationTypeId?: NotificationPreferenceUserIdNotificationTypeIdCompoundUniqueInput
    AND?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    OR?: NotificationPreferenceWhereInput[]
    NOT?: NotificationPreferenceWhereInput | NotificationPreferenceWhereInput[]
    userId?: StringFilter<"NotificationPreference"> | string
    notificationTypeId?: StringFilter<"NotificationPreference"> | string
    emailEnabled?: BoolFilter<"NotificationPreference"> | boolean
    inAppEnabled?: BoolFilter<"NotificationPreference"> | boolean
    createdAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notificationType?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }, "id" | "userId_notificationTypeId">

  export type NotificationPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationPreferenceCountOrderByAggregateInput
    _max?: NotificationPreferenceMaxOrderByAggregateInput
    _min?: NotificationPreferenceMinOrderByAggregateInput
  }

  export type NotificationPreferenceScalarWhereWithAggregatesInput = {
    AND?: NotificationPreferenceScalarWhereWithAggregatesInput | NotificationPreferenceScalarWhereWithAggregatesInput[]
    OR?: NotificationPreferenceScalarWhereWithAggregatesInput[]
    NOT?: NotificationPreferenceScalarWhereWithAggregatesInput | NotificationPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationPreference"> | string
    userId?: StringWithAggregatesFilter<"NotificationPreference"> | string
    notificationTypeId?: StringWithAggregatesFilter<"NotificationPreference"> | string
    emailEnabled?: BoolWithAggregatesFilter<"NotificationPreference"> | boolean
    inAppEnabled?: BoolWithAggregatesFilter<"NotificationPreference"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationPreference"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    notificationTypeId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    emailSent?: BoolFilter<"Notification"> | boolean
    emailSentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notificationType?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    emailSent?: SortOrder
    emailSentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    notificationType?: NotificationTypeOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    notificationTypeId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    emailSent?: BoolFilter<"Notification"> | boolean
    emailSentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    notificationType?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    emailSent?: SortOrder
    emailSentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    notificationTypeId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    data?: JsonNullableWithAggregatesFilter<"Notification">
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    emailSent?: BoolWithAggregatesFilter<"Notification"> | boolean
    emailSentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type NotificationRolePermissionWhereInput = {
    AND?: NotificationRolePermissionWhereInput | NotificationRolePermissionWhereInput[]
    OR?: NotificationRolePermissionWhereInput[]
    NOT?: NotificationRolePermissionWhereInput | NotificationRolePermissionWhereInput[]
    id?: IntFilter<"NotificationRolePermission"> | number
    userTypeId?: StringFilter<"NotificationRolePermission"> | string
    notificationTypeId?: StringFilter<"NotificationRolePermission"> | string
    canReceive?: BoolFilter<"NotificationRolePermission"> | boolean
    createdAt?: DateTimeFilter<"NotificationRolePermission"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationRolePermission"> | Date | string
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
    notificationType?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }

  export type NotificationRolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    notificationTypeId?: SortOrder
    canReceive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userType?: UserTypeOrderByWithRelationInput
    notificationType?: NotificationTypeOrderByWithRelationInput
  }

  export type NotificationRolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userTypeId_notificationTypeId?: NotificationRolePermissionUserTypeIdNotificationTypeIdCompoundUniqueInput
    AND?: NotificationRolePermissionWhereInput | NotificationRolePermissionWhereInput[]
    OR?: NotificationRolePermissionWhereInput[]
    NOT?: NotificationRolePermissionWhereInput | NotificationRolePermissionWhereInput[]
    userTypeId?: StringFilter<"NotificationRolePermission"> | string
    notificationTypeId?: StringFilter<"NotificationRolePermission"> | string
    canReceive?: BoolFilter<"NotificationRolePermission"> | boolean
    createdAt?: DateTimeFilter<"NotificationRolePermission"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationRolePermission"> | Date | string
    userType?: XOR<UserTypeScalarRelationFilter, UserTypeWhereInput>
    notificationType?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }, "id" | "userTypeId_notificationTypeId">

  export type NotificationRolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    notificationTypeId?: SortOrder
    canReceive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationRolePermissionCountOrderByAggregateInput
    _avg?: NotificationRolePermissionAvgOrderByAggregateInput
    _max?: NotificationRolePermissionMaxOrderByAggregateInput
    _min?: NotificationRolePermissionMinOrderByAggregateInput
    _sum?: NotificationRolePermissionSumOrderByAggregateInput
  }

  export type NotificationRolePermissionScalarWhereWithAggregatesInput = {
    AND?: NotificationRolePermissionScalarWhereWithAggregatesInput | NotificationRolePermissionScalarWhereWithAggregatesInput[]
    OR?: NotificationRolePermissionScalarWhereWithAggregatesInput[]
    NOT?: NotificationRolePermissionScalarWhereWithAggregatesInput | NotificationRolePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NotificationRolePermission"> | number
    userTypeId?: StringWithAggregatesFilter<"NotificationRolePermission"> | string
    notificationTypeId?: StringWithAggregatesFilter<"NotificationRolePermission"> | string
    canReceive?: BoolWithAggregatesFilter<"NotificationRolePermission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationRolePermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationRolePermission"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadCreateInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    bids?: BidCreateNestedManyWithoutLeadInput
    owner: UserCreateNestedOneWithoutLeadsInput
    sale?: LeadSaleCreateNestedOneWithoutLeadInput
    watchers?: LeadWatchCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    bids?: BidUncheckedCreateNestedManyWithoutLeadInput
    sale?: LeadSaleUncheckedCreateNestedOneWithoutLeadInput
    watchers?: LeadWatchUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bids?: BidUpdateManyWithoutLeadNestedInput
    owner?: UserUpdateOneRequiredWithoutLeadsNestedInput
    sale?: LeadSaleUpdateOneWithoutLeadNestedInput
    watchers?: LeadWatchUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    bids?: BidUncheckedUpdateManyWithoutLeadNestedInput
    sale?: LeadSaleUncheckedUpdateOneWithoutLeadNestedInput
    watchers?: LeadWatchUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadCreateManyInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
  }

  export type LeadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type BidCreateInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    lead: LeadCreateNestedOneWithoutBidsInput
    user: UserCreateNestedOneWithoutBidsInput
  }

  export type BidUncheckedCreateInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    leadId: string
    userId: string
  }

  export type BidUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lead?: LeadUpdateOneRequiredWithoutBidsNestedInput
    user?: UserUpdateOneRequiredWithoutBidsNestedInput
  }

  export type BidUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BidCreateManyInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    leadId: string
    userId: string
  }

  export type BidUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BidUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadWatchCreateInput = {
    id?: string
    createdAt?: Date | string
    lead: LeadCreateNestedOneWithoutWatchersInput
    user: UserCreateNestedOneWithoutWatchingInput
  }

  export type LeadWatchUncheckedCreateInput = {
    id?: string
    leadId: string
    userId: string
    createdAt?: Date | string
  }

  export type LeadWatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lead?: LeadUpdateOneRequiredWithoutWatchersNestedInput
    user?: UserUpdateOneRequiredWithoutWatchingNestedInput
  }

  export type LeadWatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadWatchCreateManyInput = {
    id?: string
    leadId: string
    userId: string
    createdAt?: Date | string
  }

  export type LeadWatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadWatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadSaleCreateInput = {
    id?: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
    buyer: UserCreateNestedOneWithoutPurchasedLeadsInput
    lead: LeadCreateNestedOneWithoutSaleInput
  }

  export type LeadSaleUncheckedCreateInput = {
    id?: string
    leadId: string
    buyerId: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
  }

  export type LeadSaleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneRequiredWithoutPurchasedLeadsNestedInput
    lead?: LeadUpdateOneRequiredWithoutSaleNestedInput
  }

  export type LeadSaleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadSaleCreateManyInput = {
    id?: string
    leadId: string
    buyerId: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
  }

  export type LeadSaleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadSaleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsCreateInput = {
    id?: string
    leadIdFormat?: string
    customFormat?: string
    leadPrefix?: string
    startingNumber?: number
    numberType?: string
    defaultCurrency?: string
    defaultAuctionDays?: number
    defaultMinIncrement?: number
    homepageHeroEyebrow?: string
    homepageHeroTitle?: string
    homepageHeroHighlight?: string
    homepageHeroTitleSuffix?: string
    homepageHeroSubtitle?: string
    homepageHeroPrimaryCtaText?: string
    homepageHeroPrimaryCtaLink?: string
    homepageHeroSecondaryCtaText?: string
    homepageHeroSecondaryCtaLink?: string
    homepageFeatureHeading?: string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: string
    homepageShowcaseTitle?: string
    homepageShowcaseCtaText?: string
    homepageShowcaseCtaLink?: string
    homepageStatsEyebrow?: string
    homepageStatsTitle?: string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: string
    homepageCtaSubtitle?: string
    homepageCtaPrimaryText?: string
    homepageCtaPrimaryLink?: string
    homepageCtaSecondaryText?: string
    homepageCtaSecondaryLink?: string
    maintenanceMode?: boolean
    maintenanceMessage?: string
    smtpHost?: string
    smtpPort?: number
    smtpUser?: string
    smtpPass?: string
    smtpFromName?: string
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    companyLogoUrl?: string
    companyName?: string
    faviconUrl?: string
    footerDescription?: string
    footerEmail?: string
    footerNote?: string
    footerPhone?: string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: string
  }

  export type SettingsUncheckedCreateInput = {
    id?: string
    leadIdFormat?: string
    customFormat?: string
    leadPrefix?: string
    startingNumber?: number
    numberType?: string
    defaultCurrency?: string
    defaultAuctionDays?: number
    defaultMinIncrement?: number
    homepageHeroEyebrow?: string
    homepageHeroTitle?: string
    homepageHeroHighlight?: string
    homepageHeroTitleSuffix?: string
    homepageHeroSubtitle?: string
    homepageHeroPrimaryCtaText?: string
    homepageHeroPrimaryCtaLink?: string
    homepageHeroSecondaryCtaText?: string
    homepageHeroSecondaryCtaLink?: string
    homepageFeatureHeading?: string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: string
    homepageShowcaseTitle?: string
    homepageShowcaseCtaText?: string
    homepageShowcaseCtaLink?: string
    homepageStatsEyebrow?: string
    homepageStatsTitle?: string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: string
    homepageCtaSubtitle?: string
    homepageCtaPrimaryText?: string
    homepageCtaPrimaryLink?: string
    homepageCtaSecondaryText?: string
    homepageCtaSecondaryLink?: string
    maintenanceMode?: boolean
    maintenanceMessage?: string
    smtpHost?: string
    smtpPort?: number
    smtpUser?: string
    smtpPass?: string
    smtpFromName?: string
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    companyLogoUrl?: string
    companyName?: string
    faviconUrl?: string
    footerDescription?: string
    footerEmail?: string
    footerNote?: string
    footerPhone?: string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: string
  }

  export type SettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadIdFormat?: StringFieldUpdateOperationsInput | string
    customFormat?: StringFieldUpdateOperationsInput | string
    leadPrefix?: StringFieldUpdateOperationsInput | string
    startingNumber?: IntFieldUpdateOperationsInput | number
    numberType?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    defaultAuctionDays?: IntFieldUpdateOperationsInput | number
    defaultMinIncrement?: IntFieldUpdateOperationsInput | number
    homepageHeroEyebrow?: StringFieldUpdateOperationsInput | string
    homepageHeroTitle?: StringFieldUpdateOperationsInput | string
    homepageHeroHighlight?: StringFieldUpdateOperationsInput | string
    homepageHeroTitleSuffix?: StringFieldUpdateOperationsInput | string
    homepageHeroSubtitle?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageFeatureHeading?: StringFieldUpdateOperationsInput | string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: StringFieldUpdateOperationsInput | string
    homepageShowcaseTitle?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaText?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaLink?: StringFieldUpdateOperationsInput | string
    homepageStatsEyebrow?: StringFieldUpdateOperationsInput | string
    homepageStatsTitle?: StringFieldUpdateOperationsInput | string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: StringFieldUpdateOperationsInput | string
    homepageCtaSubtitle?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryLink?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryLink?: StringFieldUpdateOperationsInput | string
    maintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: StringFieldUpdateOperationsInput | string
    smtpHost?: StringFieldUpdateOperationsInput | string
    smtpPort?: IntFieldUpdateOperationsInput | number
    smtpUser?: StringFieldUpdateOperationsInput | string
    smtpPass?: StringFieldUpdateOperationsInput | string
    smtpFromName?: StringFieldUpdateOperationsInput | string
    smtpUseTLS?: BoolFieldUpdateOperationsInput | boolean
    smtpUseSSL?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyLogoUrl?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    faviconUrl?: StringFieldUpdateOperationsInput | string
    footerDescription?: StringFieldUpdateOperationsInput | string
    footerEmail?: StringFieldUpdateOperationsInput | string
    footerNote?: StringFieldUpdateOperationsInput | string
    footerPhone?: StringFieldUpdateOperationsInput | string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadIdFormat?: StringFieldUpdateOperationsInput | string
    customFormat?: StringFieldUpdateOperationsInput | string
    leadPrefix?: StringFieldUpdateOperationsInput | string
    startingNumber?: IntFieldUpdateOperationsInput | number
    numberType?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    defaultAuctionDays?: IntFieldUpdateOperationsInput | number
    defaultMinIncrement?: IntFieldUpdateOperationsInput | number
    homepageHeroEyebrow?: StringFieldUpdateOperationsInput | string
    homepageHeroTitle?: StringFieldUpdateOperationsInput | string
    homepageHeroHighlight?: StringFieldUpdateOperationsInput | string
    homepageHeroTitleSuffix?: StringFieldUpdateOperationsInput | string
    homepageHeroSubtitle?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageFeatureHeading?: StringFieldUpdateOperationsInput | string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: StringFieldUpdateOperationsInput | string
    homepageShowcaseTitle?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaText?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaLink?: StringFieldUpdateOperationsInput | string
    homepageStatsEyebrow?: StringFieldUpdateOperationsInput | string
    homepageStatsTitle?: StringFieldUpdateOperationsInput | string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: StringFieldUpdateOperationsInput | string
    homepageCtaSubtitle?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryLink?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryLink?: StringFieldUpdateOperationsInput | string
    maintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: StringFieldUpdateOperationsInput | string
    smtpHost?: StringFieldUpdateOperationsInput | string
    smtpPort?: IntFieldUpdateOperationsInput | number
    smtpUser?: StringFieldUpdateOperationsInput | string
    smtpPass?: StringFieldUpdateOperationsInput | string
    smtpFromName?: StringFieldUpdateOperationsInput | string
    smtpUseTLS?: BoolFieldUpdateOperationsInput | boolean
    smtpUseSSL?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyLogoUrl?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    faviconUrl?: StringFieldUpdateOperationsInput | string
    footerDescription?: StringFieldUpdateOperationsInput | string
    footerEmail?: StringFieldUpdateOperationsInput | string
    footerNote?: StringFieldUpdateOperationsInput | string
    footerPhone?: StringFieldUpdateOperationsInput | string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SettingsCreateManyInput = {
    id?: string
    leadIdFormat?: string
    customFormat?: string
    leadPrefix?: string
    startingNumber?: number
    numberType?: string
    defaultCurrency?: string
    defaultAuctionDays?: number
    defaultMinIncrement?: number
    homepageHeroEyebrow?: string
    homepageHeroTitle?: string
    homepageHeroHighlight?: string
    homepageHeroTitleSuffix?: string
    homepageHeroSubtitle?: string
    homepageHeroPrimaryCtaText?: string
    homepageHeroPrimaryCtaLink?: string
    homepageHeroSecondaryCtaText?: string
    homepageHeroSecondaryCtaLink?: string
    homepageFeatureHeading?: string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: string
    homepageShowcaseTitle?: string
    homepageShowcaseCtaText?: string
    homepageShowcaseCtaLink?: string
    homepageStatsEyebrow?: string
    homepageStatsTitle?: string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: string
    homepageCtaSubtitle?: string
    homepageCtaPrimaryText?: string
    homepageCtaPrimaryLink?: string
    homepageCtaSecondaryText?: string
    homepageCtaSecondaryLink?: string
    maintenanceMode?: boolean
    maintenanceMessage?: string
    smtpHost?: string
    smtpPort?: number
    smtpUser?: string
    smtpPass?: string
    smtpFromName?: string
    smtpUseTLS?: boolean
    smtpUseSSL?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    companyLogoUrl?: string
    companyName?: string
    faviconUrl?: string
    footerDescription?: string
    footerEmail?: string
    footerNote?: string
    footerPhone?: string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: string
  }

  export type SettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadIdFormat?: StringFieldUpdateOperationsInput | string
    customFormat?: StringFieldUpdateOperationsInput | string
    leadPrefix?: StringFieldUpdateOperationsInput | string
    startingNumber?: IntFieldUpdateOperationsInput | number
    numberType?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    defaultAuctionDays?: IntFieldUpdateOperationsInput | number
    defaultMinIncrement?: IntFieldUpdateOperationsInput | number
    homepageHeroEyebrow?: StringFieldUpdateOperationsInput | string
    homepageHeroTitle?: StringFieldUpdateOperationsInput | string
    homepageHeroHighlight?: StringFieldUpdateOperationsInput | string
    homepageHeroTitleSuffix?: StringFieldUpdateOperationsInput | string
    homepageHeroSubtitle?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageFeatureHeading?: StringFieldUpdateOperationsInput | string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: StringFieldUpdateOperationsInput | string
    homepageShowcaseTitle?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaText?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaLink?: StringFieldUpdateOperationsInput | string
    homepageStatsEyebrow?: StringFieldUpdateOperationsInput | string
    homepageStatsTitle?: StringFieldUpdateOperationsInput | string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: StringFieldUpdateOperationsInput | string
    homepageCtaSubtitle?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryLink?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryLink?: StringFieldUpdateOperationsInput | string
    maintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: StringFieldUpdateOperationsInput | string
    smtpHost?: StringFieldUpdateOperationsInput | string
    smtpPort?: IntFieldUpdateOperationsInput | number
    smtpUser?: StringFieldUpdateOperationsInput | string
    smtpPass?: StringFieldUpdateOperationsInput | string
    smtpFromName?: StringFieldUpdateOperationsInput | string
    smtpUseTLS?: BoolFieldUpdateOperationsInput | boolean
    smtpUseSSL?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyLogoUrl?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    faviconUrl?: StringFieldUpdateOperationsInput | string
    footerDescription?: StringFieldUpdateOperationsInput | string
    footerEmail?: StringFieldUpdateOperationsInput | string
    footerNote?: StringFieldUpdateOperationsInput | string
    footerPhone?: StringFieldUpdateOperationsInput | string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadIdFormat?: StringFieldUpdateOperationsInput | string
    customFormat?: StringFieldUpdateOperationsInput | string
    leadPrefix?: StringFieldUpdateOperationsInput | string
    startingNumber?: IntFieldUpdateOperationsInput | number
    numberType?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    defaultAuctionDays?: IntFieldUpdateOperationsInput | number
    defaultMinIncrement?: IntFieldUpdateOperationsInput | number
    homepageHeroEyebrow?: StringFieldUpdateOperationsInput | string
    homepageHeroTitle?: StringFieldUpdateOperationsInput | string
    homepageHeroHighlight?: StringFieldUpdateOperationsInput | string
    homepageHeroTitleSuffix?: StringFieldUpdateOperationsInput | string
    homepageHeroSubtitle?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroPrimaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaText?: StringFieldUpdateOperationsInput | string
    homepageHeroSecondaryCtaLink?: StringFieldUpdateOperationsInput | string
    homepageFeatureHeading?: StringFieldUpdateOperationsInput | string
    homepageFeatures?: JsonNullValueInput | InputJsonValue
    homepageShowcaseEyebrow?: StringFieldUpdateOperationsInput | string
    homepageShowcaseTitle?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaText?: StringFieldUpdateOperationsInput | string
    homepageShowcaseCtaLink?: StringFieldUpdateOperationsInput | string
    homepageStatsEyebrow?: StringFieldUpdateOperationsInput | string
    homepageStatsTitle?: StringFieldUpdateOperationsInput | string
    homepageStats?: JsonNullValueInput | InputJsonValue
    homepageCtaTitle?: StringFieldUpdateOperationsInput | string
    homepageCtaSubtitle?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaPrimaryLink?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryText?: StringFieldUpdateOperationsInput | string
    homepageCtaSecondaryLink?: StringFieldUpdateOperationsInput | string
    maintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: StringFieldUpdateOperationsInput | string
    smtpHost?: StringFieldUpdateOperationsInput | string
    smtpPort?: IntFieldUpdateOperationsInput | number
    smtpUser?: StringFieldUpdateOperationsInput | string
    smtpPass?: StringFieldUpdateOperationsInput | string
    smtpFromName?: StringFieldUpdateOperationsInput | string
    smtpUseTLS?: BoolFieldUpdateOperationsInput | boolean
    smtpUseSSL?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyLogoUrl?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    faviconUrl?: StringFieldUpdateOperationsInput | string
    footerDescription?: StringFieldUpdateOperationsInput | string
    footerEmail?: StringFieldUpdateOperationsInput | string
    footerNote?: StringFieldUpdateOperationsInput | string
    footerPhone?: StringFieldUpdateOperationsInput | string
    insuranceTypes?: JsonNullValueInput | InputJsonValue
    legalLinks?: NullableJsonNullValueInput | InputJsonValue
    servicesLinks?: NullableJsonNullValueInput | InputJsonValue
    socialMedia?: NullableJsonNullValueInput | InputJsonValue
    supportLinks?: NullableJsonNullValueInput | InputJsonValue
    tradeRegisterNumber?: StringFieldUpdateOperationsInput | string
  }

  export type UserTypeCreateInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionCreateNestedManyWithoutUserTypeInput
    users?: UserCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedCreateInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    users?: UserUncheckedCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUpdateManyWithoutUserTypeNestedInput
    users?: UserUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    users?: UserUncheckedUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeCreateManyInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageCreateInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserTypePermissionCreateNestedManyWithoutPageInput
  }

  export type PageUncheckedCreateInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserTypePermissionUncheckedCreateNestedManyWithoutPageInput
  }

  export type PageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserTypePermissionUpdateManyWithoutPageNestedInput
  }

  export type PageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserTypePermissionUncheckedUpdateManyWithoutPageNestedInput
  }

  export type PageCreateManyInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypePermissionCreateInput = {
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    page: PageCreateNestedOneWithoutPermissionsInput
    userType: UserTypeCreateNestedOneWithoutPermissionsInput
  }

  export type UserTypePermissionUncheckedCreateInput = {
    id?: number
    userTypeId: string
    pageId: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTypePermissionUpdateInput = {
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    page?: PageUpdateOneRequiredWithoutPermissionsNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserTypePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypePermissionCreateManyInput = {
    id?: number
    userTypeId: string
    pageId: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTypePermissionUpdateManyMutationInput = {
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadTypePermissionCreateInput = {
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userType: UserTypeCreateNestedOneWithoutLeadTypePermissionsInput
  }

  export type LeadTypePermissionUncheckedCreateInput = {
    id?: number
    userTypeId: string
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadTypePermissionUpdateInput = {
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneRequiredWithoutLeadTypePermissionsNestedInput
  }

  export type LeadTypePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadTypePermissionCreateManyInput = {
    id?: number
    userTypeId: string
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadTypePermissionUpdateManyMutationInput = {
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadTypePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeadTypePermissionCreateInput = {
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLeadTypePermissionsInput
  }

  export type UserLeadTypePermissionUncheckedCreateInput = {
    id?: number
    userId: string
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLeadTypePermissionUpdateInput = {
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLeadTypePermissionsNestedInput
  }

  export type UserLeadTypePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeadTypePermissionCreateManyInput = {
    id?: number
    userId: string
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLeadTypePermissionUpdateManyMutationInput = {
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeadTypePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQCreateInput = {
    id?: string
    question: string
    answer: string
    category: string
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUncheckedCreateInput = {
    id?: string
    question: string
    answer: string
    category: string
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQCreateManyInput = {
    id?: string
    question: string
    answer: string
    category: string
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FAQUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutCreateInput = {
    id?: string
    section: string
    title?: string | null
    subtitle?: string | null
    content?: string | null
    imageUrl?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AboutUncheckedCreateInput = {
    id?: string
    section: string
    title?: string | null
    subtitle?: string | null
    content?: string | null
    imageUrl?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AboutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutCreateManyInput = {
    id?: string
    section: string
    title?: string | null
    subtitle?: string | null
    content?: string | null
    imageUrl?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AboutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignSettingsCreateInput = {
    id?: string
    colors: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignSettingsUncheckedCreateInput = {
    id?: string
    colors: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignSettingsCreateManyInput = {
    id?: string
    colors: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DesignSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DesignSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    isActive?: boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUncheckedCreateInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    isActive?: boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateManyInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    isActive?: boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SMSTemplateCreateInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    content: string
    isActive?: boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SMSTemplateUncheckedCreateInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    content: string
    isActive?: boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SMSTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SMSTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SMSTemplateCreateManyInput = {
    id?: string
    type: string
    name: string
    description?: string | null
    content: string
    isActive?: boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SMSTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SMSTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    variables?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogCreateInput = {
    id?: string
    action: string
    details?: string | null
    entityType?: string | null
    entityId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    details?: string | null
    entityType?: string | null
    entityId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ActivityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    details?: string | null
    entityType?: string | null
    entityId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ActivityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPasswordResetTokensInput
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPasswordResetTokensNestedInput
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceTransactionCreateInput = {
    id?: string
    amount: number
    type: string
    description?: string | null
    relatedId?: string | null
    adminId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBalanceTransactionsInput
  }

  export type BalanceTransactionUncheckedCreateInput = {
    id?: string
    userId: string
    amount: number
    type: string
    description?: string | null
    relatedId?: string | null
    adminId?: string | null
    createdAt?: Date | string
  }

  export type BalanceTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBalanceTransactionsNestedInput
  }

  export type BalanceTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceTransactionCreateManyInput = {
    id?: string
    userId: string
    amount: number
    type: string
    description?: string | null
    relatedId?: string | null
    adminId?: string | null
    createdAt?: Date | string
  }

  export type BalanceTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTypeCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutNotificationTypeInput
    userPreferences?: NotificationPreferenceCreateNestedManyWithoutNotificationTypeInput
    roleTypePermissions?: NotificationRolePermissionCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutNotificationTypeInput
    userPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutNotificationTypeInput
    roleTypePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutNotificationTypeNestedInput
    userPreferences?: NotificationPreferenceUpdateManyWithoutNotificationTypeNestedInput
    roleTypePermissions?: NotificationRolePermissionUpdateManyWithoutNotificationTypeNestedInput
  }

  export type NotificationTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutNotificationTypeNestedInput
    userPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutNotificationTypeNestedInput
    roleTypePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutNotificationTypeNestedInput
  }

  export type NotificationTypeCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceCreateInput = {
    id?: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationPreferencesInput
    notificationType: NotificationTypeCreateNestedOneWithoutUserPreferencesInput
  }

  export type NotificationPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    notificationTypeId: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput
    notificationType?: NotificationTypeUpdateOneRequiredWithoutUserPreferencesNestedInput
  }

  export type NotificationPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceCreateManyInput = {
    id?: string
    userId: string
    notificationTypeId: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationType: NotificationTypeCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    notificationTypeId: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationType?: NotificationTypeUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    notificationTypeId: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionCreateInput = {
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userType: UserTypeCreateNestedOneWithoutNotificationRolePermissionsInput
    notificationType: NotificationTypeCreateNestedOneWithoutRoleTypePermissionsInput
  }

  export type NotificationRolePermissionUncheckedCreateInput = {
    id?: number
    userTypeId: string
    notificationTypeId: string
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationRolePermissionUpdateInput = {
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneRequiredWithoutNotificationRolePermissionsNestedInput
    notificationType?: NotificationTypeUpdateOneRequiredWithoutRoleTypePermissionsNestedInput
  }

  export type NotificationRolePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionCreateManyInput = {
    id?: number
    userTypeId: string
    notificationTypeId: string
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationRolePermissionUpdateManyMutationInput = {
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BidListRelationFilter = {
    every?: BidWhereInput
    some?: BidWhereInput
    none?: BidWhereInput
  }

  export type LeadListRelationFilter = {
    every?: LeadWhereInput
    some?: LeadWhereInput
    none?: LeadWhereInput
  }

  export type LeadSaleListRelationFilter = {
    every?: LeadSaleWhereInput
    some?: LeadSaleWhereInput
    none?: LeadSaleWhereInput
  }

  export type LeadWatchListRelationFilter = {
    every?: LeadWatchWhereInput
    some?: LeadWatchWhereInput
    none?: LeadWatchWhereInput
  }

  export type UserTypeScalarRelationFilter = {
    is?: UserTypeWhereInput
    isNot?: UserTypeWhereInput
  }

  export type UserLeadTypePermissionListRelationFilter = {
    every?: UserLeadTypePermissionWhereInput
    some?: UserLeadTypePermissionWhereInput
    none?: UserLeadTypePermissionWhereInput
  }

  export type ActivityLogListRelationFilter = {
    every?: ActivityLogWhereInput
    some?: ActivityLogWhereInput
    none?: ActivityLogWhereInput
  }

  export type PasswordResetTokenListRelationFilter = {
    every?: PasswordResetTokenWhereInput
    some?: PasswordResetTokenWhereInput
    none?: PasswordResetTokenWhereInput
  }

  export type BalanceTransactionListRelationFilter = {
    every?: BalanceTransactionWhereInput
    some?: BalanceTransactionWhereInput
    none?: BalanceTransactionWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type NotificationPreferenceListRelationFilter = {
    every?: NotificationPreferenceWhereInput
    some?: NotificationPreferenceWhereInput
    none?: NotificationPreferenceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BidOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadSaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadWatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLeadTypePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordResetTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BalanceTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    userTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    profileImage?: SortOrder
    lastActivity?: SortOrder
    lastIP?: SortOrder
    lastUserAgent?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrder
    isActive?: SortOrder
    balance?: SortOrder
    balanceEnabled?: SortOrder
    paymentMethod?: SortOrder
    ibanAccountHolder?: SortOrder
    ibanNumber?: SortOrder
    ibanBic?: SortOrder
    ibanAddress?: SortOrder
    ibanPostalCode?: SortOrder
    ibanCity?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    userTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    profileImage?: SortOrder
    lastActivity?: SortOrder
    lastIP?: SortOrder
    lastUserAgent?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrder
    isActive?: SortOrder
    balance?: SortOrder
    balanceEnabled?: SortOrder
    paymentMethod?: SortOrder
    ibanAccountHolder?: SortOrder
    ibanNumber?: SortOrder
    ibanBic?: SortOrder
    ibanAddress?: SortOrder
    ibanPostalCode?: SortOrder
    ibanCity?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    userTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    profileImage?: SortOrder
    lastActivity?: SortOrder
    lastIP?: SortOrder
    lastUserAgent?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorSecret?: SortOrder
    isActive?: SortOrder
    balance?: SortOrder
    balanceEnabled?: SortOrder
    paymentMethod?: SortOrder
    ibanAccountHolder?: SortOrder
    ibanNumber?: SortOrder
    ibanBic?: SortOrder
    ibanAddress?: SortOrder
    ibanPostalCode?: SortOrder
    ibanCity?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LeadSaleNullableScalarRelationFilter = {
    is?: LeadSaleWhereInput | null
    isNot?: LeadSaleWhereInput | null
  }

  export type LeadCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    privateDetails?: SortOrder
    postalCode?: SortOrder
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrder
    reservePrice?: SortOrder
    antiSnipeSeconds?: SortOrder
    insuranceType?: SortOrder
    isActive?: SortOrder
    isShowcase?: SortOrder
    isSold?: SortOrder
    featured?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type LeadAvgOrderByAggregateInput = {
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrder
    reservePrice?: SortOrder
    antiSnipeSeconds?: SortOrder
  }

  export type LeadMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    privateDetails?: SortOrder
    postalCode?: SortOrder
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrder
    reservePrice?: SortOrder
    antiSnipeSeconds?: SortOrder
    insuranceType?: SortOrder
    isActive?: SortOrder
    isShowcase?: SortOrder
    isSold?: SortOrder
    featured?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type LeadMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    privateDetails?: SortOrder
    postalCode?: SortOrder
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrder
    reservePrice?: SortOrder
    antiSnipeSeconds?: SortOrder
    insuranceType?: SortOrder
    isActive?: SortOrder
    isShowcase?: SortOrder
    isSold?: SortOrder
    featured?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type LeadSumOrderByAggregateInput = {
    startPrice?: SortOrder
    minIncrement?: SortOrder
    instantBuyPrice?: SortOrder
    reservePrice?: SortOrder
    antiSnipeSeconds?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LeadScalarRelationFilter = {
    is?: LeadWhereInput
    isNot?: LeadWhereInput
  }

  export type BidCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    maxBid?: SortOrder
    isAutoBid?: SortOrder
    createdAt?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
  }

  export type BidAvgOrderByAggregateInput = {
    amount?: SortOrder
    maxBid?: SortOrder
  }

  export type BidMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    maxBid?: SortOrder
    isAutoBid?: SortOrder
    createdAt?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
  }

  export type BidMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    maxBid?: SortOrder
    isAutoBid?: SortOrder
    createdAt?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
  }

  export type BidSumOrderByAggregateInput = {
    amount?: SortOrder
    maxBid?: SortOrder
  }

  export type LeadWatchLeadIdUserIdCompoundUniqueInput = {
    leadId: string
    userId: string
  }

  export type LeadWatchCountOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LeadWatchMaxOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LeadWatchMinOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type LeadSaleCountOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    buyerId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    soldAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeadSaleAvgOrderByAggregateInput = {
    amount?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
  }

  export type LeadSaleMaxOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    buyerId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    soldAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeadSaleMinOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    buyerId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
    soldAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeadSaleSumOrderByAggregateInput = {
    amount?: SortOrder
    balanceBefore?: SortOrder
    balanceAfter?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SettingsCountOrderByAggregateInput = {
    id?: SortOrder
    leadIdFormat?: SortOrder
    customFormat?: SortOrder
    leadPrefix?: SortOrder
    startingNumber?: SortOrder
    numberType?: SortOrder
    defaultCurrency?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    homepageHeroEyebrow?: SortOrder
    homepageHeroTitle?: SortOrder
    homepageHeroHighlight?: SortOrder
    homepageHeroTitleSuffix?: SortOrder
    homepageHeroSubtitle?: SortOrder
    homepageHeroPrimaryCtaText?: SortOrder
    homepageHeroPrimaryCtaLink?: SortOrder
    homepageHeroSecondaryCtaText?: SortOrder
    homepageHeroSecondaryCtaLink?: SortOrder
    homepageFeatureHeading?: SortOrder
    homepageFeatures?: SortOrder
    homepageShowcaseEyebrow?: SortOrder
    homepageShowcaseTitle?: SortOrder
    homepageShowcaseCtaText?: SortOrder
    homepageShowcaseCtaLink?: SortOrder
    homepageStatsEyebrow?: SortOrder
    homepageStatsTitle?: SortOrder
    homepageStats?: SortOrder
    homepageCtaTitle?: SortOrder
    homepageCtaSubtitle?: SortOrder
    homepageCtaPrimaryText?: SortOrder
    homepageCtaPrimaryLink?: SortOrder
    homepageCtaSecondaryText?: SortOrder
    homepageCtaSecondaryLink?: SortOrder
    maintenanceMode?: SortOrder
    maintenanceMessage?: SortOrder
    smtpHost?: SortOrder
    smtpPort?: SortOrder
    smtpUser?: SortOrder
    smtpPass?: SortOrder
    smtpFromName?: SortOrder
    smtpUseTLS?: SortOrder
    smtpUseSSL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyLogoUrl?: SortOrder
    companyName?: SortOrder
    faviconUrl?: SortOrder
    footerDescription?: SortOrder
    footerEmail?: SortOrder
    footerNote?: SortOrder
    footerPhone?: SortOrder
    insuranceTypes?: SortOrder
    legalLinks?: SortOrder
    servicesLinks?: SortOrder
    socialMedia?: SortOrder
    supportLinks?: SortOrder
    tradeRegisterNumber?: SortOrder
  }

  export type SettingsAvgOrderByAggregateInput = {
    startingNumber?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    smtpPort?: SortOrder
  }

  export type SettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    leadIdFormat?: SortOrder
    customFormat?: SortOrder
    leadPrefix?: SortOrder
    startingNumber?: SortOrder
    numberType?: SortOrder
    defaultCurrency?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    homepageHeroEyebrow?: SortOrder
    homepageHeroTitle?: SortOrder
    homepageHeroHighlight?: SortOrder
    homepageHeroTitleSuffix?: SortOrder
    homepageHeroSubtitle?: SortOrder
    homepageHeroPrimaryCtaText?: SortOrder
    homepageHeroPrimaryCtaLink?: SortOrder
    homepageHeroSecondaryCtaText?: SortOrder
    homepageHeroSecondaryCtaLink?: SortOrder
    homepageFeatureHeading?: SortOrder
    homepageShowcaseEyebrow?: SortOrder
    homepageShowcaseTitle?: SortOrder
    homepageShowcaseCtaText?: SortOrder
    homepageShowcaseCtaLink?: SortOrder
    homepageStatsEyebrow?: SortOrder
    homepageStatsTitle?: SortOrder
    homepageCtaTitle?: SortOrder
    homepageCtaSubtitle?: SortOrder
    homepageCtaPrimaryText?: SortOrder
    homepageCtaPrimaryLink?: SortOrder
    homepageCtaSecondaryText?: SortOrder
    homepageCtaSecondaryLink?: SortOrder
    maintenanceMode?: SortOrder
    maintenanceMessage?: SortOrder
    smtpHost?: SortOrder
    smtpPort?: SortOrder
    smtpUser?: SortOrder
    smtpPass?: SortOrder
    smtpFromName?: SortOrder
    smtpUseTLS?: SortOrder
    smtpUseSSL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyLogoUrl?: SortOrder
    companyName?: SortOrder
    faviconUrl?: SortOrder
    footerDescription?: SortOrder
    footerEmail?: SortOrder
    footerNote?: SortOrder
    footerPhone?: SortOrder
    tradeRegisterNumber?: SortOrder
  }

  export type SettingsMinOrderByAggregateInput = {
    id?: SortOrder
    leadIdFormat?: SortOrder
    customFormat?: SortOrder
    leadPrefix?: SortOrder
    startingNumber?: SortOrder
    numberType?: SortOrder
    defaultCurrency?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    homepageHeroEyebrow?: SortOrder
    homepageHeroTitle?: SortOrder
    homepageHeroHighlight?: SortOrder
    homepageHeroTitleSuffix?: SortOrder
    homepageHeroSubtitle?: SortOrder
    homepageHeroPrimaryCtaText?: SortOrder
    homepageHeroPrimaryCtaLink?: SortOrder
    homepageHeroSecondaryCtaText?: SortOrder
    homepageHeroSecondaryCtaLink?: SortOrder
    homepageFeatureHeading?: SortOrder
    homepageShowcaseEyebrow?: SortOrder
    homepageShowcaseTitle?: SortOrder
    homepageShowcaseCtaText?: SortOrder
    homepageShowcaseCtaLink?: SortOrder
    homepageStatsEyebrow?: SortOrder
    homepageStatsTitle?: SortOrder
    homepageCtaTitle?: SortOrder
    homepageCtaSubtitle?: SortOrder
    homepageCtaPrimaryText?: SortOrder
    homepageCtaPrimaryLink?: SortOrder
    homepageCtaSecondaryText?: SortOrder
    homepageCtaSecondaryLink?: SortOrder
    maintenanceMode?: SortOrder
    maintenanceMessage?: SortOrder
    smtpHost?: SortOrder
    smtpPort?: SortOrder
    smtpUser?: SortOrder
    smtpPass?: SortOrder
    smtpFromName?: SortOrder
    smtpUseTLS?: SortOrder
    smtpUseSSL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyLogoUrl?: SortOrder
    companyName?: SortOrder
    faviconUrl?: SortOrder
    footerDescription?: SortOrder
    footerEmail?: SortOrder
    footerNote?: SortOrder
    footerPhone?: SortOrder
    tradeRegisterNumber?: SortOrder
  }

  export type SettingsSumOrderByAggregateInput = {
    startingNumber?: SortOrder
    defaultAuctionDays?: SortOrder
    defaultMinIncrement?: SortOrder
    smtpPort?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type LeadTypePermissionListRelationFilter = {
    every?: LeadTypePermissionWhereInput
    some?: LeadTypePermissionWhereInput
    none?: LeadTypePermissionWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserTypePermissionListRelationFilter = {
    every?: UserTypePermissionWhereInput
    some?: UserTypePermissionWhereInput
    none?: UserTypePermissionWhereInput
  }

  export type NotificationRolePermissionListRelationFilter = {
    every?: NotificationRolePermissionWhereInput
    some?: NotificationRolePermissionWhereInput
    none?: NotificationRolePermissionWhereInput
  }

  export type LeadTypePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTypePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationRolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageScalarRelationFilter = {
    is?: PageWhereInput
    isNot?: PageWhereInput
  }

  export type UserTypePermissionUserTypeIdPageIdCompoundUniqueInput = {
    userTypeId: string
    pageId: string
  }

  export type UserTypePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    pageId?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTypePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserTypePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    pageId?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTypePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    pageId?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTypePermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LeadTypePermissionUserTypeIdLeadTypeCompoundUniqueInput = {
    userTypeId: string
    leadType: string
  }

  export type LeadTypePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeadTypePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LeadTypePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeadTypePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeadTypePermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserLeadTypePermissionUserIdLeadTypeCompoundUniqueInput = {
    userId: string
    leadType: string
  }

  export type UserLeadTypePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLeadTypePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserLeadTypePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLeadTypePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leadType?: SortOrder
    hasAccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserLeadTypePermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FAQSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type AboutCountOrderByAggregateInput = {
    id?: SortOrder
    section?: SortOrder
    title?: SortOrder
    subtitle?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type AboutMaxOrderByAggregateInput = {
    id?: SortOrder
    section?: SortOrder
    title?: SortOrder
    subtitle?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutMinOrderByAggregateInput = {
    id?: SortOrder
    section?: SortOrder
    title?: SortOrder
    subtitle?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type DesignSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    colors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DesignSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DesignSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    isActive?: SortOrder
    variables?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SMSTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    content?: SortOrder
    isActive?: SortOrder
    variables?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SMSTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    content?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SMSTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    content?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    used?: SortOrder
    createdAt?: SortOrder
  }

  export type BalanceTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    relatedId?: SortOrder
    adminId?: SortOrder
    createdAt?: SortOrder
  }

  export type BalanceTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BalanceTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    relatedId?: SortOrder
    adminId?: SortOrder
    createdAt?: SortOrder
  }

  export type BalanceTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    relatedId?: SortOrder
    adminId?: SortOrder
    createdAt?: SortOrder
  }

  export type BalanceTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type NotificationTypeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    defaultEnabled?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    defaultEnabled?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTypeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    defaultEnabled?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    icon?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationTypeScalarRelationFilter = {
    is?: NotificationTypeWhereInput
    isNot?: NotificationTypeWhereInput
  }

  export type NotificationPreferenceUserIdNotificationTypeIdCompoundUniqueInput = {
    userId: string
    notificationTypeId: string
  }

  export type NotificationPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    emailEnabled?: SortOrder
    inAppEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    emailSent?: SortOrder
    emailSentAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    emailSent?: SortOrder
    emailSentAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationTypeId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    emailSent?: SortOrder
    emailSentAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationRolePermissionUserTypeIdNotificationTypeIdCompoundUniqueInput = {
    userTypeId: string
    notificationTypeId: string
  }

  export type NotificationRolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    notificationTypeId?: SortOrder
    canReceive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationRolePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationRolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    notificationTypeId?: SortOrder
    canReceive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationRolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userTypeId?: SortOrder
    notificationTypeId?: SortOrder
    canReceive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationRolePermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BidCreateNestedManyWithoutUserInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type LeadCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LeadCreateWithoutOwnerInput, LeadUncheckedCreateWithoutOwnerInput> | LeadCreateWithoutOwnerInput[] | LeadUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOwnerInput | LeadCreateOrConnectWithoutOwnerInput[]
    createMany?: LeadCreateManyOwnerInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type LeadSaleCreateNestedManyWithoutBuyerInput = {
    create?: XOR<LeadSaleCreateWithoutBuyerInput, LeadSaleUncheckedCreateWithoutBuyerInput> | LeadSaleCreateWithoutBuyerInput[] | LeadSaleUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: LeadSaleCreateOrConnectWithoutBuyerInput | LeadSaleCreateOrConnectWithoutBuyerInput[]
    createMany?: LeadSaleCreateManyBuyerInputEnvelope
    connect?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
  }

  export type LeadWatchCreateNestedManyWithoutUserInput = {
    create?: XOR<LeadWatchCreateWithoutUserInput, LeadWatchUncheckedCreateWithoutUserInput> | LeadWatchCreateWithoutUserInput[] | LeadWatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutUserInput | LeadWatchCreateOrConnectWithoutUserInput[]
    createMany?: LeadWatchCreateManyUserInputEnvelope
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
  }

  export type UserTypeCreateNestedOneWithoutUsersInput = {
    create?: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutUsersInput
    connect?: UserTypeWhereUniqueInput
  }

  export type UserLeadTypePermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLeadTypePermissionCreateWithoutUserInput, UserLeadTypePermissionUncheckedCreateWithoutUserInput> | UserLeadTypePermissionCreateWithoutUserInput[] | UserLeadTypePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeadTypePermissionCreateOrConnectWithoutUserInput | UserLeadTypePermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserLeadTypePermissionCreateManyUserInputEnvelope
    connect?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
  }

  export type ActivityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type PasswordResetTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type BalanceTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<BalanceTransactionCreateWithoutUserInput, BalanceTransactionUncheckedCreateWithoutUserInput> | BalanceTransactionCreateWithoutUserInput[] | BalanceTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BalanceTransactionCreateOrConnectWithoutUserInput | BalanceTransactionCreateOrConnectWithoutUserInput[]
    createMany?: BalanceTransactionCreateManyUserInputEnvelope
    connect?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput> | NotificationPreferenceCreateWithoutUserInput[] | NotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput | NotificationPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: NotificationPreferenceCreateManyUserInputEnvelope
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
  }

  export type BidUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type LeadUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LeadCreateWithoutOwnerInput, LeadUncheckedCreateWithoutOwnerInput> | LeadCreateWithoutOwnerInput[] | LeadUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOwnerInput | LeadCreateOrConnectWithoutOwnerInput[]
    createMany?: LeadCreateManyOwnerInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type LeadSaleUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<LeadSaleCreateWithoutBuyerInput, LeadSaleUncheckedCreateWithoutBuyerInput> | LeadSaleCreateWithoutBuyerInput[] | LeadSaleUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: LeadSaleCreateOrConnectWithoutBuyerInput | LeadSaleCreateOrConnectWithoutBuyerInput[]
    createMany?: LeadSaleCreateManyBuyerInputEnvelope
    connect?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
  }

  export type LeadWatchUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LeadWatchCreateWithoutUserInput, LeadWatchUncheckedCreateWithoutUserInput> | LeadWatchCreateWithoutUserInput[] | LeadWatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutUserInput | LeadWatchCreateOrConnectWithoutUserInput[]
    createMany?: LeadWatchCreateManyUserInputEnvelope
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
  }

  export type UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLeadTypePermissionCreateWithoutUserInput, UserLeadTypePermissionUncheckedCreateWithoutUserInput> | UserLeadTypePermissionCreateWithoutUserInput[] | UserLeadTypePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeadTypePermissionCreateOrConnectWithoutUserInput | UserLeadTypePermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserLeadTypePermissionCreateManyUserInputEnvelope
    connect?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type BalanceTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BalanceTransactionCreateWithoutUserInput, BalanceTransactionUncheckedCreateWithoutUserInput> | BalanceTransactionCreateWithoutUserInput[] | BalanceTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BalanceTransactionCreateOrConnectWithoutUserInput | BalanceTransactionCreateOrConnectWithoutUserInput[]
    createMany?: BalanceTransactionCreateManyUserInputEnvelope
    connect?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput> | NotificationPreferenceCreateWithoutUserInput[] | NotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput | NotificationPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: NotificationPreferenceCreateManyUserInputEnvelope
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BidUpdateManyWithoutUserNestedInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutUserInput | BidUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutUserInput | BidUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BidUpdateManyWithWhereWithoutUserInput | BidUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type LeadUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LeadCreateWithoutOwnerInput, LeadUncheckedCreateWithoutOwnerInput> | LeadCreateWithoutOwnerInput[] | LeadUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOwnerInput | LeadCreateOrConnectWithoutOwnerInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutOwnerInput | LeadUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LeadCreateManyOwnerInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutOwnerInput | LeadUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutOwnerInput | LeadUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type LeadSaleUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<LeadSaleCreateWithoutBuyerInput, LeadSaleUncheckedCreateWithoutBuyerInput> | LeadSaleCreateWithoutBuyerInput[] | LeadSaleUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: LeadSaleCreateOrConnectWithoutBuyerInput | LeadSaleCreateOrConnectWithoutBuyerInput[]
    upsert?: LeadSaleUpsertWithWhereUniqueWithoutBuyerInput | LeadSaleUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: LeadSaleCreateManyBuyerInputEnvelope
    set?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    disconnect?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    delete?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    connect?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    update?: LeadSaleUpdateWithWhereUniqueWithoutBuyerInput | LeadSaleUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: LeadSaleUpdateManyWithWhereWithoutBuyerInput | LeadSaleUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: LeadSaleScalarWhereInput | LeadSaleScalarWhereInput[]
  }

  export type LeadWatchUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeadWatchCreateWithoutUserInput, LeadWatchUncheckedCreateWithoutUserInput> | LeadWatchCreateWithoutUserInput[] | LeadWatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutUserInput | LeadWatchCreateOrConnectWithoutUserInput[]
    upsert?: LeadWatchUpsertWithWhereUniqueWithoutUserInput | LeadWatchUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeadWatchCreateManyUserInputEnvelope
    set?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    disconnect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    delete?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    update?: LeadWatchUpdateWithWhereUniqueWithoutUserInput | LeadWatchUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeadWatchUpdateManyWithWhereWithoutUserInput | LeadWatchUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeadWatchScalarWhereInput | LeadWatchScalarWhereInput[]
  }

  export type UserTypeUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutUsersInput
    upsert?: UserTypeUpsertWithoutUsersInput
    connect?: UserTypeWhereUniqueInput
    update?: XOR<XOR<UserTypeUpdateToOneWithWhereWithoutUsersInput, UserTypeUpdateWithoutUsersInput>, UserTypeUncheckedUpdateWithoutUsersInput>
  }

  export type UserLeadTypePermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLeadTypePermissionCreateWithoutUserInput, UserLeadTypePermissionUncheckedCreateWithoutUserInput> | UserLeadTypePermissionCreateWithoutUserInput[] | UserLeadTypePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeadTypePermissionCreateOrConnectWithoutUserInput | UserLeadTypePermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserLeadTypePermissionUpsertWithWhereUniqueWithoutUserInput | UserLeadTypePermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLeadTypePermissionCreateManyUserInputEnvelope
    set?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    disconnect?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    delete?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    connect?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    update?: UserLeadTypePermissionUpdateWithWhereUniqueWithoutUserInput | UserLeadTypePermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLeadTypePermissionUpdateManyWithWhereWithoutUserInput | UserLeadTypePermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLeadTypePermissionScalarWhereInput | UserLeadTypePermissionScalarWhereInput[]
  }

  export type ActivityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type PasswordResetTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput | PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput | PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutUserInput | PasswordResetTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type BalanceTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<BalanceTransactionCreateWithoutUserInput, BalanceTransactionUncheckedCreateWithoutUserInput> | BalanceTransactionCreateWithoutUserInput[] | BalanceTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BalanceTransactionCreateOrConnectWithoutUserInput | BalanceTransactionCreateOrConnectWithoutUserInput[]
    upsert?: BalanceTransactionUpsertWithWhereUniqueWithoutUserInput | BalanceTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BalanceTransactionCreateManyUserInputEnvelope
    set?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    disconnect?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    delete?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    connect?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    update?: BalanceTransactionUpdateWithWhereUniqueWithoutUserInput | BalanceTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BalanceTransactionUpdateManyWithWhereWithoutUserInput | BalanceTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BalanceTransactionScalarWhereInput | BalanceTransactionScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput> | NotificationPreferenceCreateWithoutUserInput[] | NotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput | NotificationPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput | NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationPreferenceCreateManyUserInputEnvelope
    set?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    disconnect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    delete?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    update?: NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput | NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationPreferenceUpdateManyWithWhereWithoutUserInput | NotificationPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationPreferenceScalarWhereInput | NotificationPreferenceScalarWhereInput[]
  }

  export type BidUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutUserInput | BidUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutUserInput | BidUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BidUpdateManyWithWhereWithoutUserInput | BidUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type LeadUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LeadCreateWithoutOwnerInput, LeadUncheckedCreateWithoutOwnerInput> | LeadCreateWithoutOwnerInput[] | LeadUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOwnerInput | LeadCreateOrConnectWithoutOwnerInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutOwnerInput | LeadUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LeadCreateManyOwnerInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutOwnerInput | LeadUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutOwnerInput | LeadUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<LeadSaleCreateWithoutBuyerInput, LeadSaleUncheckedCreateWithoutBuyerInput> | LeadSaleCreateWithoutBuyerInput[] | LeadSaleUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: LeadSaleCreateOrConnectWithoutBuyerInput | LeadSaleCreateOrConnectWithoutBuyerInput[]
    upsert?: LeadSaleUpsertWithWhereUniqueWithoutBuyerInput | LeadSaleUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: LeadSaleCreateManyBuyerInputEnvelope
    set?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    disconnect?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    delete?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    connect?: LeadSaleWhereUniqueInput | LeadSaleWhereUniqueInput[]
    update?: LeadSaleUpdateWithWhereUniqueWithoutBuyerInput | LeadSaleUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: LeadSaleUpdateManyWithWhereWithoutBuyerInput | LeadSaleUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: LeadSaleScalarWhereInput | LeadSaleScalarWhereInput[]
  }

  export type LeadWatchUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeadWatchCreateWithoutUserInput, LeadWatchUncheckedCreateWithoutUserInput> | LeadWatchCreateWithoutUserInput[] | LeadWatchUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutUserInput | LeadWatchCreateOrConnectWithoutUserInput[]
    upsert?: LeadWatchUpsertWithWhereUniqueWithoutUserInput | LeadWatchUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeadWatchCreateManyUserInputEnvelope
    set?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    disconnect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    delete?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    update?: LeadWatchUpdateWithWhereUniqueWithoutUserInput | LeadWatchUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeadWatchUpdateManyWithWhereWithoutUserInput | LeadWatchUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeadWatchScalarWhereInput | LeadWatchScalarWhereInput[]
  }

  export type UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLeadTypePermissionCreateWithoutUserInput, UserLeadTypePermissionUncheckedCreateWithoutUserInput> | UserLeadTypePermissionCreateWithoutUserInput[] | UserLeadTypePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLeadTypePermissionCreateOrConnectWithoutUserInput | UserLeadTypePermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserLeadTypePermissionUpsertWithWhereUniqueWithoutUserInput | UserLeadTypePermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLeadTypePermissionCreateManyUserInputEnvelope
    set?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    disconnect?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    delete?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    connect?: UserLeadTypePermissionWhereUniqueInput | UserLeadTypePermissionWhereUniqueInput[]
    update?: UserLeadTypePermissionUpdateWithWhereUniqueWithoutUserInput | UserLeadTypePermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLeadTypePermissionUpdateManyWithWhereWithoutUserInput | UserLeadTypePermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLeadTypePermissionScalarWhereInput | UserLeadTypePermissionScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput | PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput | PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutUserInput | PasswordResetTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BalanceTransactionCreateWithoutUserInput, BalanceTransactionUncheckedCreateWithoutUserInput> | BalanceTransactionCreateWithoutUserInput[] | BalanceTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BalanceTransactionCreateOrConnectWithoutUserInput | BalanceTransactionCreateOrConnectWithoutUserInput[]
    upsert?: BalanceTransactionUpsertWithWhereUniqueWithoutUserInput | BalanceTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BalanceTransactionCreateManyUserInputEnvelope
    set?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    disconnect?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    delete?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    connect?: BalanceTransactionWhereUniqueInput | BalanceTransactionWhereUniqueInput[]
    update?: BalanceTransactionUpdateWithWhereUniqueWithoutUserInput | BalanceTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BalanceTransactionUpdateManyWithWhereWithoutUserInput | BalanceTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BalanceTransactionScalarWhereInput | BalanceTransactionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput> | NotificationPreferenceCreateWithoutUserInput[] | NotificationPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutUserInput | NotificationPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput | NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationPreferenceCreateManyUserInputEnvelope
    set?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    disconnect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    delete?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    update?: NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput | NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationPreferenceUpdateManyWithWhereWithoutUserInput | NotificationPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationPreferenceScalarWhereInput | NotificationPreferenceScalarWhereInput[]
  }

  export type BidCreateNestedManyWithoutLeadInput = {
    create?: XOR<BidCreateWithoutLeadInput, BidUncheckedCreateWithoutLeadInput> | BidCreateWithoutLeadInput[] | BidUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: BidCreateOrConnectWithoutLeadInput | BidCreateOrConnectWithoutLeadInput[]
    createMany?: BidCreateManyLeadInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutLeadsInput = {
    create?: XOR<UserCreateWithoutLeadsInput, UserUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadsInput
    connect?: UserWhereUniqueInput
  }

  export type LeadSaleCreateNestedOneWithoutLeadInput = {
    create?: XOR<LeadSaleCreateWithoutLeadInput, LeadSaleUncheckedCreateWithoutLeadInput>
    connectOrCreate?: LeadSaleCreateOrConnectWithoutLeadInput
    connect?: LeadSaleWhereUniqueInput
  }

  export type LeadWatchCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadWatchCreateWithoutLeadInput, LeadWatchUncheckedCreateWithoutLeadInput> | LeadWatchCreateWithoutLeadInput[] | LeadWatchUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutLeadInput | LeadWatchCreateOrConnectWithoutLeadInput[]
    createMany?: LeadWatchCreateManyLeadInputEnvelope
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
  }

  export type BidUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<BidCreateWithoutLeadInput, BidUncheckedCreateWithoutLeadInput> | BidCreateWithoutLeadInput[] | BidUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: BidCreateOrConnectWithoutLeadInput | BidCreateOrConnectWithoutLeadInput[]
    createMany?: BidCreateManyLeadInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type LeadSaleUncheckedCreateNestedOneWithoutLeadInput = {
    create?: XOR<LeadSaleCreateWithoutLeadInput, LeadSaleUncheckedCreateWithoutLeadInput>
    connectOrCreate?: LeadSaleCreateOrConnectWithoutLeadInput
    connect?: LeadSaleWhereUniqueInput
  }

  export type LeadWatchUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadWatchCreateWithoutLeadInput, LeadWatchUncheckedCreateWithoutLeadInput> | LeadWatchCreateWithoutLeadInput[] | LeadWatchUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutLeadInput | LeadWatchCreateOrConnectWithoutLeadInput[]
    createMany?: LeadWatchCreateManyLeadInputEnvelope
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BidUpdateManyWithoutLeadNestedInput = {
    create?: XOR<BidCreateWithoutLeadInput, BidUncheckedCreateWithoutLeadInput> | BidCreateWithoutLeadInput[] | BidUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: BidCreateOrConnectWithoutLeadInput | BidCreateOrConnectWithoutLeadInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutLeadInput | BidUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: BidCreateManyLeadInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutLeadInput | BidUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: BidUpdateManyWithWhereWithoutLeadInput | BidUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutLeadsNestedInput = {
    create?: XOR<UserCreateWithoutLeadsInput, UserUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadsInput
    upsert?: UserUpsertWithoutLeadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLeadsInput, UserUpdateWithoutLeadsInput>, UserUncheckedUpdateWithoutLeadsInput>
  }

  export type LeadSaleUpdateOneWithoutLeadNestedInput = {
    create?: XOR<LeadSaleCreateWithoutLeadInput, LeadSaleUncheckedCreateWithoutLeadInput>
    connectOrCreate?: LeadSaleCreateOrConnectWithoutLeadInput
    upsert?: LeadSaleUpsertWithoutLeadInput
    disconnect?: LeadSaleWhereInput | boolean
    delete?: LeadSaleWhereInput | boolean
    connect?: LeadSaleWhereUniqueInput
    update?: XOR<XOR<LeadSaleUpdateToOneWithWhereWithoutLeadInput, LeadSaleUpdateWithoutLeadInput>, LeadSaleUncheckedUpdateWithoutLeadInput>
  }

  export type LeadWatchUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadWatchCreateWithoutLeadInput, LeadWatchUncheckedCreateWithoutLeadInput> | LeadWatchCreateWithoutLeadInput[] | LeadWatchUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutLeadInput | LeadWatchCreateOrConnectWithoutLeadInput[]
    upsert?: LeadWatchUpsertWithWhereUniqueWithoutLeadInput | LeadWatchUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadWatchCreateManyLeadInputEnvelope
    set?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    disconnect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    delete?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    update?: LeadWatchUpdateWithWhereUniqueWithoutLeadInput | LeadWatchUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadWatchUpdateManyWithWhereWithoutLeadInput | LeadWatchUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadWatchScalarWhereInput | LeadWatchScalarWhereInput[]
  }

  export type BidUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<BidCreateWithoutLeadInput, BidUncheckedCreateWithoutLeadInput> | BidCreateWithoutLeadInput[] | BidUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: BidCreateOrConnectWithoutLeadInput | BidCreateOrConnectWithoutLeadInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutLeadInput | BidUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: BidCreateManyLeadInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutLeadInput | BidUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: BidUpdateManyWithWhereWithoutLeadInput | BidUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type LeadSaleUncheckedUpdateOneWithoutLeadNestedInput = {
    create?: XOR<LeadSaleCreateWithoutLeadInput, LeadSaleUncheckedCreateWithoutLeadInput>
    connectOrCreate?: LeadSaleCreateOrConnectWithoutLeadInput
    upsert?: LeadSaleUpsertWithoutLeadInput
    disconnect?: LeadSaleWhereInput | boolean
    delete?: LeadSaleWhereInput | boolean
    connect?: LeadSaleWhereUniqueInput
    update?: XOR<XOR<LeadSaleUpdateToOneWithWhereWithoutLeadInput, LeadSaleUpdateWithoutLeadInput>, LeadSaleUncheckedUpdateWithoutLeadInput>
  }

  export type LeadWatchUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadWatchCreateWithoutLeadInput, LeadWatchUncheckedCreateWithoutLeadInput> | LeadWatchCreateWithoutLeadInput[] | LeadWatchUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadWatchCreateOrConnectWithoutLeadInput | LeadWatchCreateOrConnectWithoutLeadInput[]
    upsert?: LeadWatchUpsertWithWhereUniqueWithoutLeadInput | LeadWatchUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadWatchCreateManyLeadInputEnvelope
    set?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    disconnect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    delete?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    connect?: LeadWatchWhereUniqueInput | LeadWatchWhereUniqueInput[]
    update?: LeadWatchUpdateWithWhereUniqueWithoutLeadInput | LeadWatchUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadWatchUpdateManyWithWhereWithoutLeadInput | LeadWatchUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadWatchScalarWhereInput | LeadWatchScalarWhereInput[]
  }

  export type LeadCreateNestedOneWithoutBidsInput = {
    create?: XOR<LeadCreateWithoutBidsInput, LeadUncheckedCreateWithoutBidsInput>
    connectOrCreate?: LeadCreateOrConnectWithoutBidsInput
    connect?: LeadWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBidsInput = {
    create?: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBidsInput
    connect?: UserWhereUniqueInput
  }

  export type LeadUpdateOneRequiredWithoutBidsNestedInput = {
    create?: XOR<LeadCreateWithoutBidsInput, LeadUncheckedCreateWithoutBidsInput>
    connectOrCreate?: LeadCreateOrConnectWithoutBidsInput
    upsert?: LeadUpsertWithoutBidsInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutBidsInput, LeadUpdateWithoutBidsInput>, LeadUncheckedUpdateWithoutBidsInput>
  }

  export type UserUpdateOneRequiredWithoutBidsNestedInput = {
    create?: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBidsInput
    upsert?: UserUpsertWithoutBidsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBidsInput, UserUpdateWithoutBidsInput>, UserUncheckedUpdateWithoutBidsInput>
  }

  export type LeadCreateNestedOneWithoutWatchersInput = {
    create?: XOR<LeadCreateWithoutWatchersInput, LeadUncheckedCreateWithoutWatchersInput>
    connectOrCreate?: LeadCreateOrConnectWithoutWatchersInput
    connect?: LeadWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWatchingInput = {
    create?: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchingInput
    connect?: UserWhereUniqueInput
  }

  export type LeadUpdateOneRequiredWithoutWatchersNestedInput = {
    create?: XOR<LeadCreateWithoutWatchersInput, LeadUncheckedCreateWithoutWatchersInput>
    connectOrCreate?: LeadCreateOrConnectWithoutWatchersInput
    upsert?: LeadUpsertWithoutWatchersInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutWatchersInput, LeadUpdateWithoutWatchersInput>, LeadUncheckedUpdateWithoutWatchersInput>
  }

  export type UserUpdateOneRequiredWithoutWatchingNestedInput = {
    create?: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchingInput
    upsert?: UserUpsertWithoutWatchingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWatchingInput, UserUpdateWithoutWatchingInput>, UserUncheckedUpdateWithoutWatchingInput>
  }

  export type UserCreateNestedOneWithoutPurchasedLeadsInput = {
    create?: XOR<UserCreateWithoutPurchasedLeadsInput, UserUncheckedCreateWithoutPurchasedLeadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchasedLeadsInput
    connect?: UserWhereUniqueInput
  }

  export type LeadCreateNestedOneWithoutSaleInput = {
    create?: XOR<LeadCreateWithoutSaleInput, LeadUncheckedCreateWithoutSaleInput>
    connectOrCreate?: LeadCreateOrConnectWithoutSaleInput
    connect?: LeadWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPurchasedLeadsNestedInput = {
    create?: XOR<UserCreateWithoutPurchasedLeadsInput, UserUncheckedCreateWithoutPurchasedLeadsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchasedLeadsInput
    upsert?: UserUpsertWithoutPurchasedLeadsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPurchasedLeadsInput, UserUpdateWithoutPurchasedLeadsInput>, UserUncheckedUpdateWithoutPurchasedLeadsInput>
  }

  export type LeadUpdateOneRequiredWithoutSaleNestedInput = {
    create?: XOR<LeadCreateWithoutSaleInput, LeadUncheckedCreateWithoutSaleInput>
    connectOrCreate?: LeadCreateOrConnectWithoutSaleInput
    upsert?: LeadUpsertWithoutSaleInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutSaleInput, LeadUpdateWithoutSaleInput>, LeadUncheckedUpdateWithoutSaleInput>
  }

  export type LeadTypePermissionCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<LeadTypePermissionCreateWithoutUserTypeInput, LeadTypePermissionUncheckedCreateWithoutUserTypeInput> | LeadTypePermissionCreateWithoutUserTypeInput[] | LeadTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: LeadTypePermissionCreateOrConnectWithoutUserTypeInput | LeadTypePermissionCreateOrConnectWithoutUserTypeInput[]
    createMany?: LeadTypePermissionCreateManyUserTypeInputEnvelope
    connect?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput> | UserCreateWithoutUserTypeInput[] | UserUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserTypeInput | UserCreateOrConnectWithoutUserTypeInput[]
    createMany?: UserCreateManyUserTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserTypePermissionCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<UserTypePermissionCreateWithoutUserTypeInput, UserTypePermissionUncheckedCreateWithoutUserTypeInput> | UserTypePermissionCreateWithoutUserTypeInput[] | UserTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutUserTypeInput | UserTypePermissionCreateOrConnectWithoutUserTypeInput[]
    createMany?: UserTypePermissionCreateManyUserTypeInputEnvelope
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
  }

  export type NotificationRolePermissionCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutUserTypeInput, NotificationRolePermissionUncheckedCreateWithoutUserTypeInput> | NotificationRolePermissionCreateWithoutUserTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutUserTypeInput | NotificationRolePermissionCreateOrConnectWithoutUserTypeInput[]
    createMany?: NotificationRolePermissionCreateManyUserTypeInputEnvelope
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
  }

  export type LeadTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<LeadTypePermissionCreateWithoutUserTypeInput, LeadTypePermissionUncheckedCreateWithoutUserTypeInput> | LeadTypePermissionCreateWithoutUserTypeInput[] | LeadTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: LeadTypePermissionCreateOrConnectWithoutUserTypeInput | LeadTypePermissionCreateOrConnectWithoutUserTypeInput[]
    createMany?: LeadTypePermissionCreateManyUserTypeInputEnvelope
    connect?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput> | UserCreateWithoutUserTypeInput[] | UserUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserTypeInput | UserCreateOrConnectWithoutUserTypeInput[]
    createMany?: UserCreateManyUserTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<UserTypePermissionCreateWithoutUserTypeInput, UserTypePermissionUncheckedCreateWithoutUserTypeInput> | UserTypePermissionCreateWithoutUserTypeInput[] | UserTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutUserTypeInput | UserTypePermissionCreateOrConnectWithoutUserTypeInput[]
    createMany?: UserTypePermissionCreateManyUserTypeInputEnvelope
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
  }

  export type NotificationRolePermissionUncheckedCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutUserTypeInput, NotificationRolePermissionUncheckedCreateWithoutUserTypeInput> | NotificationRolePermissionCreateWithoutUserTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutUserTypeInput | NotificationRolePermissionCreateOrConnectWithoutUserTypeInput[]
    createMany?: NotificationRolePermissionCreateManyUserTypeInputEnvelope
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
  }

  export type LeadTypePermissionUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<LeadTypePermissionCreateWithoutUserTypeInput, LeadTypePermissionUncheckedCreateWithoutUserTypeInput> | LeadTypePermissionCreateWithoutUserTypeInput[] | LeadTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: LeadTypePermissionCreateOrConnectWithoutUserTypeInput | LeadTypePermissionCreateOrConnectWithoutUserTypeInput[]
    upsert?: LeadTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput | LeadTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: LeadTypePermissionCreateManyUserTypeInputEnvelope
    set?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    disconnect?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    delete?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    connect?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    update?: LeadTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput | LeadTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: LeadTypePermissionUpdateManyWithWhereWithoutUserTypeInput | LeadTypePermissionUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: LeadTypePermissionScalarWhereInput | LeadTypePermissionScalarWhereInput[]
  }

  export type UserUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput> | UserCreateWithoutUserTypeInput[] | UserUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserTypeInput | UserCreateOrConnectWithoutUserTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUserTypeInput | UserUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: UserCreateManyUserTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUserTypeInput | UserUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUserTypeInput | UserUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserTypePermissionUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<UserTypePermissionCreateWithoutUserTypeInput, UserTypePermissionUncheckedCreateWithoutUserTypeInput> | UserTypePermissionCreateWithoutUserTypeInput[] | UserTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutUserTypeInput | UserTypePermissionCreateOrConnectWithoutUserTypeInput[]
    upsert?: UserTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput | UserTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: UserTypePermissionCreateManyUserTypeInputEnvelope
    set?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    disconnect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    delete?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    update?: UserTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput | UserTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: UserTypePermissionUpdateManyWithWhereWithoutUserTypeInput | UserTypePermissionUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: UserTypePermissionScalarWhereInput | UserTypePermissionScalarWhereInput[]
  }

  export type NotificationRolePermissionUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutUserTypeInput, NotificationRolePermissionUncheckedCreateWithoutUserTypeInput> | NotificationRolePermissionCreateWithoutUserTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutUserTypeInput | NotificationRolePermissionCreateOrConnectWithoutUserTypeInput[]
    upsert?: NotificationRolePermissionUpsertWithWhereUniqueWithoutUserTypeInput | NotificationRolePermissionUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: NotificationRolePermissionCreateManyUserTypeInputEnvelope
    set?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    disconnect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    delete?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    update?: NotificationRolePermissionUpdateWithWhereUniqueWithoutUserTypeInput | NotificationRolePermissionUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: NotificationRolePermissionUpdateManyWithWhereWithoutUserTypeInput | NotificationRolePermissionUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: NotificationRolePermissionScalarWhereInput | NotificationRolePermissionScalarWhereInput[]
  }

  export type LeadTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<LeadTypePermissionCreateWithoutUserTypeInput, LeadTypePermissionUncheckedCreateWithoutUserTypeInput> | LeadTypePermissionCreateWithoutUserTypeInput[] | LeadTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: LeadTypePermissionCreateOrConnectWithoutUserTypeInput | LeadTypePermissionCreateOrConnectWithoutUserTypeInput[]
    upsert?: LeadTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput | LeadTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: LeadTypePermissionCreateManyUserTypeInputEnvelope
    set?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    disconnect?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    delete?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    connect?: LeadTypePermissionWhereUniqueInput | LeadTypePermissionWhereUniqueInput[]
    update?: LeadTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput | LeadTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: LeadTypePermissionUpdateManyWithWhereWithoutUserTypeInput | LeadTypePermissionUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: LeadTypePermissionScalarWhereInput | LeadTypePermissionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput> | UserCreateWithoutUserTypeInput[] | UserUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserTypeInput | UserCreateOrConnectWithoutUserTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUserTypeInput | UserUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: UserCreateManyUserTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUserTypeInput | UserUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUserTypeInput | UserUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<UserTypePermissionCreateWithoutUserTypeInput, UserTypePermissionUncheckedCreateWithoutUserTypeInput> | UserTypePermissionCreateWithoutUserTypeInput[] | UserTypePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutUserTypeInput | UserTypePermissionCreateOrConnectWithoutUserTypeInput[]
    upsert?: UserTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput | UserTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: UserTypePermissionCreateManyUserTypeInputEnvelope
    set?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    disconnect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    delete?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    update?: UserTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput | UserTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: UserTypePermissionUpdateManyWithWhereWithoutUserTypeInput | UserTypePermissionUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: UserTypePermissionScalarWhereInput | UserTypePermissionScalarWhereInput[]
  }

  export type NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeNestedInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutUserTypeInput, NotificationRolePermissionUncheckedCreateWithoutUserTypeInput> | NotificationRolePermissionCreateWithoutUserTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutUserTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutUserTypeInput | NotificationRolePermissionCreateOrConnectWithoutUserTypeInput[]
    upsert?: NotificationRolePermissionUpsertWithWhereUniqueWithoutUserTypeInput | NotificationRolePermissionUpsertWithWhereUniqueWithoutUserTypeInput[]
    createMany?: NotificationRolePermissionCreateManyUserTypeInputEnvelope
    set?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    disconnect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    delete?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    update?: NotificationRolePermissionUpdateWithWhereUniqueWithoutUserTypeInput | NotificationRolePermissionUpdateWithWhereUniqueWithoutUserTypeInput[]
    updateMany?: NotificationRolePermissionUpdateManyWithWhereWithoutUserTypeInput | NotificationRolePermissionUpdateManyWithWhereWithoutUserTypeInput[]
    deleteMany?: NotificationRolePermissionScalarWhereInput | NotificationRolePermissionScalarWhereInput[]
  }

  export type UserTypePermissionCreateNestedManyWithoutPageInput = {
    create?: XOR<UserTypePermissionCreateWithoutPageInput, UserTypePermissionUncheckedCreateWithoutPageInput> | UserTypePermissionCreateWithoutPageInput[] | UserTypePermissionUncheckedCreateWithoutPageInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutPageInput | UserTypePermissionCreateOrConnectWithoutPageInput[]
    createMany?: UserTypePermissionCreateManyPageInputEnvelope
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
  }

  export type UserTypePermissionUncheckedCreateNestedManyWithoutPageInput = {
    create?: XOR<UserTypePermissionCreateWithoutPageInput, UserTypePermissionUncheckedCreateWithoutPageInput> | UserTypePermissionCreateWithoutPageInput[] | UserTypePermissionUncheckedCreateWithoutPageInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutPageInput | UserTypePermissionCreateOrConnectWithoutPageInput[]
    createMany?: UserTypePermissionCreateManyPageInputEnvelope
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
  }

  export type UserTypePermissionUpdateManyWithoutPageNestedInput = {
    create?: XOR<UserTypePermissionCreateWithoutPageInput, UserTypePermissionUncheckedCreateWithoutPageInput> | UserTypePermissionCreateWithoutPageInput[] | UserTypePermissionUncheckedCreateWithoutPageInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutPageInput | UserTypePermissionCreateOrConnectWithoutPageInput[]
    upsert?: UserTypePermissionUpsertWithWhereUniqueWithoutPageInput | UserTypePermissionUpsertWithWhereUniqueWithoutPageInput[]
    createMany?: UserTypePermissionCreateManyPageInputEnvelope
    set?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    disconnect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    delete?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    update?: UserTypePermissionUpdateWithWhereUniqueWithoutPageInput | UserTypePermissionUpdateWithWhereUniqueWithoutPageInput[]
    updateMany?: UserTypePermissionUpdateManyWithWhereWithoutPageInput | UserTypePermissionUpdateManyWithWhereWithoutPageInput[]
    deleteMany?: UserTypePermissionScalarWhereInput | UserTypePermissionScalarWhereInput[]
  }

  export type UserTypePermissionUncheckedUpdateManyWithoutPageNestedInput = {
    create?: XOR<UserTypePermissionCreateWithoutPageInput, UserTypePermissionUncheckedCreateWithoutPageInput> | UserTypePermissionCreateWithoutPageInput[] | UserTypePermissionUncheckedCreateWithoutPageInput[]
    connectOrCreate?: UserTypePermissionCreateOrConnectWithoutPageInput | UserTypePermissionCreateOrConnectWithoutPageInput[]
    upsert?: UserTypePermissionUpsertWithWhereUniqueWithoutPageInput | UserTypePermissionUpsertWithWhereUniqueWithoutPageInput[]
    createMany?: UserTypePermissionCreateManyPageInputEnvelope
    set?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    disconnect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    delete?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    connect?: UserTypePermissionWhereUniqueInput | UserTypePermissionWhereUniqueInput[]
    update?: UserTypePermissionUpdateWithWhereUniqueWithoutPageInput | UserTypePermissionUpdateWithWhereUniqueWithoutPageInput[]
    updateMany?: UserTypePermissionUpdateManyWithWhereWithoutPageInput | UserTypePermissionUpdateManyWithWhereWithoutPageInput[]
    deleteMany?: UserTypePermissionScalarWhereInput | UserTypePermissionScalarWhereInput[]
  }

  export type PageCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<PageCreateWithoutPermissionsInput, PageUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: PageCreateOrConnectWithoutPermissionsInput
    connect?: PageWhereUniqueInput
  }

  export type UserTypeCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserTypeCreateWithoutPermissionsInput, UserTypeUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutPermissionsInput
    connect?: UserTypeWhereUniqueInput
  }

  export type PageUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<PageCreateWithoutPermissionsInput, PageUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: PageCreateOrConnectWithoutPermissionsInput
    upsert?: PageUpsertWithoutPermissionsInput
    connect?: PageWhereUniqueInput
    update?: XOR<XOR<PageUpdateToOneWithWhereWithoutPermissionsInput, PageUpdateWithoutPermissionsInput>, PageUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserTypeUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserTypeCreateWithoutPermissionsInput, UserTypeUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutPermissionsInput
    upsert?: UserTypeUpsertWithoutPermissionsInput
    connect?: UserTypeWhereUniqueInput
    update?: XOR<XOR<UserTypeUpdateToOneWithWhereWithoutPermissionsInput, UserTypeUpdateWithoutPermissionsInput>, UserTypeUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserTypeCreateNestedOneWithoutLeadTypePermissionsInput = {
    create?: XOR<UserTypeCreateWithoutLeadTypePermissionsInput, UserTypeUncheckedCreateWithoutLeadTypePermissionsInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutLeadTypePermissionsInput
    connect?: UserTypeWhereUniqueInput
  }

  export type UserTypeUpdateOneRequiredWithoutLeadTypePermissionsNestedInput = {
    create?: XOR<UserTypeCreateWithoutLeadTypePermissionsInput, UserTypeUncheckedCreateWithoutLeadTypePermissionsInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutLeadTypePermissionsInput
    upsert?: UserTypeUpsertWithoutLeadTypePermissionsInput
    connect?: UserTypeWhereUniqueInput
    update?: XOR<XOR<UserTypeUpdateToOneWithWhereWithoutLeadTypePermissionsInput, UserTypeUpdateWithoutLeadTypePermissionsInput>, UserTypeUncheckedUpdateWithoutLeadTypePermissionsInput>
  }

  export type UserCreateNestedOneWithoutLeadTypePermissionsInput = {
    create?: XOR<UserCreateWithoutLeadTypePermissionsInput, UserUncheckedCreateWithoutLeadTypePermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadTypePermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLeadTypePermissionsNestedInput = {
    create?: XOR<UserCreateWithoutLeadTypePermissionsInput, UserUncheckedCreateWithoutLeadTypePermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadTypePermissionsInput
    upsert?: UserUpsertWithoutLeadTypePermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLeadTypePermissionsInput, UserUpdateWithoutLeadTypePermissionsInput>, UserUncheckedUpdateWithoutLeadTypePermissionsInput>
  }

  export type UserCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivityLogsNestedInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    upsert?: UserUpsertWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLogsInput, UserUpdateWithoutActivityLogsInput>, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserCreateNestedOneWithoutPasswordResetTokensInput = {
    create?: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordResetTokensNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetTokensInput
    upsert?: UserUpsertWithoutPasswordResetTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetTokensInput, UserUpdateWithoutPasswordResetTokensInput>, UserUncheckedUpdateWithoutPasswordResetTokensInput>
  }

  export type UserCreateNestedOneWithoutBalanceTransactionsInput = {
    create?: XOR<UserCreateWithoutBalanceTransactionsInput, UserUncheckedCreateWithoutBalanceTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBalanceTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBalanceTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutBalanceTransactionsInput, UserUncheckedCreateWithoutBalanceTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBalanceTransactionsInput
    upsert?: UserUpsertWithoutBalanceTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBalanceTransactionsInput, UserUpdateWithoutBalanceTransactionsInput>, UserUncheckedUpdateWithoutBalanceTransactionsInput>
  }

  export type NotificationCreateNestedManyWithoutNotificationTypeInput = {
    create?: XOR<NotificationCreateWithoutNotificationTypeInput, NotificationUncheckedCreateWithoutNotificationTypeInput> | NotificationCreateWithoutNotificationTypeInput[] | NotificationUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationTypeInput | NotificationCreateOrConnectWithoutNotificationTypeInput[]
    createMany?: NotificationCreateManyNotificationTypeInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationPreferenceCreateNestedManyWithoutNotificationTypeInput = {
    create?: XOR<NotificationPreferenceCreateWithoutNotificationTypeInput, NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput> | NotificationPreferenceCreateWithoutNotificationTypeInput[] | NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput | NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput[]
    createMany?: NotificationPreferenceCreateManyNotificationTypeInputEnvelope
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
  }

  export type NotificationRolePermissionCreateNestedManyWithoutNotificationTypeInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput> | NotificationRolePermissionCreateWithoutNotificationTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput | NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput[]
    createMany?: NotificationRolePermissionCreateManyNotificationTypeInputEnvelope
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutNotificationTypeInput = {
    create?: XOR<NotificationCreateWithoutNotificationTypeInput, NotificationUncheckedCreateWithoutNotificationTypeInput> | NotificationCreateWithoutNotificationTypeInput[] | NotificationUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationTypeInput | NotificationCreateOrConnectWithoutNotificationTypeInput[]
    createMany?: NotificationCreateManyNotificationTypeInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationPreferenceUncheckedCreateNestedManyWithoutNotificationTypeInput = {
    create?: XOR<NotificationPreferenceCreateWithoutNotificationTypeInput, NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput> | NotificationPreferenceCreateWithoutNotificationTypeInput[] | NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput | NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput[]
    createMany?: NotificationPreferenceCreateManyNotificationTypeInputEnvelope
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
  }

  export type NotificationRolePermissionUncheckedCreateNestedManyWithoutNotificationTypeInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput> | NotificationRolePermissionCreateWithoutNotificationTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput | NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput[]
    createMany?: NotificationRolePermissionCreateManyNotificationTypeInputEnvelope
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
  }

  export type NotificationUpdateManyWithoutNotificationTypeNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationTypeInput, NotificationUncheckedCreateWithoutNotificationTypeInput> | NotificationCreateWithoutNotificationTypeInput[] | NotificationUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationTypeInput | NotificationCreateOrConnectWithoutNotificationTypeInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutNotificationTypeInput | NotificationUpsertWithWhereUniqueWithoutNotificationTypeInput[]
    createMany?: NotificationCreateManyNotificationTypeInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutNotificationTypeInput | NotificationUpdateWithWhereUniqueWithoutNotificationTypeInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutNotificationTypeInput | NotificationUpdateManyWithWhereWithoutNotificationTypeInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationPreferenceUpdateManyWithoutNotificationTypeNestedInput = {
    create?: XOR<NotificationPreferenceCreateWithoutNotificationTypeInput, NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput> | NotificationPreferenceCreateWithoutNotificationTypeInput[] | NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput | NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput[]
    upsert?: NotificationPreferenceUpsertWithWhereUniqueWithoutNotificationTypeInput | NotificationPreferenceUpsertWithWhereUniqueWithoutNotificationTypeInput[]
    createMany?: NotificationPreferenceCreateManyNotificationTypeInputEnvelope
    set?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    disconnect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    delete?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    update?: NotificationPreferenceUpdateWithWhereUniqueWithoutNotificationTypeInput | NotificationPreferenceUpdateWithWhereUniqueWithoutNotificationTypeInput[]
    updateMany?: NotificationPreferenceUpdateManyWithWhereWithoutNotificationTypeInput | NotificationPreferenceUpdateManyWithWhereWithoutNotificationTypeInput[]
    deleteMany?: NotificationPreferenceScalarWhereInput | NotificationPreferenceScalarWhereInput[]
  }

  export type NotificationRolePermissionUpdateManyWithoutNotificationTypeNestedInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput> | NotificationRolePermissionCreateWithoutNotificationTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput | NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput[]
    upsert?: NotificationRolePermissionUpsertWithWhereUniqueWithoutNotificationTypeInput | NotificationRolePermissionUpsertWithWhereUniqueWithoutNotificationTypeInput[]
    createMany?: NotificationRolePermissionCreateManyNotificationTypeInputEnvelope
    set?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    disconnect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    delete?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    update?: NotificationRolePermissionUpdateWithWhereUniqueWithoutNotificationTypeInput | NotificationRolePermissionUpdateWithWhereUniqueWithoutNotificationTypeInput[]
    updateMany?: NotificationRolePermissionUpdateManyWithWhereWithoutNotificationTypeInput | NotificationRolePermissionUpdateManyWithWhereWithoutNotificationTypeInput[]
    deleteMany?: NotificationRolePermissionScalarWhereInput | NotificationRolePermissionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationTypeNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationTypeInput, NotificationUncheckedCreateWithoutNotificationTypeInput> | NotificationCreateWithoutNotificationTypeInput[] | NotificationUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationTypeInput | NotificationCreateOrConnectWithoutNotificationTypeInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutNotificationTypeInput | NotificationUpsertWithWhereUniqueWithoutNotificationTypeInput[]
    createMany?: NotificationCreateManyNotificationTypeInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutNotificationTypeInput | NotificationUpdateWithWhereUniqueWithoutNotificationTypeInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutNotificationTypeInput | NotificationUpdateManyWithWhereWithoutNotificationTypeInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationPreferenceUncheckedUpdateManyWithoutNotificationTypeNestedInput = {
    create?: XOR<NotificationPreferenceCreateWithoutNotificationTypeInput, NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput> | NotificationPreferenceCreateWithoutNotificationTypeInput[] | NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput | NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput[]
    upsert?: NotificationPreferenceUpsertWithWhereUniqueWithoutNotificationTypeInput | NotificationPreferenceUpsertWithWhereUniqueWithoutNotificationTypeInput[]
    createMany?: NotificationPreferenceCreateManyNotificationTypeInputEnvelope
    set?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    disconnect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    delete?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    connect?: NotificationPreferenceWhereUniqueInput | NotificationPreferenceWhereUniqueInput[]
    update?: NotificationPreferenceUpdateWithWhereUniqueWithoutNotificationTypeInput | NotificationPreferenceUpdateWithWhereUniqueWithoutNotificationTypeInput[]
    updateMany?: NotificationPreferenceUpdateManyWithWhereWithoutNotificationTypeInput | NotificationPreferenceUpdateManyWithWhereWithoutNotificationTypeInput[]
    deleteMany?: NotificationPreferenceScalarWhereInput | NotificationPreferenceScalarWhereInput[]
  }

  export type NotificationRolePermissionUncheckedUpdateManyWithoutNotificationTypeNestedInput = {
    create?: XOR<NotificationRolePermissionCreateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput> | NotificationRolePermissionCreateWithoutNotificationTypeInput[] | NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput[]
    connectOrCreate?: NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput | NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput[]
    upsert?: NotificationRolePermissionUpsertWithWhereUniqueWithoutNotificationTypeInput | NotificationRolePermissionUpsertWithWhereUniqueWithoutNotificationTypeInput[]
    createMany?: NotificationRolePermissionCreateManyNotificationTypeInputEnvelope
    set?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    disconnect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    delete?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    connect?: NotificationRolePermissionWhereUniqueInput | NotificationRolePermissionWhereUniqueInput[]
    update?: NotificationRolePermissionUpdateWithWhereUniqueWithoutNotificationTypeInput | NotificationRolePermissionUpdateWithWhereUniqueWithoutNotificationTypeInput[]
    updateMany?: NotificationRolePermissionUpdateManyWithWhereWithoutNotificationTypeInput | NotificationRolePermissionUpdateManyWithWhereWithoutNotificationTypeInput[]
    deleteMany?: NotificationRolePermissionScalarWhereInput | NotificationRolePermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationPreferencesInput = {
    create?: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationTypeCreateNestedOneWithoutUserPreferencesInput = {
    create?: XOR<NotificationTypeCreateWithoutUserPreferencesInput, NotificationTypeUncheckedCreateWithoutUserPreferencesInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutUserPreferencesInput
    connect?: NotificationTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationPreferencesInput
    upsert?: UserUpsertWithoutNotificationPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationPreferencesInput, UserUpdateWithoutNotificationPreferencesInput>, UserUncheckedUpdateWithoutNotificationPreferencesInput>
  }

  export type NotificationTypeUpdateOneRequiredWithoutUserPreferencesNestedInput = {
    create?: XOR<NotificationTypeCreateWithoutUserPreferencesInput, NotificationTypeUncheckedCreateWithoutUserPreferencesInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutUserPreferencesInput
    upsert?: NotificationTypeUpsertWithoutUserPreferencesInput
    connect?: NotificationTypeWhereUniqueInput
    update?: XOR<XOR<NotificationTypeUpdateToOneWithWhereWithoutUserPreferencesInput, NotificationTypeUpdateWithoutUserPreferencesInput>, NotificationTypeUncheckedUpdateWithoutUserPreferencesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationTypeCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<NotificationTypeCreateWithoutNotificationsInput, NotificationTypeUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutNotificationsInput
    connect?: NotificationTypeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationTypeUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<NotificationTypeCreateWithoutNotificationsInput, NotificationTypeUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutNotificationsInput
    upsert?: NotificationTypeUpsertWithoutNotificationsInput
    connect?: NotificationTypeWhereUniqueInput
    update?: XOR<XOR<NotificationTypeUpdateToOneWithWhereWithoutNotificationsInput, NotificationTypeUpdateWithoutNotificationsInput>, NotificationTypeUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserTypeCreateNestedOneWithoutNotificationRolePermissionsInput = {
    create?: XOR<UserTypeCreateWithoutNotificationRolePermissionsInput, UserTypeUncheckedCreateWithoutNotificationRolePermissionsInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutNotificationRolePermissionsInput
    connect?: UserTypeWhereUniqueInput
  }

  export type NotificationTypeCreateNestedOneWithoutRoleTypePermissionsInput = {
    create?: XOR<NotificationTypeCreateWithoutRoleTypePermissionsInput, NotificationTypeUncheckedCreateWithoutRoleTypePermissionsInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutRoleTypePermissionsInput
    connect?: NotificationTypeWhereUniqueInput
  }

  export type UserTypeUpdateOneRequiredWithoutNotificationRolePermissionsNestedInput = {
    create?: XOR<UserTypeCreateWithoutNotificationRolePermissionsInput, UserTypeUncheckedCreateWithoutNotificationRolePermissionsInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutNotificationRolePermissionsInput
    upsert?: UserTypeUpsertWithoutNotificationRolePermissionsInput
    connect?: UserTypeWhereUniqueInput
    update?: XOR<XOR<UserTypeUpdateToOneWithWhereWithoutNotificationRolePermissionsInput, UserTypeUpdateWithoutNotificationRolePermissionsInput>, UserTypeUncheckedUpdateWithoutNotificationRolePermissionsInput>
  }

  export type NotificationTypeUpdateOneRequiredWithoutRoleTypePermissionsNestedInput = {
    create?: XOR<NotificationTypeCreateWithoutRoleTypePermissionsInput, NotificationTypeUncheckedCreateWithoutRoleTypePermissionsInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutRoleTypePermissionsInput
    upsert?: NotificationTypeUpsertWithoutRoleTypePermissionsInput
    connect?: NotificationTypeWhereUniqueInput
    update?: XOR<XOR<NotificationTypeUpdateToOneWithWhereWithoutRoleTypePermissionsInput, NotificationTypeUpdateWithoutRoleTypePermissionsInput>, NotificationTypeUncheckedUpdateWithoutRoleTypePermissionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BidCreateWithoutUserInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    lead: LeadCreateNestedOneWithoutBidsInput
  }

  export type BidUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    leadId: string
  }

  export type BidCreateOrConnectWithoutUserInput = {
    where: BidWhereUniqueInput
    create: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput>
  }

  export type BidCreateManyUserInputEnvelope = {
    data: BidCreateManyUserInput | BidCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeadCreateWithoutOwnerInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    bids?: BidCreateNestedManyWithoutLeadInput
    sale?: LeadSaleCreateNestedOneWithoutLeadInput
    watchers?: LeadWatchCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    bids?: BidUncheckedCreateNestedManyWithoutLeadInput
    sale?: LeadSaleUncheckedCreateNestedOneWithoutLeadInput
    watchers?: LeadWatchUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutOwnerInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutOwnerInput, LeadUncheckedCreateWithoutOwnerInput>
  }

  export type LeadCreateManyOwnerInputEnvelope = {
    data: LeadCreateManyOwnerInput | LeadCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type LeadSaleCreateWithoutBuyerInput = {
    id?: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
    lead: LeadCreateNestedOneWithoutSaleInput
  }

  export type LeadSaleUncheckedCreateWithoutBuyerInput = {
    id?: string
    leadId: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
  }

  export type LeadSaleCreateOrConnectWithoutBuyerInput = {
    where: LeadSaleWhereUniqueInput
    create: XOR<LeadSaleCreateWithoutBuyerInput, LeadSaleUncheckedCreateWithoutBuyerInput>
  }

  export type LeadSaleCreateManyBuyerInputEnvelope = {
    data: LeadSaleCreateManyBuyerInput | LeadSaleCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type LeadWatchCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    lead: LeadCreateNestedOneWithoutWatchersInput
  }

  export type LeadWatchUncheckedCreateWithoutUserInput = {
    id?: string
    leadId: string
    createdAt?: Date | string
  }

  export type LeadWatchCreateOrConnectWithoutUserInput = {
    where: LeadWatchWhereUniqueInput
    create: XOR<LeadWatchCreateWithoutUserInput, LeadWatchUncheckedCreateWithoutUserInput>
  }

  export type LeadWatchCreateManyUserInputEnvelope = {
    data: LeadWatchCreateManyUserInput | LeadWatchCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserTypeCreateWithoutUsersInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedCreateWithoutUsersInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeCreateOrConnectWithoutUsersInput = {
    where: UserTypeWhereUniqueInput
    create: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
  }

  export type UserLeadTypePermissionCreateWithoutUserInput = {
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLeadTypePermissionUncheckedCreateWithoutUserInput = {
    id?: number
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserLeadTypePermissionCreateOrConnectWithoutUserInput = {
    where: UserLeadTypePermissionWhereUniqueInput
    create: XOR<UserLeadTypePermissionCreateWithoutUserInput, UserLeadTypePermissionUncheckedCreateWithoutUserInput>
  }

  export type UserLeadTypePermissionCreateManyUserInputEnvelope = {
    data: UserLeadTypePermissionCreateManyUserInput | UserLeadTypePermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogCreateWithoutUserInput = {
    id?: string
    action: string
    details?: string | null
    entityType?: string | null
    entityId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ActivityLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    details?: string | null
    entityType?: string | null
    entityId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ActivityLogCreateOrConnectWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogCreateManyUserInputEnvelope = {
    data: ActivityLogCreateManyUserInput | ActivityLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type PasswordResetTokenCreateOrConnectWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    create: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetTokenCreateManyUserInputEnvelope = {
    data: PasswordResetTokenCreateManyUserInput | PasswordResetTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BalanceTransactionCreateWithoutUserInput = {
    id?: string
    amount: number
    type: string
    description?: string | null
    relatedId?: string | null
    adminId?: string | null
    createdAt?: Date | string
  }

  export type BalanceTransactionUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    type: string
    description?: string | null
    relatedId?: string | null
    adminId?: string | null
    createdAt?: Date | string
  }

  export type BalanceTransactionCreateOrConnectWithoutUserInput = {
    where: BalanceTransactionWhereUniqueInput
    create: XOR<BalanceTransactionCreateWithoutUserInput, BalanceTransactionUncheckedCreateWithoutUserInput>
  }

  export type BalanceTransactionCreateManyUserInputEnvelope = {
    data: BalanceTransactionCreateManyUserInput | BalanceTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
    notificationType: NotificationTypeCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    notificationTypeId: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationPreferenceCreateWithoutUserInput = {
    id?: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: NotificationTypeCreateNestedOneWithoutUserPreferencesInput
  }

  export type NotificationPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    notificationTypeId: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceCreateOrConnectWithoutUserInput = {
    where: NotificationPreferenceWhereUniqueInput
    create: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type NotificationPreferenceCreateManyUserInputEnvelope = {
    data: NotificationPreferenceCreateManyUserInput | NotificationPreferenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BidUpsertWithWhereUniqueWithoutUserInput = {
    where: BidWhereUniqueInput
    update: XOR<BidUpdateWithoutUserInput, BidUncheckedUpdateWithoutUserInput>
    create: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput>
  }

  export type BidUpdateWithWhereUniqueWithoutUserInput = {
    where: BidWhereUniqueInput
    data: XOR<BidUpdateWithoutUserInput, BidUncheckedUpdateWithoutUserInput>
  }

  export type BidUpdateManyWithWhereWithoutUserInput = {
    where: BidScalarWhereInput
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyWithoutUserInput>
  }

  export type BidScalarWhereInput = {
    AND?: BidScalarWhereInput | BidScalarWhereInput[]
    OR?: BidScalarWhereInput[]
    NOT?: BidScalarWhereInput | BidScalarWhereInput[]
    id?: StringFilter<"Bid"> | string
    amount?: IntFilter<"Bid"> | number
    maxBid?: IntFilter<"Bid"> | number
    isAutoBid?: BoolFilter<"Bid"> | boolean
    createdAt?: DateTimeFilter<"Bid"> | Date | string
    leadId?: StringFilter<"Bid"> | string
    userId?: StringFilter<"Bid"> | string
  }

  export type LeadUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LeadWhereUniqueInput
    update: XOR<LeadUpdateWithoutOwnerInput, LeadUncheckedUpdateWithoutOwnerInput>
    create: XOR<LeadCreateWithoutOwnerInput, LeadUncheckedCreateWithoutOwnerInput>
  }

  export type LeadUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LeadWhereUniqueInput
    data: XOR<LeadUpdateWithoutOwnerInput, LeadUncheckedUpdateWithoutOwnerInput>
  }

  export type LeadUpdateManyWithWhereWithoutOwnerInput = {
    where: LeadScalarWhereInput
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LeadScalarWhereInput = {
    AND?: LeadScalarWhereInput | LeadScalarWhereInput[]
    OR?: LeadScalarWhereInput[]
    NOT?: LeadScalarWhereInput | LeadScalarWhereInput[]
    id?: StringFilter<"Lead"> | string
    title?: StringFilter<"Lead"> | string
    description?: StringFilter<"Lead"> | string
    privateDetails?: StringNullableFilter<"Lead"> | string | null
    postalCode?: StringNullableFilter<"Lead"> | string | null
    startPrice?: IntFilter<"Lead"> | number
    minIncrement?: IntFilter<"Lead"> | number
    instantBuyPrice?: IntNullableFilter<"Lead"> | number | null
    reservePrice?: IntNullableFilter<"Lead"> | number | null
    antiSnipeSeconds?: IntFilter<"Lead"> | number
    insuranceType?: StringNullableFilter<"Lead"> | string | null
    isActive?: BoolFilter<"Lead"> | boolean
    isShowcase?: BoolFilter<"Lead"> | boolean
    isSold?: BoolFilter<"Lead"> | boolean
    featured?: BoolFilter<"Lead"> | boolean
    startsAt?: DateTimeNullableFilter<"Lead"> | Date | string | null
    endsAt?: DateTimeFilter<"Lead"> | Date | string
    createdAt?: DateTimeFilter<"Lead"> | Date | string
    updatedAt?: DateTimeFilter<"Lead"> | Date | string
    ownerId?: StringFilter<"Lead"> | string
  }

  export type LeadSaleUpsertWithWhereUniqueWithoutBuyerInput = {
    where: LeadSaleWhereUniqueInput
    update: XOR<LeadSaleUpdateWithoutBuyerInput, LeadSaleUncheckedUpdateWithoutBuyerInput>
    create: XOR<LeadSaleCreateWithoutBuyerInput, LeadSaleUncheckedCreateWithoutBuyerInput>
  }

  export type LeadSaleUpdateWithWhereUniqueWithoutBuyerInput = {
    where: LeadSaleWhereUniqueInput
    data: XOR<LeadSaleUpdateWithoutBuyerInput, LeadSaleUncheckedUpdateWithoutBuyerInput>
  }

  export type LeadSaleUpdateManyWithWhereWithoutBuyerInput = {
    where: LeadSaleScalarWhereInput
    data: XOR<LeadSaleUpdateManyMutationInput, LeadSaleUncheckedUpdateManyWithoutBuyerInput>
  }

  export type LeadSaleScalarWhereInput = {
    AND?: LeadSaleScalarWhereInput | LeadSaleScalarWhereInput[]
    OR?: LeadSaleScalarWhereInput[]
    NOT?: LeadSaleScalarWhereInput | LeadSaleScalarWhereInput[]
    id?: StringFilter<"LeadSale"> | string
    leadId?: StringFilter<"LeadSale"> | string
    buyerId?: StringFilter<"LeadSale"> | string
    amount?: IntFilter<"LeadSale"> | number
    paymentMethod?: StringFilter<"LeadSale"> | string
    balanceBefore?: IntNullableFilter<"LeadSale"> | number | null
    balanceAfter?: IntNullableFilter<"LeadSale"> | number | null
    soldAt?: DateTimeFilter<"LeadSale"> | Date | string
    createdAt?: DateTimeFilter<"LeadSale"> | Date | string
  }

  export type LeadWatchUpsertWithWhereUniqueWithoutUserInput = {
    where: LeadWatchWhereUniqueInput
    update: XOR<LeadWatchUpdateWithoutUserInput, LeadWatchUncheckedUpdateWithoutUserInput>
    create: XOR<LeadWatchCreateWithoutUserInput, LeadWatchUncheckedCreateWithoutUserInput>
  }

  export type LeadWatchUpdateWithWhereUniqueWithoutUserInput = {
    where: LeadWatchWhereUniqueInput
    data: XOR<LeadWatchUpdateWithoutUserInput, LeadWatchUncheckedUpdateWithoutUserInput>
  }

  export type LeadWatchUpdateManyWithWhereWithoutUserInput = {
    where: LeadWatchScalarWhereInput
    data: XOR<LeadWatchUpdateManyMutationInput, LeadWatchUncheckedUpdateManyWithoutUserInput>
  }

  export type LeadWatchScalarWhereInput = {
    AND?: LeadWatchScalarWhereInput | LeadWatchScalarWhereInput[]
    OR?: LeadWatchScalarWhereInput[]
    NOT?: LeadWatchScalarWhereInput | LeadWatchScalarWhereInput[]
    id?: StringFilter<"LeadWatch"> | string
    leadId?: StringFilter<"LeadWatch"> | string
    userId?: StringFilter<"LeadWatch"> | string
    createdAt?: DateTimeFilter<"LeadWatch"> | Date | string
  }

  export type UserTypeUpsertWithoutUsersInput = {
    update: XOR<UserTypeUpdateWithoutUsersInput, UserTypeUncheckedUpdateWithoutUsersInput>
    create: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
    where?: UserTypeWhereInput
  }

  export type UserTypeUpdateToOneWithWhereWithoutUsersInput = {
    where?: UserTypeWhereInput
    data: XOR<UserTypeUpdateWithoutUsersInput, UserTypeUncheckedUpdateWithoutUsersInput>
  }

  export type UserTypeUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
  }

  export type UserLeadTypePermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLeadTypePermissionWhereUniqueInput
    update: XOR<UserLeadTypePermissionUpdateWithoutUserInput, UserLeadTypePermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserLeadTypePermissionCreateWithoutUserInput, UserLeadTypePermissionUncheckedCreateWithoutUserInput>
  }

  export type UserLeadTypePermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLeadTypePermissionWhereUniqueInput
    data: XOR<UserLeadTypePermissionUpdateWithoutUserInput, UserLeadTypePermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserLeadTypePermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserLeadTypePermissionScalarWhereInput
    data: XOR<UserLeadTypePermissionUpdateManyMutationInput, UserLeadTypePermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLeadTypePermissionScalarWhereInput = {
    AND?: UserLeadTypePermissionScalarWhereInput | UserLeadTypePermissionScalarWhereInput[]
    OR?: UserLeadTypePermissionScalarWhereInput[]
    NOT?: UserLeadTypePermissionScalarWhereInput | UserLeadTypePermissionScalarWhereInput[]
    id?: IntFilter<"UserLeadTypePermission"> | number
    userId?: StringFilter<"UserLeadTypePermission"> | string
    leadType?: StringFilter<"UserLeadTypePermission"> | string
    hasAccess?: BoolFilter<"UserLeadTypePermission"> | boolean
    createdAt?: DateTimeFilter<"UserLeadTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserLeadTypePermission"> | Date | string
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityLogScalarWhereInput = {
    AND?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    OR?: ActivityLogScalarWhereInput[]
    NOT?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    id?: StringFilter<"ActivityLog"> | string
    userId?: StringFilter<"ActivityLog"> | string
    action?: StringFilter<"ActivityLog"> | string
    details?: StringNullableFilter<"ActivityLog"> | string | null
    entityType?: StringNullableFilter<"ActivityLog"> | string | null
    entityId?: StringNullableFilter<"ActivityLog"> | string | null
    ipAddress?: StringNullableFilter<"ActivityLog"> | string | null
    userAgent?: StringNullableFilter<"ActivityLog"> | string | null
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
  }

  export type PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    update: XOR<PasswordResetTokenUpdateWithoutUserInput, PasswordResetTokenUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    data: XOR<PasswordResetTokenUpdateWithoutUserInput, PasswordResetTokenUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetTokenUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetTokenScalarWhereInput
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordResetTokenScalarWhereInput = {
    AND?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    OR?: PasswordResetTokenScalarWhereInput[]
    NOT?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    userId?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expiresAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    used?: BoolFilter<"PasswordResetToken"> | boolean
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type BalanceTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: BalanceTransactionWhereUniqueInput
    update: XOR<BalanceTransactionUpdateWithoutUserInput, BalanceTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<BalanceTransactionCreateWithoutUserInput, BalanceTransactionUncheckedCreateWithoutUserInput>
  }

  export type BalanceTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: BalanceTransactionWhereUniqueInput
    data: XOR<BalanceTransactionUpdateWithoutUserInput, BalanceTransactionUncheckedUpdateWithoutUserInput>
  }

  export type BalanceTransactionUpdateManyWithWhereWithoutUserInput = {
    where: BalanceTransactionScalarWhereInput
    data: XOR<BalanceTransactionUpdateManyMutationInput, BalanceTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type BalanceTransactionScalarWhereInput = {
    AND?: BalanceTransactionScalarWhereInput | BalanceTransactionScalarWhereInput[]
    OR?: BalanceTransactionScalarWhereInput[]
    NOT?: BalanceTransactionScalarWhereInput | BalanceTransactionScalarWhereInput[]
    id?: StringFilter<"BalanceTransaction"> | string
    userId?: StringFilter<"BalanceTransaction"> | string
    amount?: FloatFilter<"BalanceTransaction"> | number
    type?: StringFilter<"BalanceTransaction"> | string
    description?: StringNullableFilter<"BalanceTransaction"> | string | null
    relatedId?: StringNullableFilter<"BalanceTransaction"> | string | null
    adminId?: StringNullableFilter<"BalanceTransaction"> | string | null
    createdAt?: DateTimeFilter<"BalanceTransaction"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    notificationTypeId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    emailSent?: BoolFilter<"Notification"> | boolean
    emailSentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type NotificationPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationPreferenceWhereUniqueInput
    update: XOR<NotificationPreferenceUpdateWithoutUserInput, NotificationPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationPreferenceCreateWithoutUserInput, NotificationPreferenceUncheckedCreateWithoutUserInput>
  }

  export type NotificationPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationPreferenceWhereUniqueInput
    data: XOR<NotificationPreferenceUpdateWithoutUserInput, NotificationPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type NotificationPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: NotificationPreferenceScalarWhereInput
    data: XOR<NotificationPreferenceUpdateManyMutationInput, NotificationPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationPreferenceScalarWhereInput = {
    AND?: NotificationPreferenceScalarWhereInput | NotificationPreferenceScalarWhereInput[]
    OR?: NotificationPreferenceScalarWhereInput[]
    NOT?: NotificationPreferenceScalarWhereInput | NotificationPreferenceScalarWhereInput[]
    id?: StringFilter<"NotificationPreference"> | string
    userId?: StringFilter<"NotificationPreference"> | string
    notificationTypeId?: StringFilter<"NotificationPreference"> | string
    emailEnabled?: BoolFilter<"NotificationPreference"> | boolean
    inAppEnabled?: BoolFilter<"NotificationPreference"> | boolean
    createdAt?: DateTimeFilter<"NotificationPreference"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationPreference"> | Date | string
  }

  export type BidCreateWithoutLeadInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBidsInput
  }

  export type BidUncheckedCreateWithoutLeadInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    userId: string
  }

  export type BidCreateOrConnectWithoutLeadInput = {
    where: BidWhereUniqueInput
    create: XOR<BidCreateWithoutLeadInput, BidUncheckedCreateWithoutLeadInput>
  }

  export type BidCreateManyLeadInputEnvelope = {
    data: BidCreateManyLeadInput | BidCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutLeadsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLeadsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLeadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeadsInput, UserUncheckedCreateWithoutLeadsInput>
  }

  export type LeadSaleCreateWithoutLeadInput = {
    id?: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
    buyer: UserCreateNestedOneWithoutPurchasedLeadsInput
  }

  export type LeadSaleUncheckedCreateWithoutLeadInput = {
    id?: string
    buyerId: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
  }

  export type LeadSaleCreateOrConnectWithoutLeadInput = {
    where: LeadSaleWhereUniqueInput
    create: XOR<LeadSaleCreateWithoutLeadInput, LeadSaleUncheckedCreateWithoutLeadInput>
  }

  export type LeadWatchCreateWithoutLeadInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWatchingInput
  }

  export type LeadWatchUncheckedCreateWithoutLeadInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type LeadWatchCreateOrConnectWithoutLeadInput = {
    where: LeadWatchWhereUniqueInput
    create: XOR<LeadWatchCreateWithoutLeadInput, LeadWatchUncheckedCreateWithoutLeadInput>
  }

  export type LeadWatchCreateManyLeadInputEnvelope = {
    data: LeadWatchCreateManyLeadInput | LeadWatchCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type BidUpsertWithWhereUniqueWithoutLeadInput = {
    where: BidWhereUniqueInput
    update: XOR<BidUpdateWithoutLeadInput, BidUncheckedUpdateWithoutLeadInput>
    create: XOR<BidCreateWithoutLeadInput, BidUncheckedCreateWithoutLeadInput>
  }

  export type BidUpdateWithWhereUniqueWithoutLeadInput = {
    where: BidWhereUniqueInput
    data: XOR<BidUpdateWithoutLeadInput, BidUncheckedUpdateWithoutLeadInput>
  }

  export type BidUpdateManyWithWhereWithoutLeadInput = {
    where: BidScalarWhereInput
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyWithoutLeadInput>
  }

  export type UserUpsertWithoutLeadsInput = {
    update: XOR<UserUpdateWithoutLeadsInput, UserUncheckedUpdateWithoutLeadsInput>
    create: XOR<UserCreateWithoutLeadsInput, UserUncheckedCreateWithoutLeadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLeadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLeadsInput, UserUncheckedUpdateWithoutLeadsInput>
  }

  export type UserUpdateWithoutLeadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLeadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeadSaleUpsertWithoutLeadInput = {
    update: XOR<LeadSaleUpdateWithoutLeadInput, LeadSaleUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadSaleCreateWithoutLeadInput, LeadSaleUncheckedCreateWithoutLeadInput>
    where?: LeadSaleWhereInput
  }

  export type LeadSaleUpdateToOneWithWhereWithoutLeadInput = {
    where?: LeadSaleWhereInput
    data: XOR<LeadSaleUpdateWithoutLeadInput, LeadSaleUncheckedUpdateWithoutLeadInput>
  }

  export type LeadSaleUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneRequiredWithoutPurchasedLeadsNestedInput
  }

  export type LeadSaleUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadWatchUpsertWithWhereUniqueWithoutLeadInput = {
    where: LeadWatchWhereUniqueInput
    update: XOR<LeadWatchUpdateWithoutLeadInput, LeadWatchUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadWatchCreateWithoutLeadInput, LeadWatchUncheckedCreateWithoutLeadInput>
  }

  export type LeadWatchUpdateWithWhereUniqueWithoutLeadInput = {
    where: LeadWatchWhereUniqueInput
    data: XOR<LeadWatchUpdateWithoutLeadInput, LeadWatchUncheckedUpdateWithoutLeadInput>
  }

  export type LeadWatchUpdateManyWithWhereWithoutLeadInput = {
    where: LeadWatchScalarWhereInput
    data: XOR<LeadWatchUpdateManyMutationInput, LeadWatchUncheckedUpdateManyWithoutLeadInput>
  }

  export type LeadCreateWithoutBidsInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutLeadsInput
    sale?: LeadSaleCreateNestedOneWithoutLeadInput
    watchers?: LeadWatchCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutBidsInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    sale?: LeadSaleUncheckedCreateNestedOneWithoutLeadInput
    watchers?: LeadWatchUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutBidsInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutBidsInput, LeadUncheckedCreateWithoutBidsInput>
  }

  export type UserCreateWithoutBidsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBidsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBidsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
  }

  export type LeadUpsertWithoutBidsInput = {
    update: XOR<LeadUpdateWithoutBidsInput, LeadUncheckedUpdateWithoutBidsInput>
    create: XOR<LeadCreateWithoutBidsInput, LeadUncheckedCreateWithoutBidsInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutBidsInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutBidsInput, LeadUncheckedUpdateWithoutBidsInput>
  }

  export type LeadUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutLeadsNestedInput
    sale?: LeadSaleUpdateOneWithoutLeadNestedInput
    watchers?: LeadWatchUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    sale?: LeadSaleUncheckedUpdateOneWithoutLeadNestedInput
    watchers?: LeadWatchUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type UserUpsertWithoutBidsInput = {
    update: XOR<UserUpdateWithoutBidsInput, UserUncheckedUpdateWithoutBidsInput>
    create: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBidsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBidsInput, UserUncheckedUpdateWithoutBidsInput>
  }

  export type UserUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeadCreateWithoutWatchersInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    bids?: BidCreateNestedManyWithoutLeadInput
    owner: UserCreateNestedOneWithoutLeadsInput
    sale?: LeadSaleCreateNestedOneWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutWatchersInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    bids?: BidUncheckedCreateNestedManyWithoutLeadInput
    sale?: LeadSaleUncheckedCreateNestedOneWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutWatchersInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutWatchersInput, LeadUncheckedCreateWithoutWatchersInput>
  }

  export type UserCreateWithoutWatchingInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWatchingInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWatchingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
  }

  export type LeadUpsertWithoutWatchersInput = {
    update: XOR<LeadUpdateWithoutWatchersInput, LeadUncheckedUpdateWithoutWatchersInput>
    create: XOR<LeadCreateWithoutWatchersInput, LeadUncheckedCreateWithoutWatchersInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutWatchersInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutWatchersInput, LeadUncheckedUpdateWithoutWatchersInput>
  }

  export type LeadUpdateWithoutWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bids?: BidUpdateManyWithoutLeadNestedInput
    owner?: UserUpdateOneRequiredWithoutLeadsNestedInput
    sale?: LeadSaleUpdateOneWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    bids?: BidUncheckedUpdateManyWithoutLeadNestedInput
    sale?: LeadSaleUncheckedUpdateOneWithoutLeadNestedInput
  }

  export type UserUpsertWithoutWatchingInput = {
    update: XOR<UserUpdateWithoutWatchingInput, UserUncheckedUpdateWithoutWatchingInput>
    create: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWatchingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWatchingInput, UserUncheckedUpdateWithoutWatchingInput>
  }

  export type UserUpdateWithoutWatchingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWatchingInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPurchasedLeadsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPurchasedLeadsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchasedLeadsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchasedLeadsInput, UserUncheckedCreateWithoutPurchasedLeadsInput>
  }

  export type LeadCreateWithoutSaleInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    bids?: BidCreateNestedManyWithoutLeadInput
    owner: UserCreateNestedOneWithoutLeadsInput
    watchers?: LeadWatchCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutSaleInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    bids?: BidUncheckedCreateNestedManyWithoutLeadInput
    watchers?: LeadWatchUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutSaleInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutSaleInput, LeadUncheckedCreateWithoutSaleInput>
  }

  export type UserUpsertWithoutPurchasedLeadsInput = {
    update: XOR<UserUpdateWithoutPurchasedLeadsInput, UserUncheckedUpdateWithoutPurchasedLeadsInput>
    create: XOR<UserCreateWithoutPurchasedLeadsInput, UserUncheckedCreateWithoutPurchasedLeadsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPurchasedLeadsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPurchasedLeadsInput, UserUncheckedUpdateWithoutPurchasedLeadsInput>
  }

  export type UserUpdateWithoutPurchasedLeadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPurchasedLeadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeadUpsertWithoutSaleInput = {
    update: XOR<LeadUpdateWithoutSaleInput, LeadUncheckedUpdateWithoutSaleInput>
    create: XOR<LeadCreateWithoutSaleInput, LeadUncheckedCreateWithoutSaleInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutSaleInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutSaleInput, LeadUncheckedUpdateWithoutSaleInput>
  }

  export type LeadUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bids?: BidUpdateManyWithoutLeadNestedInput
    owner?: UserUpdateOneRequiredWithoutLeadsNestedInput
    watchers?: LeadWatchUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    bids?: BidUncheckedUpdateManyWithoutLeadNestedInput
    watchers?: LeadWatchUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadTypePermissionCreateWithoutUserTypeInput = {
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadTypePermissionUncheckedCreateWithoutUserTypeInput = {
    id?: number
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadTypePermissionCreateOrConnectWithoutUserTypeInput = {
    where: LeadTypePermissionWhereUniqueInput
    create: XOR<LeadTypePermissionCreateWithoutUserTypeInput, LeadTypePermissionUncheckedCreateWithoutUserTypeInput>
  }

  export type LeadTypePermissionCreateManyUserTypeInputEnvelope = {
    data: LeadTypePermissionCreateManyUserTypeInput | LeadTypePermissionCreateManyUserTypeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutUserTypeInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserTypeInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserTypeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput>
  }

  export type UserCreateManyUserTypeInputEnvelope = {
    data: UserCreateManyUserTypeInput | UserCreateManyUserTypeInput[]
    skipDuplicates?: boolean
  }

  export type UserTypePermissionCreateWithoutUserTypeInput = {
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    page: PageCreateNestedOneWithoutPermissionsInput
  }

  export type UserTypePermissionUncheckedCreateWithoutUserTypeInput = {
    id?: number
    pageId: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTypePermissionCreateOrConnectWithoutUserTypeInput = {
    where: UserTypePermissionWhereUniqueInput
    create: XOR<UserTypePermissionCreateWithoutUserTypeInput, UserTypePermissionUncheckedCreateWithoutUserTypeInput>
  }

  export type UserTypePermissionCreateManyUserTypeInputEnvelope = {
    data: UserTypePermissionCreateManyUserTypeInput | UserTypePermissionCreateManyUserTypeInput[]
    skipDuplicates?: boolean
  }

  export type NotificationRolePermissionCreateWithoutUserTypeInput = {
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: NotificationTypeCreateNestedOneWithoutRoleTypePermissionsInput
  }

  export type NotificationRolePermissionUncheckedCreateWithoutUserTypeInput = {
    id?: number
    notificationTypeId: string
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationRolePermissionCreateOrConnectWithoutUserTypeInput = {
    where: NotificationRolePermissionWhereUniqueInput
    create: XOR<NotificationRolePermissionCreateWithoutUserTypeInput, NotificationRolePermissionUncheckedCreateWithoutUserTypeInput>
  }

  export type NotificationRolePermissionCreateManyUserTypeInputEnvelope = {
    data: NotificationRolePermissionCreateManyUserTypeInput | NotificationRolePermissionCreateManyUserTypeInput[]
    skipDuplicates?: boolean
  }

  export type LeadTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput = {
    where: LeadTypePermissionWhereUniqueInput
    update: XOR<LeadTypePermissionUpdateWithoutUserTypeInput, LeadTypePermissionUncheckedUpdateWithoutUserTypeInput>
    create: XOR<LeadTypePermissionCreateWithoutUserTypeInput, LeadTypePermissionUncheckedCreateWithoutUserTypeInput>
  }

  export type LeadTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput = {
    where: LeadTypePermissionWhereUniqueInput
    data: XOR<LeadTypePermissionUpdateWithoutUserTypeInput, LeadTypePermissionUncheckedUpdateWithoutUserTypeInput>
  }

  export type LeadTypePermissionUpdateManyWithWhereWithoutUserTypeInput = {
    where: LeadTypePermissionScalarWhereInput
    data: XOR<LeadTypePermissionUpdateManyMutationInput, LeadTypePermissionUncheckedUpdateManyWithoutUserTypeInput>
  }

  export type LeadTypePermissionScalarWhereInput = {
    AND?: LeadTypePermissionScalarWhereInput | LeadTypePermissionScalarWhereInput[]
    OR?: LeadTypePermissionScalarWhereInput[]
    NOT?: LeadTypePermissionScalarWhereInput | LeadTypePermissionScalarWhereInput[]
    id?: IntFilter<"LeadTypePermission"> | number
    userTypeId?: StringFilter<"LeadTypePermission"> | string
    leadType?: StringFilter<"LeadTypePermission"> | string
    hasAccess?: BoolFilter<"LeadTypePermission"> | boolean
    createdAt?: DateTimeFilter<"LeadTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"LeadTypePermission"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutUserTypeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUserTypeInput, UserUncheckedUpdateWithoutUserTypeInput>
    create: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUserTypeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUserTypeInput, UserUncheckedUpdateWithoutUserTypeInput>
  }

  export type UserUpdateManyWithWhereWithoutUserTypeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserTypeInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    userTypeId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    lastActivity?: DateTimeNullableFilter<"User"> | Date | string | null
    lastIP?: StringNullableFilter<"User"> | string | null
    lastUserAgent?: StringNullableFilter<"User"> | string | null
    twoFactorEnabled?: BoolFilter<"User"> | boolean
    twoFactorSecret?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    balance?: FloatFilter<"User"> | number
    balanceEnabled?: BoolFilter<"User"> | boolean
    paymentMethod?: StringFilter<"User"> | string
    ibanAccountHolder?: StringNullableFilter<"User"> | string | null
    ibanNumber?: StringNullableFilter<"User"> | string | null
    ibanBic?: StringNullableFilter<"User"> | string | null
    ibanAddress?: StringNullableFilter<"User"> | string | null
    ibanPostalCode?: StringNullableFilter<"User"> | string | null
    ibanCity?: StringNullableFilter<"User"> | string | null
  }

  export type UserTypePermissionUpsertWithWhereUniqueWithoutUserTypeInput = {
    where: UserTypePermissionWhereUniqueInput
    update: XOR<UserTypePermissionUpdateWithoutUserTypeInput, UserTypePermissionUncheckedUpdateWithoutUserTypeInput>
    create: XOR<UserTypePermissionCreateWithoutUserTypeInput, UserTypePermissionUncheckedCreateWithoutUserTypeInput>
  }

  export type UserTypePermissionUpdateWithWhereUniqueWithoutUserTypeInput = {
    where: UserTypePermissionWhereUniqueInput
    data: XOR<UserTypePermissionUpdateWithoutUserTypeInput, UserTypePermissionUncheckedUpdateWithoutUserTypeInput>
  }

  export type UserTypePermissionUpdateManyWithWhereWithoutUserTypeInput = {
    where: UserTypePermissionScalarWhereInput
    data: XOR<UserTypePermissionUpdateManyMutationInput, UserTypePermissionUncheckedUpdateManyWithoutUserTypeInput>
  }

  export type UserTypePermissionScalarWhereInput = {
    AND?: UserTypePermissionScalarWhereInput | UserTypePermissionScalarWhereInput[]
    OR?: UserTypePermissionScalarWhereInput[]
    NOT?: UserTypePermissionScalarWhereInput | UserTypePermissionScalarWhereInput[]
    id?: IntFilter<"UserTypePermission"> | number
    userTypeId?: StringFilter<"UserTypePermission"> | string
    pageId?: StringFilter<"UserTypePermission"> | string
    hasAccess?: BoolFilter<"UserTypePermission"> | boolean
    createdAt?: DateTimeFilter<"UserTypePermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserTypePermission"> | Date | string
  }

  export type NotificationRolePermissionUpsertWithWhereUniqueWithoutUserTypeInput = {
    where: NotificationRolePermissionWhereUniqueInput
    update: XOR<NotificationRolePermissionUpdateWithoutUserTypeInput, NotificationRolePermissionUncheckedUpdateWithoutUserTypeInput>
    create: XOR<NotificationRolePermissionCreateWithoutUserTypeInput, NotificationRolePermissionUncheckedCreateWithoutUserTypeInput>
  }

  export type NotificationRolePermissionUpdateWithWhereUniqueWithoutUserTypeInput = {
    where: NotificationRolePermissionWhereUniqueInput
    data: XOR<NotificationRolePermissionUpdateWithoutUserTypeInput, NotificationRolePermissionUncheckedUpdateWithoutUserTypeInput>
  }

  export type NotificationRolePermissionUpdateManyWithWhereWithoutUserTypeInput = {
    where: NotificationRolePermissionScalarWhereInput
    data: XOR<NotificationRolePermissionUpdateManyMutationInput, NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeInput>
  }

  export type NotificationRolePermissionScalarWhereInput = {
    AND?: NotificationRolePermissionScalarWhereInput | NotificationRolePermissionScalarWhereInput[]
    OR?: NotificationRolePermissionScalarWhereInput[]
    NOT?: NotificationRolePermissionScalarWhereInput | NotificationRolePermissionScalarWhereInput[]
    id?: IntFilter<"NotificationRolePermission"> | number
    userTypeId?: StringFilter<"NotificationRolePermission"> | string
    notificationTypeId?: StringFilter<"NotificationRolePermission"> | string
    canReceive?: BoolFilter<"NotificationRolePermission"> | boolean
    createdAt?: DateTimeFilter<"NotificationRolePermission"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationRolePermission"> | Date | string
  }

  export type UserTypePermissionCreateWithoutPageInput = {
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userType: UserTypeCreateNestedOneWithoutPermissionsInput
  }

  export type UserTypePermissionUncheckedCreateWithoutPageInput = {
    id?: number
    userTypeId: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTypePermissionCreateOrConnectWithoutPageInput = {
    where: UserTypePermissionWhereUniqueInput
    create: XOR<UserTypePermissionCreateWithoutPageInput, UserTypePermissionUncheckedCreateWithoutPageInput>
  }

  export type UserTypePermissionCreateManyPageInputEnvelope = {
    data: UserTypePermissionCreateManyPageInput | UserTypePermissionCreateManyPageInput[]
    skipDuplicates?: boolean
  }

  export type UserTypePermissionUpsertWithWhereUniqueWithoutPageInput = {
    where: UserTypePermissionWhereUniqueInput
    update: XOR<UserTypePermissionUpdateWithoutPageInput, UserTypePermissionUncheckedUpdateWithoutPageInput>
    create: XOR<UserTypePermissionCreateWithoutPageInput, UserTypePermissionUncheckedCreateWithoutPageInput>
  }

  export type UserTypePermissionUpdateWithWhereUniqueWithoutPageInput = {
    where: UserTypePermissionWhereUniqueInput
    data: XOR<UserTypePermissionUpdateWithoutPageInput, UserTypePermissionUncheckedUpdateWithoutPageInput>
  }

  export type UserTypePermissionUpdateManyWithWhereWithoutPageInput = {
    where: UserTypePermissionScalarWhereInput
    data: XOR<UserTypePermissionUpdateManyMutationInput, UserTypePermissionUncheckedUpdateManyWithoutPageInput>
  }

  export type PageCreateWithoutPermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUncheckedCreateWithoutPermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageCreateOrConnectWithoutPermissionsInput = {
    where: PageWhereUniqueInput
    create: XOR<PageCreateWithoutPermissionsInput, PageUncheckedCreateWithoutPermissionsInput>
  }

  export type UserTypeCreateWithoutPermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionCreateNestedManyWithoutUserTypeInput
    users?: UserCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedCreateWithoutPermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    users?: UserUncheckedCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeCreateOrConnectWithoutPermissionsInput = {
    where: UserTypeWhereUniqueInput
    create: XOR<UserTypeCreateWithoutPermissionsInput, UserTypeUncheckedCreateWithoutPermissionsInput>
  }

  export type PageUpsertWithoutPermissionsInput = {
    update: XOR<PageUpdateWithoutPermissionsInput, PageUncheckedUpdateWithoutPermissionsInput>
    create: XOR<PageCreateWithoutPermissionsInput, PageUncheckedCreateWithoutPermissionsInput>
    where?: PageWhereInput
  }

  export type PageUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: PageWhereInput
    data: XOR<PageUpdateWithoutPermissionsInput, PageUncheckedUpdateWithoutPermissionsInput>
  }

  export type PageUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypeUpsertWithoutPermissionsInput = {
    update: XOR<UserTypeUpdateWithoutPermissionsInput, UserTypeUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserTypeCreateWithoutPermissionsInput, UserTypeUncheckedCreateWithoutPermissionsInput>
    where?: UserTypeWhereInput
  }

  export type UserTypeUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserTypeWhereInput
    data: XOR<UserTypeUpdateWithoutPermissionsInput, UserTypeUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserTypeUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUpdateManyWithoutUserTypeNestedInput
    users?: UserUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    users?: UserUncheckedUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeCreateWithoutLeadTypePermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedCreateWithoutLeadTypePermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeCreateOrConnectWithoutLeadTypePermissionsInput = {
    where: UserTypeWhereUniqueInput
    create: XOR<UserTypeCreateWithoutLeadTypePermissionsInput, UserTypeUncheckedCreateWithoutLeadTypePermissionsInput>
  }

  export type UserTypeUpsertWithoutLeadTypePermissionsInput = {
    update: XOR<UserTypeUpdateWithoutLeadTypePermissionsInput, UserTypeUncheckedUpdateWithoutLeadTypePermissionsInput>
    create: XOR<UserTypeCreateWithoutLeadTypePermissionsInput, UserTypeUncheckedCreateWithoutLeadTypePermissionsInput>
    where?: UserTypeWhereInput
  }

  export type UserTypeUpdateToOneWithWhereWithoutLeadTypePermissionsInput = {
    where?: UserTypeWhereInput
    data: XOR<UserTypeUpdateWithoutLeadTypePermissionsInput, UserTypeUncheckedUpdateWithoutLeadTypePermissionsInput>
  }

  export type UserTypeUpdateWithoutLeadTypePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeUncheckedUpdateWithoutLeadTypePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    notificationRolePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
  }

  export type UserCreateWithoutLeadTypePermissionsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLeadTypePermissionsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLeadTypePermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeadTypePermissionsInput, UserUncheckedCreateWithoutLeadTypePermissionsInput>
  }

  export type UserUpsertWithoutLeadTypePermissionsInput = {
    update: XOR<UserUpdateWithoutLeadTypePermissionsInput, UserUncheckedUpdateWithoutLeadTypePermissionsInput>
    create: XOR<UserCreateWithoutLeadTypePermissionsInput, UserUncheckedCreateWithoutLeadTypePermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLeadTypePermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLeadTypePermissionsInput, UserUncheckedUpdateWithoutLeadTypePermissionsInput>
  }

  export type UserUpdateWithoutLeadTypePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLeadTypePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutActivityLogsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
  }

  export type UserUpsertWithoutActivityLogsInput = {
    update: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPasswordResetTokensInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordResetTokensInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordResetTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
  }

  export type UserUpsertWithoutPasswordResetTokensInput = {
    update: XOR<UserUpdateWithoutPasswordResetTokensInput, UserUncheckedUpdateWithoutPasswordResetTokensInput>
    create: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetTokensInput, UserUncheckedUpdateWithoutPasswordResetTokensInput>
  }

  export type UserUpdateWithoutPasswordResetTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBalanceTransactionsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBalanceTransactionsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBalanceTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBalanceTransactionsInput, UserUncheckedCreateWithoutBalanceTransactionsInput>
  }

  export type UserUpsertWithoutBalanceTransactionsInput = {
    update: XOR<UserUpdateWithoutBalanceTransactionsInput, UserUncheckedUpdateWithoutBalanceTransactionsInput>
    create: XOR<UserCreateWithoutBalanceTransactionsInput, UserUncheckedCreateWithoutBalanceTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBalanceTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBalanceTransactionsInput, UserUncheckedUpdateWithoutBalanceTransactionsInput>
  }

  export type UserUpdateWithoutBalanceTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBalanceTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationCreateWithoutNotificationTypeInput = {
    id?: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutNotificationTypeInput = {
    id?: string
    userId: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutNotificationTypeInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotificationTypeInput, NotificationUncheckedCreateWithoutNotificationTypeInput>
  }

  export type NotificationCreateManyNotificationTypeInputEnvelope = {
    data: NotificationCreateManyNotificationTypeInput | NotificationCreateManyNotificationTypeInput[]
    skipDuplicates?: boolean
  }

  export type NotificationPreferenceCreateWithoutNotificationTypeInput = {
    id?: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationPreferencesInput
  }

  export type NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput = {
    id?: string
    userId: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationPreferenceCreateOrConnectWithoutNotificationTypeInput = {
    where: NotificationPreferenceWhereUniqueInput
    create: XOR<NotificationPreferenceCreateWithoutNotificationTypeInput, NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput>
  }

  export type NotificationPreferenceCreateManyNotificationTypeInputEnvelope = {
    data: NotificationPreferenceCreateManyNotificationTypeInput | NotificationPreferenceCreateManyNotificationTypeInput[]
    skipDuplicates?: boolean
  }

  export type NotificationRolePermissionCreateWithoutNotificationTypeInput = {
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userType: UserTypeCreateNestedOneWithoutNotificationRolePermissionsInput
  }

  export type NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput = {
    id?: number
    userTypeId: string
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationRolePermissionCreateOrConnectWithoutNotificationTypeInput = {
    where: NotificationRolePermissionWhereUniqueInput
    create: XOR<NotificationRolePermissionCreateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput>
  }

  export type NotificationRolePermissionCreateManyNotificationTypeInputEnvelope = {
    data: NotificationRolePermissionCreateManyNotificationTypeInput | NotificationRolePermissionCreateManyNotificationTypeInput[]
    skipDuplicates?: boolean
  }

  export type NotificationUpsertWithWhereUniqueWithoutNotificationTypeInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutNotificationTypeInput, NotificationUncheckedUpdateWithoutNotificationTypeInput>
    create: XOR<NotificationCreateWithoutNotificationTypeInput, NotificationUncheckedCreateWithoutNotificationTypeInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutNotificationTypeInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutNotificationTypeInput, NotificationUncheckedUpdateWithoutNotificationTypeInput>
  }

  export type NotificationUpdateManyWithWhereWithoutNotificationTypeInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationTypeInput>
  }

  export type NotificationPreferenceUpsertWithWhereUniqueWithoutNotificationTypeInput = {
    where: NotificationPreferenceWhereUniqueInput
    update: XOR<NotificationPreferenceUpdateWithoutNotificationTypeInput, NotificationPreferenceUncheckedUpdateWithoutNotificationTypeInput>
    create: XOR<NotificationPreferenceCreateWithoutNotificationTypeInput, NotificationPreferenceUncheckedCreateWithoutNotificationTypeInput>
  }

  export type NotificationPreferenceUpdateWithWhereUniqueWithoutNotificationTypeInput = {
    where: NotificationPreferenceWhereUniqueInput
    data: XOR<NotificationPreferenceUpdateWithoutNotificationTypeInput, NotificationPreferenceUncheckedUpdateWithoutNotificationTypeInput>
  }

  export type NotificationPreferenceUpdateManyWithWhereWithoutNotificationTypeInput = {
    where: NotificationPreferenceScalarWhereInput
    data: XOR<NotificationPreferenceUpdateManyMutationInput, NotificationPreferenceUncheckedUpdateManyWithoutNotificationTypeInput>
  }

  export type NotificationRolePermissionUpsertWithWhereUniqueWithoutNotificationTypeInput = {
    where: NotificationRolePermissionWhereUniqueInput
    update: XOR<NotificationRolePermissionUpdateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedUpdateWithoutNotificationTypeInput>
    create: XOR<NotificationRolePermissionCreateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedCreateWithoutNotificationTypeInput>
  }

  export type NotificationRolePermissionUpdateWithWhereUniqueWithoutNotificationTypeInput = {
    where: NotificationRolePermissionWhereUniqueInput
    data: XOR<NotificationRolePermissionUpdateWithoutNotificationTypeInput, NotificationRolePermissionUncheckedUpdateWithoutNotificationTypeInput>
  }

  export type NotificationRolePermissionUpdateManyWithWhereWithoutNotificationTypeInput = {
    where: NotificationRolePermissionScalarWhereInput
    data: XOR<NotificationRolePermissionUpdateManyMutationInput, NotificationRolePermissionUncheckedUpdateManyWithoutNotificationTypeInput>
  }

  export type UserCreateWithoutNotificationPreferencesInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationPreferencesInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
  }

  export type NotificationTypeCreateWithoutUserPreferencesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutNotificationTypeInput
    roleTypePermissions?: NotificationRolePermissionCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeUncheckedCreateWithoutUserPreferencesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutNotificationTypeInput
    roleTypePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeCreateOrConnectWithoutUserPreferencesInput = {
    where: NotificationTypeWhereUniqueInput
    create: XOR<NotificationTypeCreateWithoutUserPreferencesInput, NotificationTypeUncheckedCreateWithoutUserPreferencesInput>
  }

  export type UserUpsertWithoutNotificationPreferencesInput = {
    update: XOR<UserUpdateWithoutNotificationPreferencesInput, UserUncheckedUpdateWithoutNotificationPreferencesInput>
    create: XOR<UserCreateWithoutNotificationPreferencesInput, UserUncheckedCreateWithoutNotificationPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationPreferencesInput, UserUncheckedUpdateWithoutNotificationPreferencesInput>
  }

  export type UserUpdateWithoutNotificationPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationTypeUpsertWithoutUserPreferencesInput = {
    update: XOR<NotificationTypeUpdateWithoutUserPreferencesInput, NotificationTypeUncheckedUpdateWithoutUserPreferencesInput>
    create: XOR<NotificationTypeCreateWithoutUserPreferencesInput, NotificationTypeUncheckedCreateWithoutUserPreferencesInput>
    where?: NotificationTypeWhereInput
  }

  export type NotificationTypeUpdateToOneWithWhereWithoutUserPreferencesInput = {
    where?: NotificationTypeWhereInput
    data: XOR<NotificationTypeUpdateWithoutUserPreferencesInput, NotificationTypeUncheckedUpdateWithoutUserPreferencesInput>
  }

  export type NotificationTypeUpdateWithoutUserPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutNotificationTypeNestedInput
    roleTypePermissions?: NotificationRolePermissionUpdateManyWithoutNotificationTypeNestedInput
  }

  export type NotificationTypeUncheckedUpdateWithoutUserPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutNotificationTypeNestedInput
    roleTypePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutNotificationTypeNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidCreateNestedManyWithoutUserInput
    leads?: LeadCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchCreateNestedManyWithoutUserInput
    userType: UserTypeCreateNestedOneWithoutUsersInput
    leadTypePermissions?: UserLeadTypePermissionCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    userTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    leads?: LeadUncheckedCreateNestedManyWithoutOwnerInput
    purchasedLeads?: LeadSaleUncheckedCreateNestedManyWithoutBuyerInput
    watching?: LeadWatchUncheckedCreateNestedManyWithoutUserInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    balanceTransactions?: BalanceTransactionUncheckedCreateNestedManyWithoutUserInput
    notificationPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type NotificationTypeCreateWithoutNotificationsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userPreferences?: NotificationPreferenceCreateNestedManyWithoutNotificationTypeInput
    roleTypePermissions?: NotificationRolePermissionCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeUncheckedCreateWithoutNotificationsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutNotificationTypeInput
    roleTypePermissions?: NotificationRolePermissionUncheckedCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeCreateOrConnectWithoutNotificationsInput = {
    where: NotificationTypeWhereUniqueInput
    create: XOR<NotificationTypeCreateWithoutNotificationsInput, NotificationTypeUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    userType?: UserTypeUpdateOneRequiredWithoutUsersNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    userTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationTypeUpsertWithoutNotificationsInput = {
    update: XOR<NotificationTypeUpdateWithoutNotificationsInput, NotificationTypeUncheckedUpdateWithoutNotificationsInput>
    create: XOR<NotificationTypeCreateWithoutNotificationsInput, NotificationTypeUncheckedCreateWithoutNotificationsInput>
    where?: NotificationTypeWhereInput
  }

  export type NotificationTypeUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: NotificationTypeWhereInput
    data: XOR<NotificationTypeUpdateWithoutNotificationsInput, NotificationTypeUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationTypeUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userPreferences?: NotificationPreferenceUpdateManyWithoutNotificationTypeNestedInput
    roleTypePermissions?: NotificationRolePermissionUpdateManyWithoutNotificationTypeNestedInput
  }

  export type NotificationTypeUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutNotificationTypeNestedInput
    roleTypePermissions?: NotificationRolePermissionUncheckedUpdateManyWithoutNotificationTypeNestedInput
  }

  export type UserTypeCreateWithoutNotificationRolePermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionCreateNestedManyWithoutUserTypeInput
    users?: UserCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedCreateWithoutNotificationRolePermissionsInput = {
    id: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
    users?: UserUncheckedCreateNestedManyWithoutUserTypeInput
    permissions?: UserTypePermissionUncheckedCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeCreateOrConnectWithoutNotificationRolePermissionsInput = {
    where: UserTypeWhereUniqueInput
    create: XOR<UserTypeCreateWithoutNotificationRolePermissionsInput, UserTypeUncheckedCreateWithoutNotificationRolePermissionsInput>
  }

  export type NotificationTypeCreateWithoutRoleTypePermissionsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutNotificationTypeInput
    userPreferences?: NotificationPreferenceCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeUncheckedCreateWithoutRoleTypePermissionsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    defaultEnabled?: boolean
    emailEnabled?: boolean
    inAppEnabled?: boolean
    icon?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutNotificationTypeInput
    userPreferences?: NotificationPreferenceUncheckedCreateNestedManyWithoutNotificationTypeInput
  }

  export type NotificationTypeCreateOrConnectWithoutRoleTypePermissionsInput = {
    where: NotificationTypeWhereUniqueInput
    create: XOR<NotificationTypeCreateWithoutRoleTypePermissionsInput, NotificationTypeUncheckedCreateWithoutRoleTypePermissionsInput>
  }

  export type UserTypeUpsertWithoutNotificationRolePermissionsInput = {
    update: XOR<UserTypeUpdateWithoutNotificationRolePermissionsInput, UserTypeUncheckedUpdateWithoutNotificationRolePermissionsInput>
    create: XOR<UserTypeCreateWithoutNotificationRolePermissionsInput, UserTypeUncheckedCreateWithoutNotificationRolePermissionsInput>
    where?: UserTypeWhereInput
  }

  export type UserTypeUpdateToOneWithWhereWithoutNotificationRolePermissionsInput = {
    where?: UserTypeWhereInput
    data: XOR<UserTypeUpdateWithoutNotificationRolePermissionsInput, UserTypeUncheckedUpdateWithoutNotificationRolePermissionsInput>
  }

  export type UserTypeUpdateWithoutNotificationRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUpdateManyWithoutUserTypeNestedInput
    users?: UserUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUpdateManyWithoutUserTypeNestedInput
  }

  export type UserTypeUncheckedUpdateWithoutNotificationRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadTypePermissions?: LeadTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
    users?: UserUncheckedUpdateManyWithoutUserTypeNestedInput
    permissions?: UserTypePermissionUncheckedUpdateManyWithoutUserTypeNestedInput
  }

  export type NotificationTypeUpsertWithoutRoleTypePermissionsInput = {
    update: XOR<NotificationTypeUpdateWithoutRoleTypePermissionsInput, NotificationTypeUncheckedUpdateWithoutRoleTypePermissionsInput>
    create: XOR<NotificationTypeCreateWithoutRoleTypePermissionsInput, NotificationTypeUncheckedCreateWithoutRoleTypePermissionsInput>
    where?: NotificationTypeWhereInput
  }

  export type NotificationTypeUpdateToOneWithWhereWithoutRoleTypePermissionsInput = {
    where?: NotificationTypeWhereInput
    data: XOR<NotificationTypeUpdateWithoutRoleTypePermissionsInput, NotificationTypeUncheckedUpdateWithoutRoleTypePermissionsInput>
  }

  export type NotificationTypeUpdateWithoutRoleTypePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutNotificationTypeNestedInput
    userPreferences?: NotificationPreferenceUpdateManyWithoutNotificationTypeNestedInput
  }

  export type NotificationTypeUncheckedUpdateWithoutRoleTypePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    defaultEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutNotificationTypeNestedInput
    userPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutNotificationTypeNestedInput
  }

  export type BidCreateManyUserInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    leadId: string
  }

  export type LeadCreateManyOwnerInput = {
    id?: string
    title: string
    description: string
    privateDetails?: string | null
    postalCode?: string | null
    startPrice: number
    minIncrement: number
    instantBuyPrice?: number | null
    reservePrice?: number | null
    antiSnipeSeconds?: number
    insuranceType?: string | null
    isActive?: boolean
    isShowcase?: boolean
    isSold?: boolean
    featured?: boolean
    startsAt?: Date | string | null
    endsAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadSaleCreateManyBuyerInput = {
    id?: string
    leadId: string
    amount: number
    paymentMethod?: string
    balanceBefore?: number | null
    balanceAfter?: number | null
    soldAt?: Date | string
    createdAt?: Date | string
  }

  export type LeadWatchCreateManyUserInput = {
    id?: string
    leadId: string
    createdAt?: Date | string
  }

  export type UserLeadTypePermissionCreateManyUserInput = {
    id?: number
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityLogCreateManyUserInput = {
    id?: string
    action: string
    details?: string | null
    entityType?: string | null
    entityId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type PasswordResetTokenCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    used?: boolean
    createdAt?: Date | string
  }

  export type BalanceTransactionCreateManyUserInput = {
    id?: string
    amount: number
    type: string
    description?: string | null
    relatedId?: string | null
    adminId?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    notificationTypeId: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationPreferenceCreateManyUserInput = {
    id?: string
    notificationTypeId: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BidUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lead?: LeadUpdateOneRequiredWithoutBidsNestedInput
  }

  export type BidUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadId?: StringFieldUpdateOperationsInput | string
  }

  export type BidUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leadId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bids?: BidUpdateManyWithoutLeadNestedInput
    sale?: LeadSaleUpdateOneWithoutLeadNestedInput
    watchers?: LeadWatchUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bids?: BidUncheckedUpdateManyWithoutLeadNestedInput
    sale?: LeadSaleUncheckedUpdateOneWithoutLeadNestedInput
    watchers?: LeadWatchUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    privateDetails?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    startPrice?: IntFieldUpdateOperationsInput | number
    minIncrement?: IntFieldUpdateOperationsInput | number
    instantBuyPrice?: NullableIntFieldUpdateOperationsInput | number | null
    reservePrice?: NullableIntFieldUpdateOperationsInput | number | null
    antiSnipeSeconds?: IntFieldUpdateOperationsInput | number
    insuranceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isShowcase?: BoolFieldUpdateOperationsInput | boolean
    isSold?: BoolFieldUpdateOperationsInput | boolean
    featured?: BoolFieldUpdateOperationsInput | boolean
    startsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadSaleUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lead?: LeadUpdateOneRequiredWithoutSaleNestedInput
  }

  export type LeadSaleUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadSaleUncheckedUpdateManyWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    paymentMethod?: StringFieldUpdateOperationsInput | string
    balanceBefore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceAfter?: NullableIntFieldUpdateOperationsInput | number | null
    soldAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadWatchUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lead?: LeadUpdateOneRequiredWithoutWatchersNestedInput
  }

  export type LeadWatchUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadWatchUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeadTypePermissionUpdateWithoutUserInput = {
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeadTypePermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLeadTypePermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceTransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceTransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BalanceTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: NotificationTypeUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: NotificationTypeUpdateOneRequiredWithoutUserPreferencesNestedInput
  }

  export type NotificationPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BidCreateManyLeadInput = {
    id?: string
    amount: number
    maxBid: number
    isAutoBid?: boolean
    createdAt?: Date | string
    userId: string
  }

  export type LeadWatchCreateManyLeadInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type BidUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBidsNestedInput
  }

  export type BidUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BidUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    maxBid?: IntFieldUpdateOperationsInput | number
    isAutoBid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadWatchUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchingNestedInput
  }

  export type LeadWatchUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadWatchUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadTypePermissionCreateManyUserTypeInput = {
    id?: number
    leadType: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyUserTypeInput = {
    id?: string
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    username?: string | null
    profileImage?: string | null
    lastActivity?: Date | string | null
    lastIP?: string | null
    lastUserAgent?: string | null
    twoFactorEnabled?: boolean
    twoFactorSecret?: string | null
    isActive?: boolean
    balance?: number
    balanceEnabled?: boolean
    paymentMethod?: string
    ibanAccountHolder?: string | null
    ibanNumber?: string | null
    ibanBic?: string | null
    ibanAddress?: string | null
    ibanPostalCode?: string | null
    ibanCity?: string | null
  }

  export type UserTypePermissionCreateManyUserTypeInput = {
    id?: number
    pageId: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationRolePermissionCreateManyUserTypeInput = {
    id?: number
    notificationTypeId: string
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeadTypePermissionUpdateWithoutUserTypeInput = {
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadTypePermissionUncheckedUpdateWithoutUserTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeadTypePermissionUncheckedUpdateManyWithoutUserTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leadType?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutUserTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUpdateManyWithoutUserNestedInput
    leads?: LeadUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    leads?: LeadUncheckedUpdateManyWithoutOwnerNestedInput
    purchasedLeads?: LeadSaleUncheckedUpdateManyWithoutBuyerNestedInput
    watching?: LeadWatchUncheckedUpdateManyWithoutUserNestedInput
    leadTypePermissions?: UserLeadTypePermissionUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    balanceTransactions?: BalanceTransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationPreferences?: NotificationPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastIP?: NullableStringFieldUpdateOperationsInput | string | null
    lastUserAgent?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    balance?: FloatFieldUpdateOperationsInput | number
    balanceEnabled?: BoolFieldUpdateOperationsInput | boolean
    paymentMethod?: StringFieldUpdateOperationsInput | string
    ibanAccountHolder?: NullableStringFieldUpdateOperationsInput | string | null
    ibanNumber?: NullableStringFieldUpdateOperationsInput | string | null
    ibanBic?: NullableStringFieldUpdateOperationsInput | string | null
    ibanAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ibanPostalCode?: NullableStringFieldUpdateOperationsInput | string | null
    ibanCity?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserTypePermissionUpdateWithoutUserTypeInput = {
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    page?: PageUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserTypePermissionUncheckedUpdateWithoutUserTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    pageId?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypePermissionUncheckedUpdateManyWithoutUserTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    pageId?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionUpdateWithoutUserTypeInput = {
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: NotificationTypeUpdateOneRequiredWithoutRoleTypePermissionsNestedInput
  }

  export type NotificationRolePermissionUncheckedUpdateWithoutUserTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionUncheckedUpdateManyWithoutUserTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    notificationTypeId?: StringFieldUpdateOperationsInput | string
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypePermissionCreateManyPageInput = {
    id?: number
    userTypeId: string
    hasAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTypePermissionUpdateWithoutPageInput = {
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type UserTypePermissionUncheckedUpdateWithoutPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTypePermissionUncheckedUpdateManyWithoutPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    hasAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyNotificationTypeInput = {
    id?: string
    userId: string
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    readAt?: Date | string | null
    emailSent?: boolean
    emailSentAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationPreferenceCreateManyNotificationTypeInput = {
    id?: string
    userId: string
    emailEnabled?: boolean
    inAppEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationRolePermissionCreateManyNotificationTypeInput = {
    id?: number
    userTypeId: string
    canReceive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateWithoutNotificationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutNotificationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailSent?: BoolFieldUpdateOperationsInput | boolean
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUpdateWithoutNotificationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationPreferencesNestedInput
  }

  export type NotificationPreferenceUncheckedUpdateWithoutNotificationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationPreferenceUncheckedUpdateManyWithoutNotificationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    inAppEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionUpdateWithoutNotificationTypeInput = {
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneRequiredWithoutNotificationRolePermissionsNestedInput
  }

  export type NotificationRolePermissionUncheckedUpdateWithoutNotificationTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRolePermissionUncheckedUpdateManyWithoutNotificationTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userTypeId?: StringFieldUpdateOperationsInput | string
    canReceive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}