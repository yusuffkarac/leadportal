
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  userTypeId: 'userTypeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  profileImage: 'profileImage',
  lastActivity: 'lastActivity',
  lastIP: 'lastIP',
  lastUserAgent: 'lastUserAgent',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  isActive: 'isActive',
  balance: 'balance',
  balanceEnabled: 'balanceEnabled',
  paymentMethod: 'paymentMethod',
  ibanAccountHolder: 'ibanAccountHolder',
  ibanNumber: 'ibanNumber',
  ibanBic: 'ibanBic',
  ibanAddress: 'ibanAddress',
  ibanPostalCode: 'ibanPostalCode',
  ibanCity: 'ibanCity'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  privateDetails: 'privateDetails',
  postalCode: 'postalCode',
  startPrice: 'startPrice',
  minIncrement: 'minIncrement',
  instantBuyPrice: 'instantBuyPrice',
  reservePrice: 'reservePrice',
  antiSnipeSeconds: 'antiSnipeSeconds',
  insuranceType: 'insuranceType',
  isActive: 'isActive',
  isShowcase: 'isShowcase',
  isSold: 'isSold',
  featured: 'featured',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  maxBid: 'maxBid',
  isAutoBid: 'isAutoBid',
  createdAt: 'createdAt',
  leadId: 'leadId',
  userId: 'userId'
};

exports.Prisma.LeadWatchScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.LeadSaleScalarFieldEnum = {
  id: 'id',
  leadId: 'leadId',
  buyerId: 'buyerId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  soldAt: 'soldAt',
  createdAt: 'createdAt'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  leadIdFormat: 'leadIdFormat',
  customFormat: 'customFormat',
  leadPrefix: 'leadPrefix',
  startingNumber: 'startingNumber',
  numberType: 'numberType',
  defaultCurrency: 'defaultCurrency',
  defaultAuctionDays: 'defaultAuctionDays',
  defaultMinIncrement: 'defaultMinIncrement',
  homepageHeroEyebrow: 'homepageHeroEyebrow',
  homepageHeroTitle: 'homepageHeroTitle',
  homepageHeroHighlight: 'homepageHeroHighlight',
  homepageHeroTitleSuffix: 'homepageHeroTitleSuffix',
  homepageHeroSubtitle: 'homepageHeroSubtitle',
  homepageHeroPrimaryCtaText: 'homepageHeroPrimaryCtaText',
  homepageHeroPrimaryCtaLink: 'homepageHeroPrimaryCtaLink',
  homepageHeroSecondaryCtaText: 'homepageHeroSecondaryCtaText',
  homepageHeroSecondaryCtaLink: 'homepageHeroSecondaryCtaLink',
  homepageFeatureHeading: 'homepageFeatureHeading',
  homepageFeatures: 'homepageFeatures',
  homepageShowcaseEyebrow: 'homepageShowcaseEyebrow',
  homepageShowcaseTitle: 'homepageShowcaseTitle',
  homepageShowcaseCtaText: 'homepageShowcaseCtaText',
  homepageShowcaseCtaLink: 'homepageShowcaseCtaLink',
  homepageStatsEyebrow: 'homepageStatsEyebrow',
  homepageStatsTitle: 'homepageStatsTitle',
  homepageStats: 'homepageStats',
  homepageCtaTitle: 'homepageCtaTitle',
  homepageCtaSubtitle: 'homepageCtaSubtitle',
  homepageCtaPrimaryText: 'homepageCtaPrimaryText',
  homepageCtaPrimaryLink: 'homepageCtaPrimaryLink',
  homepageCtaSecondaryText: 'homepageCtaSecondaryText',
  homepageCtaSecondaryLink: 'homepageCtaSecondaryLink',
  maintenanceMode: 'maintenanceMode',
  maintenanceMessage: 'maintenanceMessage',
  smtpHost: 'smtpHost',
  smtpPort: 'smtpPort',
  smtpUser: 'smtpUser',
  smtpPass: 'smtpPass',
  smtpFromName: 'smtpFromName',
  smtpUseTLS: 'smtpUseTLS',
  smtpUseSSL: 'smtpUseSSL',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyLogoUrl: 'companyLogoUrl',
  companyName: 'companyName',
  faviconUrl: 'faviconUrl',
  footerDescription: 'footerDescription',
  footerEmail: 'footerEmail',
  footerNote: 'footerNote',
  footerPhone: 'footerPhone',
  insuranceTypes: 'insuranceTypes',
  legalLinks: 'legalLinks',
  servicesLinks: 'servicesLinks',
  socialMedia: 'socialMedia',
  supportLinks: 'supportLinks',
  tradeRegisterNumber: 'tradeRegisterNumber'
};

exports.Prisma.UserTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTypePermissionScalarFieldEnum = {
  id: 'id',
  userTypeId: 'userTypeId',
  pageId: 'pageId',
  hasAccess: 'hasAccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadTypePermissionScalarFieldEnum = {
  id: 'id',
  userTypeId: 'userTypeId',
  leadType: 'leadType',
  hasAccess: 'hasAccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserLeadTypePermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  leadType: 'leadType',
  hasAccess: 'hasAccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FAQScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  category: 'category',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AboutScalarFieldEnum = {
  id: 'id',
  section: 'section',
  title: 'title',
  subtitle: 'subtitle',
  content: 'content',
  imageUrl: 'imageUrl',
  data: 'data',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DesignSettingsScalarFieldEnum = {
  id: 'id',
  colors: 'colors',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  subject: 'subject',
  htmlContent: 'htmlContent',
  textContent: 'textContent',
  isActive: 'isActive',
  variables: 'variables',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SMSTemplateScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  content: 'content',
  isActive: 'isActive',
  variables: 'variables',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  entityType: 'entityType',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.BalanceTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  relatedId: 'relatedId',
  adminId: 'adminId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationTypeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  category: 'category',
  defaultEnabled: 'defaultEnabled',
  emailEnabled: 'emailEnabled',
  inAppEnabled: 'inAppEnabled',
  icon: 'icon',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  notificationTypeId: 'notificationTypeId',
  emailEnabled: 'emailEnabled',
  inAppEnabled: 'inAppEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  notificationTypeId: 'notificationTypeId',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  readAt: 'readAt',
  emailSent: 'emailSent',
  emailSentAt: 'emailSentAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationRolePermissionScalarFieldEnum = {
  id: 'id',
  userTypeId: 'userTypeId',
  notificationTypeId: 'notificationTypeId',
  canReceive: 'canReceive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Lead: 'Lead',
  Bid: 'Bid',
  LeadWatch: 'LeadWatch',
  LeadSale: 'LeadSale',
  Settings: 'Settings',
  UserType: 'UserType',
  Page: 'Page',
  UserTypePermission: 'UserTypePermission',
  LeadTypePermission: 'LeadTypePermission',
  UserLeadTypePermission: 'UserLeadTypePermission',
  FAQ: 'FAQ',
  About: 'About',
  DesignSettings: 'DesignSettings',
  EmailTemplate: 'EmailTemplate',
  SMSTemplate: 'SMSTemplate',
  ActivityLog: 'ActivityLog',
  PasswordResetToken: 'PasswordResetToken',
  BalanceTransaction: 'BalanceTransaction',
  NotificationType: 'NotificationType',
  NotificationPreference: 'NotificationPreference',
  Notification: 'Notification',
  NotificationRolePermission: 'NotificationRolePermission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
